{"index": 0, "beams": [{"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.07667743889320507, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.1363309957663634, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.15354109024739743, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.15444455016422232, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.1857861617164287, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.194532487069797, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.27969002016689215, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.28411793968207627, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.28565596788483477, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.28670613123281924, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(getData(Track),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.28782633008148684, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2970621602156934, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.30796296365117587, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.3087663082295249, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.309562686701716, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 1, "beams": [{"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.13719710136811322, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.15905165083218134, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.19264537653424182, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.19645481603900947, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20041523244732548, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21313309010831502, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21787653352542508, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.Total)", "score": -0.23943137747438434, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2546133692020564, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2700898992884039, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2750070545547281, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.Total)", "score": -0.2795979389003477, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2835845897285997, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.30552290285189326, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.Total)", "score": -0.3152854434816823, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 2, "beams": [{"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)", "score": -0.1185714167824202, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.202418231788586, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)", "score": -0.20856459428184976, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.23490963983425933, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.23531646232658532, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream),getData(Track),Album.AlbumId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.2389331151089043, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.2469393959776814, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Julian Bream),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.26124812125075314, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.26502802050358326, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.AlbumId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)", "score": -0.2669162772849302, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.27705774883761125, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)", "score": -0.2781095944801509, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Julian Bream),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.28259496167561377, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Julian Bream), Track.TrackId),Track.UnitPrice)", "score": -0.29787862450388497, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.3029568716830378, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 3, "beams": [{"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.04337272876045972, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.3244632807789515, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.3557201306252864, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.3625409490346101, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.Total))", "score": -0.4132972833617714, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.43927398543954593, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.4442256080110587, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.4635345745529102, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.4702495242214998, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.4713624398141292, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.4729966562148046, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.Total),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.5576895119300205, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.CustomerId,InvoiceLine.InvoiceId),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.5593691535114063, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.Total))", "score": -0.5813204239563566, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.5850602198833689, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 4, "beams": [{"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.005552802918283613, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.Phone))", "score": -0.920938985495721, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.LastName))", "score": -0.9895589976959306, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -1.0315343826679202, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -1.0367269127584096, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -1.1258216019175316, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.PostalCode))", "score": -1.130068694299412, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -1.1580747985984177, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -1.2703079247424356, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Customer.Phone))", "score": -1.2918158264416058, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.City))", "score": -1.3057627542593189, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -1.3157458164869658, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -1.31802482453341, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Employee.Phone),Artist.Name))", "score": -1.340434278404686, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.Title),Artist.Name))", "score": -1.4066119638080214, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 5, "beams": [{"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))", "score": -0.07552656051120721, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 262-3443),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Invoice.Total)", "score": -0.3694463162885208, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Employee.Phone,=,+1 (403) 262-3443),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Invoice.Total)", "score": -0.4130464042796698, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Invoice.Total)", "score": -0.41615767688109206, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 262-3443),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State)", "score": -0.4380670967826936, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "sum(distinct(filter(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Invoice.Total)", "score": -0.4473202920039912, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Employee.Phone,=,+1 (403) 262-3443),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State)", "score": -0.478567103679159, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))", "score": -0.48421288790996186, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State)", "score": -0.4912671827758058, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "sum(distinct(filter(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State)", "score": -0.512841050209425, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 262-3443),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,+1 (403) 262-3443), Employee.State),Invoice.Total)", "score": -0.5143546475587759, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Invoice.Total)", "score": -0.5209668498721417, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,+1 (403) 262-3443), Employee.State),Employee.State))", "score": -0.5323023496603128, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.BirthDate),Employee.State))", "score": -0.5345992817019578, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 262-3443),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,=,+1 (403) 262-3443), Employee.State),Invoice.Total)", "score": -0.5347105240190022, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 6, "beams": [{"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.0639354419050674, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.12279905540591644, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.15186306103888522, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2147587394803891, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.2482948015562851, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.24835181703054848, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.300434128070572, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.30221117371714024, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.311437582298329, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.3179939923942139, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.32148516437366303, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.32304956046789546, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.3251209605177768, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.33133569686687125, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3333491979821577, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 7, "beams": [{"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,=,2509409), Artist.Name),Artist.Name))", "score": -0.04793901529446773, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,<=,2509409), Artist.Name),Artist.Name))", "score": -0.1096253409434747, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,2509409),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.24421490087097752, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.TrackId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,=,2509409), Artist.Name),Artist.Name))", "score": -0.25465226972290045, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.TrackId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,<=,2509409), Artist.Name),Artist.Name))", "score": -0.3163385953719074, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409), Artist.Name),Artist.Name))", "score": -0.3595779447687388, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,=,2509409), Artist.Name),Artist.Name))", "score": -0.38118906114757634, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3841382071127951, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Customer.Email,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,=,2509409), Artist.Name),Artist.Name))", "score": -0.40588128893735564, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Album.ArtistId,Artist.ArtistId),Track.Bytes,=,2509409), Artist.Name),Artist.Name))", "score": -0.41711130601281793, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,<=,2509409), Artist.Name),Artist.Name))", "score": -0.4428753867965833, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,=,2509409), Artist.Name),Artist.Name))", "score": -0.45215938780174064, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,>=,2509409), Artist.Name),Artist.Name))", "score": -0.45228383217880447, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,=,2509409), Artist.Name),Artist.Name))", "score": -0.4628164848624223, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Customer.Email,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,<=,2509409), Artist.Name),Artist.Name))", "score": -0.46756761458636265, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 8, "beams": [{"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,10317185), Playlist.Name),Playlist.Name))", "score": -0.07454053067572573, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,10317185),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.10197387485253022, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<,10317185),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.18667083201696927, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<=,10317185),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2068895558511297, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,10317185),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2900298532003879, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<,10317185), Playlist.Name),Playlist.Name))", "score": -0.2919027215144361, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))", "score": -0.30948292452749576, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Invoice.Total,<,10317185), Playlist.Name),Playlist.Name))", "score": -0.35079269312921757, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,10317185), Playlist.Name),Playlist.Name))", "score": -0.3565258635838845, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,Playlist.PlaylistId),Track.Bytes,<,10317185), Playlist.Name),Playlist.Name))", "score": -0.38129550796192535, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Playlist),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,10317185), Playlist.Name),Playlist.Name))", "score": -0.42209677921994443, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<,10317185),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.4270097692353366, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Employee.BirthDate,<,10317185), Playlist.Name),Playlist.Name))", "score": -0.4327406663940332, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,10317185),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.4374284304959091, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<=,10317185),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.4472285020682224, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 9, "beams": [{"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.04584926259531306, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.16239139288439894, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.19726089269505817, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.22830290796638603, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Track.UnitPrice),Invoice.InvoiceDate))", "score": -0.24639110479740625, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), InvoiceLine.UnitPrice),Invoice.InvoiceDate))", "score": -0.2483286830597451, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.Total),Invoice.InvoiceDate))", "score": -0.2563375697206225, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.27100475709195804, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2867600611003063, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.29062450414726787, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.29117109506747335, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.29855708656118407, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.BillingCity),Invoice.InvoiceDate))", "score": -0.3120526581367924, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.32347911561727805, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Customer.City))", "score": -0.3274961497728267, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 10, "beams": [{"orig_question": "Which city does our employee with fax number +1 (403) 262-3322 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))", "score": -0.09599465919018257, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))"}, {"orig_question": "Which city does our employee with fax number +1 (403) 262-3322 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.Phone))", "score": -0.28215850186825264, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))"}, {"orig_question": "Which city does our employee with fax number +1 (403) 262-3322 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.HireDate))", "score": -0.34488684726238716, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))"}, {"orig_question": "Which city does our employee with fax number +1 (403) 262-3322 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.Phone),Employee.City))", "score": -0.3698815670359181, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))"}, {"orig_question": "Which city does our employee with fax number +1 (403) 262-3322 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.HireDate),Employee.City))", "score": -0.40000527766824234, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))"}, {"orig_question": "Which city does our employee with fax number +1 (403) 262-3322 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.PostalCode))", "score": -0.44791252208233345, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))"}, {"orig_question": "Which city does our employee with fax number +1 (403) 262-3322 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,+1 (403) 262-3322), Employee.City),Employee.City))", "score": -0.5097648477676557, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))"}, {"orig_question": "Which city does our employee with fax number +1 (403) 262-3322 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.PostalCode),Employee.City))", "score": -0.5286892023432301, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))"}, {"orig_question": "Which city does our employee with fax number +1 (403) 262-3322 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.Phone),Employee.Phone))", "score": -0.5560454097139882, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))"}, {"orig_question": "Which city does our employee with fax number +1 (403) 262-3322 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.HireDate),Employee.Phone))", "score": -0.5861691203463124, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))"}, {"orig_question": "Which city does our employee with fax number +1 (403) 262-3322 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))", "score": -0.5867460961017059, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))"}, {"orig_question": "Which city does our employee with fax number +1 (403) 262-3322 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))", "score": -0.6141638434055494, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))"}, {"orig_question": "Which city does our employee with fax number +1 (403) 262-3322 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,+1 (403) 262-3322), Employee.City),Employee.City))", "score": -0.6173814809444593, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))"}, {"orig_question": "Which city does our employee with fax number +1 (403) 262-3322 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.Phone),Employee.HireDate))", "score": -0.6187737551081227, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))"}, {"orig_question": "Which city does our employee with fax number +1 (403) 262-3322 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3322), Employee.City),Employee.City))", "score": -0.6195969259861158, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 11, "beams": [{"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))", "score": -0.023669853469982627, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.Phone),Customer.City))", "score": -0.4391286630543618, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.City))", "score": -0.4735688228520303, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.Phone))", "score": -0.5313483817863016, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Employee.HireDate),Customer.City))", "score": -0.5653225142868905, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.Fax),Customer.City))", "score": -0.598609622231379, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))", "score": -0.6427456295477896, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Invoice.BillingCity),Customer.City))", "score": -0.6443683464440255, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.PostalCode),Customer.City))", "score": -0.6648107130440621, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.State))", "score": -0.6940169675635843, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.Company),Customer.City))", "score": -0.7106406052025704, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,+1 (520) 622-4200), Customer.City),Customer.City))", "score": -0.7245935356604605, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+1 (520) 622-4200), Customer.City),Customer.City))", "score": -0.734480038880065, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.PostalCode))", "score": -0.7375474913405924, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,+1 (520) 622-4200), Customer.City),Customer.City))", "score": -0.7441450512396841, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 12, "beams": [{"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))", "score": -0.0853919848373279, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,3,Raj Bhavan Road),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.14362023954133618, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,3,Raj Bhavan Road),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.16305148634597724, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,3,Raj Bhavan Road),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.17863462794290336, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))", "score": -0.2211088781270895, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3,Raj Bhavan Road),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2498071506178786, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,3,Raj Bhavan Road),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.25288973864833264, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,3,Raj Bhavan Road),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.26423402918380373, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,3,Raj Bhavan Road),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.27006390158627164, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,3,Raj Bhavan Road),merge(getData(InvoiceLine),getData(Track),Track.GenreId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2702531006760438, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,3,Raj Bhavan Road),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.2734168441546251, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,3,Raj Bhavan Road),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2784668918183139, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,3,Raj Bhavan Road),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2822994678048309, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,3,Raj Bhavan Road),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.28432214169543085, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,3,Raj Bhavan Road),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.30722258364085037, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 13, "beams": [{"orig_question": "Whats the total sum of invoices for tracks not produced by Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.10859489415301336, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks not produced by Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.11207611211530452, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks not produced by Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1463650717645189, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks not produced by Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.17273279842718545, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks not produced by Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.17922772957817049, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks not produced by Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19974145968273843, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks not produced by Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti), Invoice.InvoiceId),Invoice.Total)", "score": -0.20522149073988968, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks not produced by Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21351668922738487, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks not produced by Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.220935899672792, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks not produced by Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22138734393262688, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks not produced by Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23261231372491922, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks not produced by Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24491361241391332, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks not produced by Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2454815565235889, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks not produced by Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.260826648343106, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks not produced by Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.26690129122195366, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 14, "beams": [{"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))", "score": -0.012676380295488343, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6252071), Track.UnitPrice),Track.UnitPrice))", "score": -0.416300597321424, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,6252071), Track.UnitPrice),Track.UnitPrice))", "score": -0.5978982387578071, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6252071), Track.UnitPrice),Track.UnitPrice))", "score": -0.6072090591305823, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))", "score": -0.6925352470734651, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Email,=,6252071), Track.UnitPrice),Track.UnitPrice))", "score": -0.7204075394665779, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,6252071), Track.UnitPrice),Track.UnitPrice))", "score": -0.7666303454434455, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,6252071), Track.UnitPrice),Track.UnitPrice))", "score": -0.8115198551213325, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.TrackId),Track.UnitPrice)", "score": -0.8427574867283953, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,6252071), Track.UnitPrice),Track.UnitPrice))", "score": -0.8617345417851539, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Album.Title))", "score": -0.9079030731345483, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.Composer))", "score": -0.9459539034987756, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Bytes,>=,6252071), Track.TrackId),Track.UnitPrice)", "score": -0.9686506961574319, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.Bytes))", "score": -0.9687763431693384, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.Composer),Track.UnitPrice))", "score": -0.9824446243992497, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 15, "beams": [{"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.09326993875222701, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Jazz),getData(Track),Album.AlbumId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.17014869562504978, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Jazz),getData(Track),Genre.GenreId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.19112022236775975, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Name,!=,Jazz),Track.Bytes),Album.Title))", "score": -0.20982779179075736, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),Track.Bytes),Album.Title))", "score": -0.2246064654977092, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.25333266057307496, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Jazz),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.2679989792405825, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3068925582902813, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,!=,Jazz),Track.Bytes),Album.Title))", "score": -0.3168984031265313, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Album.Title,!=,Jazz),Track.Bytes),Album.Title))", "score": -0.3237870608673616, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Name,!=,Jazz),Track.Milliseconds),Album.Title))", "score": -0.3268894293128338, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Jazz),getData(Track),Album.AlbumId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.33021141744589777, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),Track.Milliseconds),Album.Title))", "score": -0.3416681030197857, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Genre.Name,!=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3491465387252517, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Jazz),getData(Track),Genre.GenreId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3511829441886077, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 16, "beams": [{"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))", "score": -0.1879414837419385, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,!=,Jay Kay), Track.Name),Track.Name))", "score": -0.2027372710863871, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,Jay Kay), Track.Name),Track.Name))", "score": -0.24339229192664713, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,!=,Jay Kay), Track.Name),Track.Name))", "score": -0.263595228439015, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,Jay Kay), Track.Name),Track.Name))", "score": -0.26469726436189805, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Album),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,!=,Jay Kay), Track.Name),Track.Name))", "score": -0.26999942600400456, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,Jay Kay), Track.Name),Track.Name))", "score": -0.2747585182933923, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Album),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,Jay Kay), Track.Name),Track.Name))", "score": -0.2811627158583819, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Composer,=,Jay Kay), Track.Name),Track.Name))", "score": -0.2937359229781199, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Composer,!=,Jay Kay), Track.Name),Album.Title))", "score": -0.2983310487221435, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,Jay Kay), Track.Name),Track.Name))", "score": -0.3085317103225685, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,!=,Jay Kay), Track.Name),Album.Title))", "score": -0.3131268360665921, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,!=,Jay Kay), Track.Name),Track.Name))", "score": -0.31347963368682946, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,!=,Jay Kay), Track.Name),Track.Name))", "score": -0.3185574876481239, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,Jay Kay), Track.Name),Track.Name))", "score": -0.3246428523397775, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 17, "beams": [{"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.024139859157122887, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.19636830574579645, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2956168143918678, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.29731953013385554, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.34996819508683624, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.36743630017159196, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3825913295296409, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingPostalCode,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4098035603596079, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.AlbumId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4148726578025718, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4168356383755663, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), Track.Milliseconds),InvoiceLine.UnitPrice)", "score": -0.4238287617509296, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.42869135918004625, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.4481347772002422, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.45073525551103616, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), Track.Composer),InvoiceLine.UnitPrice)", "score": -0.46198040129674633, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 18, "beams": [{"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Invoice.BillingAddress))", "score": -0.2466232193979706, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Bytes))", "score": -0.24744296049419023, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Bytes))", "score": -0.27212830379502173, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Bytes))", "score": -0.28415918511788424, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.28990711162383764, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.29126859161669577, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),Invoice.BillingAddress))", "score": -0.30062102315926287, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Invoice.BillingAddress))", "score": -0.30127933644187427, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),Track.Bytes))", "score": -0.3014407642554825, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(merge(getData(InvoiceLine),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Invoice.BillingAddress))", "score": -0.3031665529611443, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(merge(getData(InvoiceLine),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Bytes))", "score": -0.303986294057364, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Invoice.BillingAddress))", "score": -0.30656532654473295, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Playlist.Name))", "score": -0.30827930073095183, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Milliseconds))", "score": -0.3087305767025342, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Invoice.BillingAddress))", "score": -0.30876439919401616, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 19, "beams": [{"orig_question": "Which are the fax of the customers from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Customer.Fax))", "score": -0.07656805203077965, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Customer.Fax))"}, {"orig_question": "Which are the fax of the customers from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Canada), Customer.Fax),Customer.Fax))", "score": -0.19769040853498154, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Customer.Fax))"}, {"orig_question": "Which are the fax of the customers from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Canada), Customer.Fax),Customer.Fax))", "score": -0.4356568417024391, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Customer.Fax))"}, {"orig_question": "Which are the fax of the customers from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Album.Title))", "score": -0.4472268175777572, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Customer.Fax))"}, {"orig_question": "Which are the fax of the customers from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Email),Customer.Fax))", "score": -0.47373406761107617, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Customer.Fax))"}, {"orig_question": "Which are the fax of the customers from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,Canada), Customer.Fax),Customer.Fax))", "score": -0.5239426454973, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Customer.Fax))"}, {"orig_question": "Which are the fax of the customers from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Canada), Customer.Fax),Album.Title))", "score": -0.5683491740819591, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Customer.Fax))"}, {"orig_question": "Which are the fax of the customers from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Country,=,Canada), Customer.Fax),Customer.Fax))", "score": -0.5769276580285805, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Customer.Fax))"}, {"orig_question": "Which are the fax of the customers from Canada?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))", "score": -0.5850101283380678, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Customer.Fax))"}, {"orig_question": "Which are the fax of the customers from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Canada), Customer.Email),Customer.Fax))", "score": -0.5948564241152781, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Customer.Fax))"}, {"orig_question": "Which are the fax of the customers from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,Canada), Customer.Fax),Customer.Fax))", "score": -0.6500145754289406, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Customer.Fax))"}, {"orig_question": "Which are the fax of the customers from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.LastName),Customer.Fax))", "score": -0.664183186225273, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Customer.Fax))"}, {"orig_question": "Which are the fax of the customers from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Employee.Fax))", "score": -0.6823019039329665, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Customer.Fax))"}, {"orig_question": "Which are the fax of the customers from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.PostalCode),Customer.Fax))", "score": -0.691474901370384, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Customer.Fax))"}, {"orig_question": "Which are the fax of the customers from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Canada), Customer.Fax),Customer.Fax))", "score": -0.7178074678849953, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 20, "beams": [{"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.15332314614897435, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.2310658249602488, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Album.ArtistId),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.2430621503697615, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.25116261357347724, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.2811998460833522, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.29183966431070535, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.2959527640927675, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Album.ArtistId),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.3208048291810359, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.3367312357648234, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Album.ArtistId),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.34090162720831557, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes)", "score": -0.34613842104006176, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.35123986686011544, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),getData(Track),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.35911481316900595, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),getData(Track),Track.AlbumId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.370294479352113, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.376374519294345, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 21, "beams": [{"orig_question": "What is the average quantity of invoices of tracks with a unit price smaller or equal than 0.99 and in the genre \"Comedy\" ? ", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,Comedy), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.19985944805791817, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of invoices of tracks with a unit price smaller or equal than 0.99 and in the genre \"Comedy\" ? ", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,Comedy), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.21879870722272843, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of invoices of tracks with a unit price smaller or equal than 0.99 and in the genre \"Comedy\" ? ", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Composer,<=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,Comedy), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.22807671580900998, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of invoices of tracks with a unit price smaller or equal than 0.99 and in the genre \"Comedy\" ? ", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,<=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.23469341469879157, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of invoices of tracks with a unit price smaller or equal than 0.99 and in the genre \"Comedy\" ? ", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Composer,<,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,Comedy), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2681558587105337, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of invoices of tracks with a unit price smaller or equal than 0.99 and in the genre \"Comedy\" ? ", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,<,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.27477255760031527, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of invoices of tracks with a unit price smaller or equal than 0.99 and in the genre \"Comedy\" ? ", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2842054642026563, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of invoices of tracks with a unit price smaller or equal than 0.99 and in the genre \"Comedy\" ? ", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Genre),Genre.Name,<=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,Comedy), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2867418220677981, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of invoices of tracks with a unit price smaller or equal than 0.99 and in the genre \"Comedy\" ? ", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Composer,<=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,Comedy), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2880392456279175, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of invoices of tracks with a unit price smaller or equal than 0.99 and in the genre \"Comedy\" ? ", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,<=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,Comedy), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2946559445176991, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of invoices of tracks with a unit price smaller or equal than 0.99 and in the genre \"Comedy\" ? ", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,Comedy), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.30314472336746656, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of invoices of tracks with a unit price smaller or equal than 0.99 and in the genre \"Comedy\" ? ", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),InvoiceLine.Quantity,<=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,Comedy), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.31245464041972876, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of invoices of tracks with a unit price smaller or equal than 0.99 and in the genre \"Comedy\" ? ", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Milliseconds,<=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3215986159042256, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of invoices of tracks with a unit price smaller or equal than 0.99 and in the genre \"Comedy\" ? ", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Composer,<,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,Comedy), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.32811842084736337, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of invoices of tracks with a unit price smaller or equal than 0.99 and in the genre \"Comedy\" ? ", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,<,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.334735119737145, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 22, "beams": [{"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.09241381539868598, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.1879905479871811, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,=,None), Album.ArtistId),Artist.Name))", "score": -0.37893369344707456, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,=,None), Employee.LastName),Artist.Name))", "score": -0.3814461863063419, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Employee),Album.ArtistId,Artist.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.400739635723022, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,=,None), Album.ArtistId),Artist.Name))", "score": -0.40272738850580936, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Track.AlbumId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.4079616228651729, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.4080922786385565, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.41150663093533385, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.ArtistId,Artist.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.4140802954177749, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.4233723083438437, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,=,None), Employee.LastName),Artist.Name))", "score": -0.4314167133616138, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,=,None), Employee.PostalCode),Artist.Name))", "score": -0.443130700027382, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.ArtistId,Artist.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.44951733549197137, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,=,None), Employee.Phone),Artist.Name))", "score": -0.4639847546400675, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 23, "beams": [{"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.07353452072160702, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected MPEG-4 video file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.14719067481923426, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.14880595666872654, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.20127995354114075, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected MPEG-4 video file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2137748689568942, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.23382875120798952, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2394257208383224, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.26206309742814987, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2659952053390709, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2719745185051711, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.2755645695774486, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.28076127589964256, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.2888278054800609, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.30204927829332634, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.31970780504693713, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 24, "beams": [{"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.LastName,=,Johnson),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.10526260945580988, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Johnson),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.144839682699618, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.15382357950103104, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.1611734091212636, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2161296334745282, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.21725695939566883, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.2242640425322953, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.LastName,=,Johnson),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.22867246549395967, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.LastName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.2308277985249272, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Customer.SupportRepId),Employee.LastName,=,Johnson),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.23509157257642863, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,=,Johnson),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.25589637029869916, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.LastName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.2560993258637798, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.LastName,=,Johnson),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3043178571059808, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Johnson),getData(Track),Customer.CustomerId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3136326429687257, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Johnson),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.31728625062640553, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 25, "beams": [{"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(Track),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.18289578207006044, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.22369857010279173, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(Track),Genre.GenreId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.23463544173821496, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(Track),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.GenreId,Track.TrackId),Playlist.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.25133621851758714, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.2552295323662642, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(Track),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Genre.GenreId),Playlist.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.258430931290981, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.261424376158752, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.29900031613413736, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.3008365899449137, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(Track),Genre.GenreId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.GenreId,Track.TrackId),Playlist.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.3030758411797357, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.30362020233853165, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(Track),Genre.GenreId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Genre.GenreId),Playlist.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.3101705539531295, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.3184796393114015, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(Track),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.31975300315161526, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,PlaylistTrack.PlaylistId),Playlist.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.32850938953960424, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 26, "beams": [{"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Name),Track.Name))", "score": -0.13231835860762667, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Name),Album.Title))", "score": -0.21798666507930628, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Milliseconds),Track.Name))", "score": -0.2380014118978668, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),merge(getData(Track),getData(Album),Track.AlbumId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.Name),Track.Name))", "score": -0.3170633514747194, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Alternative & Punk),getData(Album),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.3198303434508029, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Alternative & Punk),getData(Album),Track.AlbumId,Album.AlbumId), Track.Milliseconds),Album.Title))", "score": -0.3227651883018873, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Milliseconds),Album.Title))", "score": -0.3236697183695464, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Alternative & Punk),getData(Album),Track.AlbumId,Album.AlbumId), Track.Name),Album.Title))", "score": -0.32622399487547077, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Track.Name))", "score": -0.32735257714597193, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId), Track.Name),Track.Name))", "score": -0.32857222174464573, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Composer),Track.Name))", "score": -0.3358882729785799, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Genre.Name),Track.Name))", "score": -0.344929501144097, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Alternative & Punk),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Name),Track.Name))", "score": -0.34777855076293407, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Alternative & Punk),getData(Album),Track.AlbumId,Album.AlbumId), Track.Bytes),Track.Name))", "score": -0.3612686841795335, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Alternative & Punk),getData(Track),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.36165145728514914, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 27, "beams": [{"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.013169554850173041, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -0.8343780303968323, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Customer.Phone))", "score": -0.8796054038532788, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.9070855884816986, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.9267256457070701, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -0.9461458440196326, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Employee.Phone))", "score": -0.9550197533662914, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Customer.Phone),Artist.Name))", "score": -0.9952142057919797, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Customer.LastName))", "score": -1.0562831996057915, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Album.Title),Artist.Name))", "score": -1.063006398914967, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Employee.LastName))", "score": -1.0808747786819763, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Genre.Name))", "score": -1.0902343604249967, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Genre), Artist.Name),Artist.Name))", "score": -1.105046607972884, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -1.1697263070348627, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -1.2472720099075343, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 28, "beams": [{"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.11555754573950953, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Bytes),Album.Title))", "score": -0.18125521409543488, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,Purchased AAC audio file),Track.Bytes),Album.Title))", "score": -0.1868736906943403, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name),Album.Title))", "score": -0.20527138011006688, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))", "score": -0.2893449618185684, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.2969878924188658, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Album.Title))", "score": -0.30678582541935007, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))", "score": -0.30679097291023655, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Track.Bytes),Album.Title))", "score": -0.3184565287666141, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))", "score": -0.3586277337420562, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,MediaType.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Bytes),Album.Title))", "score": -0.35901362622121635, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.36761479903008853, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),InvoiceLine.Quantity),Album.Title))", "score": -0.37868508493510317, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Track.Name),Album.Title))", "score": -0.39641963370972594, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.UnitPrice),Album.Title))", "score": -0.41149653315198853, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 29, "beams": [{"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aisha Duo),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.06701402371573963, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1256316892208497, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.16534907845305452, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Aisha Duo),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18536204026808006, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.18961762009382482, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20551942068789872, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2093520027740787, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aisha Duo),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21103110631160338, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aisha Duo),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21739682283246653, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aisha Duo),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.22902992030611657, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aisha Duo),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24042593563755196, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Aisha Duo),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24848449686754817, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Aisha Duo),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24865735015823515, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aisha Duo),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.255266606808639, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Aisha Duo),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2599469438998812, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 30, "beams": [{"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate,>=,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.17941288167243366, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.18091703120263045, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.19660656140610497, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.21945431346812763, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.22084190171764861, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.23078537121493786, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.24553519637699917, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2515979856376664, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>=,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2568661499937973, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2764059907253443, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>=,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.27713328705563517, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,>=,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2816223956561861, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2886978894579697, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2961283961558365, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.31128222143888706, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 31, "beams": [{"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.08398402824295992, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.15874358277060166, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.1958265847387124, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2033736937729292, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),getData(Track),Track.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.22931302539090892, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.23743214180855463, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,InvoiceLine.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.23917617076864175, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),getData(Album),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.27432500441117247, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),getData(Track),Track.AlbumId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2851920269921219, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),getData(Album),Track.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3078114572425608, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3085662108822363, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Genre.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.31720511679082114, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),getData(Album),Track.AlbumId,Album.AlbumId), Track.Name),Album.Title))", "score": -0.3286550819974526, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Composer),Album.Title))", "score": -0.34853808772837297, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),getData(Album),Track.AlbumId,Album.AlbumId), Track.Composer),Album.Title))", "score": -0.3627390330457316, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 32, "beams": [{"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),getData(Album),Track.AlbumId,MediaType.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.11899178006144273, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,!=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,MediaType.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.14221625012798042, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,!=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.1487243808450514, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.15300073324040198, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,MediaType.MediaTypeId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))", "score": -0.23557839994137222, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),getData(Album),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.2492265359383025, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),getData(Album),Track.MediaTypeId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.28323548911726176, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,!=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.29724604963138723, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,!=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.MediaTypeId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3037541803484582, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))", "score": -0.3136200601576117, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),getData(Album),Track.AlbumId,MediaType.MediaTypeId),Track.Milliseconds),Album.Title))", "score": -0.35355877616292336, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,!=,AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,MediaType.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.3689945712566154, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.37330538368288174, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3875677293418826, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,!=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,MediaType.MediaTypeId),Track.Milliseconds),Album.Title))", "score": -0.38862860680683115, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 33, "beams": [{"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,UB40),merge(getData(Album),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Customer.LastName))", "score": -0.33221192618293083, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,UB40),merge(getData(Album),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Customer.LastName))", "score": -0.34055831706163175, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,UB40),merge(getData(Album),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Customer.LastName))", "score": -0.3643136274677009, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,UB40),merge(getData(Album),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3679825086857787, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,UB40),merge(getData(Album),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3770627513556214, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,UB40),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Customer.LastName))", "score": -0.3782402475205002, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,UB40),merge(getData(Album),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Genre.Name))", "score": -0.3892681684680802, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,UB40),merge(getData(Track),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Customer.LastName))", "score": -0.3949719404135168, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,UB40),merge(getData(Album),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.40081806176169055, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,UB40),merge(getData(Album),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Genre.Name))", "score": -0.40861890783510324, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,UB40),merge(getData(Album),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Customer.Company))", "score": -0.41217378817912387, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,UB40),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.41401083002334804, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,UB40),merge(getData(Album),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Genre.Name),Customer.LastName))", "score": -0.4178178111795095, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,UB40),merge(getData(Track),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Customer.LastName))", "score": -0.4187272508195859, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,UB40),merge(getData(Album),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Customer.LastName))", "score": -0.41878490468403906, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 34, "beams": [{"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.0973227394010646, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.16276030516875484, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.17987373854472324, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.18734723803595477, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.22805425124518852, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.2315962029878743, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.23404005426415903, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111),getData(Track),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2518578633820556, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2537399162988585, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.2644716895487629, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111),getData(Genre),Track.GenreId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.26792885040357295, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2823343516772238, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111),getData(Track),Track.GenreId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.29173246254044005, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2937111679794131, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111),getData(Track),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3061379638140909, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 35, "beams": [{"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.05625162822434504, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Invoice.BillingCity),Customer.City))", "score": -0.22388539639541705, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.47291075241992075, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.48290310231277545, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.4880547811208089, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.5448711755616387, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.InvoiceDate))", "score": -0.5844242217881401, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.6157394553465565, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Invoice.InvoiceDate),Customer.City))", "score": -0.6405445205909928, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6491186608491262, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,2009-01-03 00:00:00), Invoice.BillingCity),Customer.City))", "score": -0.6505368704838475, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6525773395715078, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-01-03 00:00:00), Invoice.BillingCity),Customer.City))", "score": -0.6556885492918809, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Invoice.BillingCity),Customer.PostalCode))", "score": -0.6731512787682732, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.6958828809601982, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 36, "beams": [{"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.30063902096459294, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Fax))", "score": -0.32210739086871065, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.City))", "score": -0.4190213331015039, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Email))", "score": -0.48556738654715315, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))", "score": -0.5070357564512709, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.State))", "score": -0.548548019437838, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Email),Customer.Email))", "score": -0.5511898057775397, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.State),Customer.Email))", "score": -0.5670908292770038, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.State),Customer.Fax))", "score": -0.5885591991811215, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.City))", "score": -0.6039496986840641, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.State),Customer.City))", "score": -0.6854731414139148, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Address))", "score": -0.6867355437967563, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.PostalCode))", "score": -0.71198592033617, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Employee.Title))", "score": -0.7230001928915667, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.State))", "score": -0.7334763850203981, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 37, "beams": [{"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.10625584051582777, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.12595704751697187, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.14387754336014555, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1514198006213074, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.16521079097994512, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.16981601633617444, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.18686950579424055, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), None),None)", "score": -0.18981585161615, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1972712465474108, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.19786736891029683, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.2101299894095328, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.21602682508163593, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24731042094447792, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2481116501579703, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2512103577829169, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 38, "beams": [{"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))", "score": -0.03668489259579422, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))", "score": -0.6534780414078978, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.FirstName))", "score": -0.7415612158744364, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.LastName))", "score": -0.776332929114453, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Artist.ArtistId))", "score": -0.8283630907176984, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.LastName))", "score": -0.8439812051882533, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.LastName))", "score": -0.8840992470904538, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Employee.LastName))", "score": -0.8926404868774885, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.PostalCode))", "score": -0.9128106626312522, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Genre.GenreId))", "score": -0.9802845488193398, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.LastName))", "score": -0.9805951943719671, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Album.Title))", "score": -0.9810927894938202, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Employee.LastName),Customer.LastName))", "score": -1.0011200707850822, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Genre.Name))", "score": -1.029841354472424, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), MediaType.Name),Customer.LastName))", "score": -1.0309858978805442, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 39, "beams": [{"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.22504087483684998, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Employee.Country),Invoice.BillingCountry))", "score": -0.254585235772538, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingState),Invoice.BillingCountry))", "score": -0.3340351278166054, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3613901952485321, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,QC), Employee.Country),Invoice.BillingCountry))", "score": -0.39093455618422013, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.39452560937206727, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingState,=,QC), Employee.Country),Invoice.BillingCountry))", "score": -0.4240699703077553, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Employee.Country))", "score": -0.45718844181101304, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Customer.Country),Invoice.BillingCountry))", "score": -0.45972189253370743, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,QC), Invoice.BillingState),Invoice.BillingCountry))", "score": -0.4703844482282875, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Employee.Country),Employee.Country))", "score": -0.48673280274670105, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingState,=,QC), Invoice.BillingState),Invoice.BillingCountry))", "score": -0.5035198623518227, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingState))", "score": -0.5089844608883141, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Customer.Country))", "score": -0.5382554078678368, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Employee.Country),Invoice.BillingState))", "score": -0.5385288218240021, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 40, "beams": [{"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.1497331236187165, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.20482886328136374, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.28796379758750845, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Calle Lira, 198), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.3430595372501557, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCountry),Invoice.BillingCity))", "score": -0.4558004636946862, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.46880789405440737, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.47208352318739344, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Calle Lira, 198), Invoice.BillingCountry),Invoice.BillingCity))", "score": -0.5108962033573334, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.5239036337170546, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5271792628500407, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Employee.PostalCode))", "score": -0.5543323040637915, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Artist.Name))", "score": -0.5698271275196021, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Employee.City))", "score": -0.5698456049594824, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6070385680231993, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Calle Lira, 198), Invoice.BillingCity),Employee.PostalCode))", "score": -0.6094280437264388, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 41, "beams": [{"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))", "score": -0.020544976308883633, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.FirstName),Employee.Phone))", "score": -0.5236781843341305, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))", "score": -0.5467257358468487, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.City),Employee.Phone))", "score": -0.5592297919429257, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))", "score": -0.5797561861909344, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))", "score": -0.5848411180413677, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.FirstName))", "score": -0.6181868010535254, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))", "score": -0.6200834967530682, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))", "score": -0.6547430612481548, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Customer.Phone))", "score": -0.662431567288877, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.PostalCode),Employee.Phone))", "score": -0.6705474265254452, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Customer.Phone),Employee.Phone))", "score": -0.6860901125110104, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.City))", "score": -0.6962772303595557, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Artist.Name))", "score": -0.7086862021460547, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))", "score": -0.7444606878198101, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 42, "beams": [{"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.044891219356274166, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.24120978139062996, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Invoice.BillingPostalCode))", "score": -0.2607725175260374, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,>,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.3009555764884957, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.32152740809172303, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.LastName),Customer.PostalCode))", "score": -0.3223285903630174, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.341181025262082, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.3463064511538826, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Employee.PostalCode))", "score": -0.34759053659413747, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.LastName))", "score": -0.35987996239547076, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.36001903409681774, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,MediaType.MediaTypeId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.3644285306725354, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.Company),Customer.PostalCode))", "score": -0.3674503458509604, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,InvoiceLine.UnitPrice),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.37349781049547653, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Employee.PostalCode),Customer.PostalCode))", "score": -0.3812413770514121, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 43, "beams": [{"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,IT Staff),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.1619983192325464, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,IT Staff),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.17214374403878038, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,=,IT Staff),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.183612990505736, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,IT Staff),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.1949444965107745, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,IT Staff),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.20312530173595503, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,IT Staff),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2039949553150258, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,IT Staff),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.20811071933396452, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,IT Staff),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.21070734016366952, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,IT Staff),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.2258458178716019, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,IT Staff),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.22906424433043493, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,=,IT Staff),merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),None,None),None,None), None),None)", "score": -0.2311484209583046, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,=,IT Staff),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.24164574125912566, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,IT Staff),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.24439813885933456, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,=,IT Staff),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), None),None)", "score": -0.25375534527989946, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,IT Staff),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.266096744280907, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 44, "beams": [{"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.06389869422552043, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.19299081867972087, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),Track.Milliseconds)", "score": -0.25218763875554445, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3374104479977186, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)", "score": -0.3801021826446515, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(InvoiceLine),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.40587446287927537, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.4187254289331821, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)", "score": -0.4212575471100501, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Playlist.Name,=,On-The-Go 1),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.44921018062656015, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.45623769102406525, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,Employee.Country),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.468224575998106, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Employee.EmployeeId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.4765512462933731, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), Track.Milliseconds),Track.Milliseconds)", "score": -0.48068134014435376, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.4825272593780009, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(Invoice),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.4931191477729687, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 45, "beams": [{"orig_question": "What is the summed length of the different tracks sold by the employees who support customers with the email address michael@chinookcorp.com?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Email,=,michael@chinookcorp.com),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.15147965927744048, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the summed length of the different tracks sold by the employees who support customers with the email address michael@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.15622146726676325, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the summed length of the different tracks sold by the employees who support customers with the email address michael@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.178818672153913, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the summed length of the different tracks sold by the employees who support customers with the email address michael@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,michael@chinookcorp.com),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.18565812135433157, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the summed length of the different tracks sold by the employees who support customers with the email address michael@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,michael@chinookcorp.com),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.18919732052349764, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the summed length of the different tracks sold by the employees who support customers with the email address michael@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.2010111787797546, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the summed length of the different tracks sold by the employees who support customers with the email address michael@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,michael@chinookcorp.com),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.20389236552071557, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the summed length of the different tracks sold by the employees who support customers with the email address michael@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.21806880494668324, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the summed length of the different tracks sold by the employees who support customers with the email address michael@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.22532253890143933, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the summed length of the different tracks sold by the employees who support customers with the email address michael@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.22671963130118755, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the summed length of the different tracks sold by the employees who support customers with the email address michael@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.23688101213772467, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the summed length of the different tracks sold by the employees who support customers with the email address michael@chinookcorp.com?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Email,=,michael@chinookcorp.com),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2400050323701422, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the summed length of the different tracks sold by the employees who support customers with the email address michael@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.2528987853534997, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the summed length of the different tracks sold by the employees who support customers with the email address michael@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,michael@chinookcorp.com),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2585477532443098, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the summed length of the different tracks sold by the employees who support customers with the email address michael@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,michael@chinookcorp.com),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.2646050510186228, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 46, "beams": [{"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))", "score": -0.06669143362159957, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.LastName))", "score": -0.2136739767920517, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.LastName),Employee.FirstName))", "score": -0.32928375488336314, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.LastName),Employee.LastName))", "score": -0.47626629805381526, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))", "score": -0.4917648397178749, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T5K 2N1), Employee.LastName),Employee.FirstName))", "score": -0.5503385433583793, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Composer,=,T5K 2N1), Employee.FirstName),Employee.FirstName))", "score": -0.5637746100146614, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.LastName))", "score": -0.5918605207328, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.Email))", "score": -0.6042897529732727, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.Country))", "score": -0.6184508628975891, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Email),Employee.FirstName))", "score": -0.6228544819932722, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Playlist.Name),Employee.FirstName))", "score": -0.6302787769418501, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T5K 2N1), Employee.LastName),Employee.LastName))", "score": -0.6504342243733043, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Country),Employee.FirstName))", "score": -0.6541929948907637, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Customer.FirstName))", "score": -0.6931595630776428, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 47, "beams": [{"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Edmonton), Employee.PostalCode),Employee.PostalCode))", "score": -0.2523132887235988, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Edmonton), Employee.PostalCode),Track.Composer))", "score": -0.25893989471114764, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Edmonton), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.32084086803115497, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Edmonton), Invoice.BillingPostalCode),Track.Composer))", "score": -0.3274674740187038, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,Edmonton), Employee.PostalCode),Employee.PostalCode))", "score": -0.41290149730957637, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,Edmonton), Employee.PostalCode),Track.Composer))", "score": -0.4195281032971252, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Edmonton), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.45278249201692233, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Edmonton), Track.Composer),Employee.PostalCode))", "score": -0.4734340038648952, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Edmonton), Track.Composer),Track.Composer))", "score": -0.48006060985244403, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,Edmonton), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.4814290766171325, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,=,Edmonton), Employee.PostalCode),Employee.PostalCode))", "score": -0.48374263276673446, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,Edmonton), Invoice.BillingPostalCode),Track.Composer))", "score": -0.48805568260468135, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,=,Edmonton), Employee.PostalCode),Track.Composer))", "score": -0.4903692387542833, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Edmonton), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5213100713244785, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,=,Edmonton), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.5522702120742906, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 48, "beams": [{"orig_question": "How many genres are there with a media type MPEG audio file?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,MPEG audio file), Genre.Name),Genre.Name))", "score": -0.2250357551898964, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,MPEG audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there with a media type MPEG audio file?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),PlaylistTrack.TrackId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.23720720580852042, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,MPEG audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there with a media type MPEG audio file?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),Album.AlbumId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.245904992529591, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,MPEG audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there with a media type MPEG audio file?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),InvoiceLine.TrackId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.24823950002283446, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,MPEG audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there with a media type MPEG audio file?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),Track.GenreId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2555088436700968, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,MPEG audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there with a media type MPEG audio file?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),PlaylistTrack.TrackId,InvoiceLine.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.26787733388544765, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,MPEG audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there with a media type MPEG audio file?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),Track.GenreId,InvoiceLine.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.27477718166416965, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,MPEG audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there with a media type MPEG audio file?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.27530842558552704, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,MPEG audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there with a media type MPEG audio file?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),Album.AlbumId,InvoiceLine.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.27657512060651823, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,MPEG audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there with a media type MPEG audio file?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Track),Album.AlbumId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2770802469205493, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,MPEG audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there with a media type MPEG audio file?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Track),Track.GenreId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2777215994157715, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,MPEG audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there with a media type MPEG audio file?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.27890962809976166, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,MPEG audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there with a media type MPEG audio file?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),Track.GenreId,InvoiceLine.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.28617897174702406, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,MPEG audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there with a media type MPEG audio file?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),PlaylistTrack.TrackId,InvoiceLine.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.29243500342174944, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,MPEG audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there with a media type MPEG audio file?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3000333889047338, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,MPEG audio file), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 49, "beams": [{"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.13792794563098038, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.14547885279576808, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.17289304755078486, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.18952061726895608, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceDate,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2069098745445595, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceDate,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2575142516792242, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.26745043633104754, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceDate,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.26897103513541953, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.27823038709397657, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Smith, Toby),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.28161678341338103, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.28558493846053906, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.28839345956843576, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Smith, Toby),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2969517706050106, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Artist),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2995416387476329, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3163302340818967, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 50, "beams": [{"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,8624492), Artist.Name),Artist.Name))", "score": -0.3068698972638231, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,!=,8624492), Artist.Name),Artist.Name))", "score": -0.38216571385903086, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,!=,8624492), Artist.Name),Artist.Name))", "score": -0.3880691080794691, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Bark at the Moon (Remastered)), Artist.Name),Employee.LastName))", "score": -0.388611222821055, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Album.Title,=,Bark at the Moon (Remastered)), Artist.Name),Artist.Name))", "score": -0.38952294291811995, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,!=,Bark at the Moon (Remastered)), Artist.Name),Employee.LastName))", "score": -0.40259965840849776, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,!=,Bark at the Moon (Remastered)), Artist.Name),Artist.Name))", "score": -0.40394188059865416, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,!=,8624492), Artist.Name),Employee.LastName))", "score": -0.408503052628936, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,!=,8624492), Artist.Name),Artist.Name))", "score": -0.4098452748190924, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,!=,8624492), Artist.Name),Artist.Name))", "score": -0.41653103206876285, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,!=,Bark at the Moon (Remastered)), Artist.Name),Artist.Name))", "score": -0.4224344262892011, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,!=,8624492), Artist.Name),Employee.LastName))", "score": -0.42437582514812106, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,!=,8624492), Artist.Name),Employee.LastName))", "score": -0.43027921936855934, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,!=,8624492), Artist.Name),Employee.LastName))", "score": -0.43696497661822975, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,8624492), Genre.Name),Artist.Name))", "score": -0.4369851157243829, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 51, "beams": [{"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))", "score": -0.02902539647402591, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,358761786), Track.Name),Track.Name))", "score": -0.2511812766570074, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,358761786), Track.Name),Track.Name))", "score": -0.47992369826170034, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,358761786), Track.Name),Track.Name))", "score": -0.5262241681593878, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,358761786), Track.Name),Track.Name))", "score": -0.7020795784446818, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,358761786), Track.Name),Track.Name))", "score": -0.7237220435890777, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.Total,<=,358761786), Track.Name),Track.Name))", "score": -0.7300351887497527, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,null,358761786), Track.Name),Track.Name))", "score": -0.7407974918860418, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Milliseconds),Track.Name))", "score": -0.8383105427164992, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.BirthDate,<=,358761786), Track.Name),Track.Name))", "score": -0.8537260919365508, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Email,<=,358761786), Track.Name),Track.Name))", "score": -0.8575686841759307, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Employee.Email),Track.Name))", "score": -0.8936927944560011, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,358761786), Track.Name),Track.Name))", "score": -0.9458779237720591, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,<=,358761786), Track.Name),Track.Name))", "score": -0.950702670172177, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.Total,>=,358761786), Track.Name),Track.Name))", "score": -0.9521910689327342, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 52, "beams": [{"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps),Track.Bytes),Track.Name))", "score": -0.15833192075511995, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Milliseconds))", "score": -0.184451234257447, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))", "score": -0.1902316831846392, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))", "score": -0.22502105456061186, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.23080150348780407, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))", "score": -0.2788950996072793, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.28734137120144077, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.2896904187760278, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Milliseconds))", "score": -0.2951254377256455, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))", "score": -0.31888008926135075, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))", "score": -0.3212291368359378, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.3230832470273832, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps),Track.Bytes),Track.Milliseconds))", "score": -0.32813404224977555, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps),Track.UnitPrice),Track.Name))", "score": -0.33913169963756157, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))", "score": -0.33931358514574944, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 53, "beams": [{"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.15318188426888507, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.17492983751138352, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,Toronto),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.19846578754605446, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.20069438135588008, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.2080450070558079, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,Toronto),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.20993493344254216, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingState,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.22033026210662873, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,Toronto),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2317345167122367, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.23772343032388205, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,Toronto),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.24352405873766775, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.24857706063697066, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,Toronto),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.255669503348599, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.25958026733777245, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.262648370702, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingState,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.27515764427329154, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 54, "beams": [{"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))", "score": -0.025930059575330233, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.InvoiceDate))", "score": -0.31492044354308746, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,AB), Invoice.Total),Invoice.Total))", "score": -0.5978312936749717, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.InvoiceDate),Invoice.Total))", "score": -0.6597992416609486, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>,AB), Invoice.Total),Invoice.Total))", "score": -0.6692809310879966, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,<=,AB), Invoice.Total),Invoice.Total))", "score": -0.6738124338116904, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.Total),Invoice.Total))", "score": -0.7146816101994773, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Track.Bytes))", "score": -0.736504453667294, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Employee.BirthDate))", "score": -0.7562747778974881, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Track.UnitPrice))", "score": -0.7900072517477383, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))", "score": -0.8057222914940212, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,null,AB), Invoice.Total),Invoice.Total))", "score": -0.8217665997472068, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),InvoiceLine.Quantity))", "score": -0.8229537787519803, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.BillingState))", "score": -0.8366280975424161, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Customer.City))", "score": -0.8632842483602872, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 55, "beams": [{"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))", "score": -0.08213431649928621, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,<,8606887), Artist.Name),Artist.Name))", "score": -0.10707220007804602, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,<=,8606887), Artist.Name),Artist.Name))", "score": -0.19073855429859124, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,!=,8606887), Artist.Name),Artist.Name))", "score": -0.1911626074648319, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,=,8606887), Artist.Name),Artist.Name))", "score": -0.29009291754739763, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,>=,8606887), Artist.Name),Artist.Name))", "score": -0.30495595444328305, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.TrackId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))", "score": -0.39966151385893006, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,null,8606887), Artist.Name),Artist.Name))", "score": -0.4080057824368031, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,8606887), Artist.Name),Track.UnitPrice)", "score": -0.4116820816353214, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>=,8606887),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.41444517552989024, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,8606887),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.4181310888890375, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8606887), Artist.Name),Artist.Name))", "score": -0.42311057525306434, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.TrackId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,<,8606887), Artist.Name),Artist.Name))", "score": -0.4245993884389645, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,8606887), Artist.Name),Artist.Name))", "score": -0.4438664551797935, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,8606887), Artist.Name),Track.UnitPrice)", "score": -0.4904812477743631, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 56, "beams": [{"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.07325038769977255, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Customer.City))", "score": -0.15047237733142538, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Artist.Name))", "score": -0.5156469837738769, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Employee.City))", "score": -0.5170836941315429, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Employee.HireDate))", "score": -0.5176598922325866, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.InvoiceDate))", "score": -0.5644411937309997, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.5712722555244909, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Album.ArtistId))", "score": -0.5743889705254333, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,>=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6351843873480902, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Customer.City))", "score": -0.6484942451561437, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,>=,4, Rue Milton), Invoice.BillingCity),Customer.City))", "score": -0.7124063769797431, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Track.UnitPrice))", "score": -0.7310244933678405, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.736529941342269, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Employee.PostalCode))", "score": -0.7400421396805541, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Customer.Phone))", "score": -0.7473856703354613, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 57, "beams": [{"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.004912258008705085, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.6643009259204197, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Album.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.7463324072183734, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Album.Title,Album.AlbumId), Album.Title),Album.Title))", "score": -0.7870670287938341, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Track.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.8064005150626167, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.8231638374518147, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Album),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.8246410604474603, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.8884319963605704, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Album.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.9059079501613825, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Track),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.9065701387424786, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Album),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Album.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.9066726148427525, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.9187132513258736, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Album.Title,Track.AlbumId), Album.Title),Album.Title))", "score": -0.929166609041137, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.9532219110727804, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Album.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -1.0359660237823483, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 58, "beams": [{"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.13212620884363177, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.13312602936405785, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.17407901312418672, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)", "score": -0.17921738811337223, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T2P 5M5),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.20702853358022755, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,T2P 5M5),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.2140799917796369, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Artist.Name,=,T2P 5M5),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.21608461908440735, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.2242379482101383, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T2P 5M5),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2400334023347161, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T2P 5M5),merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), None),None)", "score": -0.2498313140714666, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T2P 5M5),merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), None),None)", "score": -0.2516358548991327, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.26210701772021516, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T2P 5M5),merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Invoice.CustomerId), None),None)", "score": -0.2626423572745631, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T2P 5M5),merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId), None),None)", "score": -0.26431351410385345, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T2P 5M5),merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Invoice.CustomerId), None),None)", "score": -0.2644468981022292, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 59, "beams": [{"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Artist),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.24862370124440647, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Artist),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.2531630326759674, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Artist),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.2745006906968903, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Artist),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.27904002212845125, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.3042869435338995, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.30882627496546045, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(MediaType),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.31498057912296906, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.3187537245627406, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Artist),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.3190039806789844, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(MediaType),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.31951991055453, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.3225935103721421, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.3233995664658251, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Artist),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.3235433121105454, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.33016394350797, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.33470322953057824, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 60, "beams": [{"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Fax,!=,IT Manager),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.13830145620640927, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Title,!=,IT Manager),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.15238101207215152, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Track.UnitPrice,!=,IT Manager),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.158924517670613, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,!=,IT Manager),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.16344202506755673, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,!=,IT Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.19932216211072404, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,IT Manager),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.2169703171423602, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Track.UnitPrice,!=,IT Manager),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), None),None)", "score": -0.21754110317507777, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Track.AlbumId,!=,IT Manager),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.2299228963274845, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Title,!=,IT Manager),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), None),None)", "score": -0.2404256476131889, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,!=,IT Manager),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.25276704942492223, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Track.UnitPrice,!=,IT Manager),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.282614144241261, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Fax,!=,IT Manager),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.28398955808899107, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Title,!=,IT Manager),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.2980691139547333, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Track.UnitPrice,!=,IT Manager),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.3046126195531948, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,!=,IT Manager),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.30913012695013853, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 61, "beams": [{"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Composer,!=,Bicycle Race),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.16088098140377477, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,!=,Bicycle Race),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.16502546316336852, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.19060216989623224, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,!=,Bicycle Race),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.19784498917039187, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,!=,Bicycle Race),getData(Track),Album.AlbumId,Track.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2663542293741924, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Bicycle Race),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.27915021075396157, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.Name,!=,Bicycle Race),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2939819359781022, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Playlist.Name,!=,Bicycle Race),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3115721852725548, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.32915048986929724, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Track.Name,!=,Bicycle Race),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.32926536504991605, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,!=,Bicycle Race),getData(Track),Album.ArtistId,Track.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3463535553842603, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,!=,Bicycle Race),getData(Album),Track.AlbumId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.34774063983293485, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Track.Name,!=,Bicycle Race),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3687531230974818, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,!=,Bicycle Race), Track.Composer),Artist.Name))", "score": -0.37061094752683904, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,!=,Bicycle Race),getData(Album),Artist.ArtistId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.37234995710494173, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 62, "beams": [{"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))", "score": -0.07667284399030905, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Canada), Employee.State),Employee.State))", "score": -0.15907829940078955, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,Canada), Employee.State),Employee.State))", "score": -0.4323259586071799, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Country),Employee.State))", "score": -0.524570509658588, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Playlist.Name,=,Canada), Employee.State),Employee.State))", "score": -0.5840515488362144, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Canada), Employee.Country),Employee.State))", "score": -0.6069759650690685, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Invoice.BillingState),Employee.State))", "score": -0.6361548154218326, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.Country))", "score": -0.6550547716742585, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingAddress,=,Canada), Employee.State),Employee.State))", "score": -0.6619008177494834, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Canada), Employee.State),Employee.State))", "score": -0.6624720686650107, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,Canada), Employee.State),Employee.State))", "score": -0.6638227695202659, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.HireDate))", "score": -0.6717469928389619, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingState,=,Canada), Employee.State),Employee.State))", "score": -0.6825389260029624, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.City),Employee.State))", "score": -0.6894767134053836, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Canada), Invoice.BillingState),Employee.State))", "score": -0.7185602554654906, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 63, "beams": [{"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.03826668464580507, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Customer.Country))", "score": -0.3149389398936364, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingState))", "score": -0.36606089004317255, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Employee.Country))", "score": -0.40529219039717646, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Customer.Address))", "score": -0.5961226595286462, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingState),Invoice.BillingCountry))", "score": -0.6198826022632602, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6363502948265705, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6366988168051648, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingAddress))", "score": -0.6447556985262963, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingAddress),Invoice.BillingCountry))", "score": -0.6545318551548007, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.700175425289217, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.7079155652504596, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Employee.State))", "score": -0.7164744509104821, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Customer.FirstName))", "score": -0.7345061076525781, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Customer.Country),Invoice.BillingCountry))", "score": -0.757436532545853, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 64, "beams": [{"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.039249348894553615, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))", "score": -0.18628205683290547, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))", "score": -0.20098792446544683, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Name))", "score": -0.3035076483626722, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Name))", "score": -0.31028965042368084, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))", "score": -0.3658814877065067, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.3755427249759082, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.Bytes),Track.Name))", "score": -0.40271901549676986, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),Track.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.41303733635224976, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Bytes),Track.Name))", "score": -0.4148537540216624, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Bytes))", "score": -0.41617906247540937, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(Playlist),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.42577133869988915, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Milliseconds),Track.Name))", "score": -0.45808972982504975, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),Track.Name))", "score": -0.46199410233310695, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.4768163765358606, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 65, "beams": [{"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.11620185055634473, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Composer),Album.Title))", "score": -0.14699410440717653, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.16454801824916435, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Album),Track.AlbumId,Album.AlbumId), Genre.Name),Album.Title))", "score": -0.19486794898556084, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Name),Album.Title))", "score": -0.23494608913292347, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Album.Title))", "score": -0.2425629558504982, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Album),Track.AlbumId,Album.AlbumId), Track.Composer),Album.Title))", "score": -0.26694005081464867, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.26737887407341177, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Album),Track.AlbumId,Genre.GenreId), Genre.Name),Album.Title))", "score": -0.2757352665647761, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Genre.GenreId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.30095989328630257, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(Genre),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.30223342026464683, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Album),Track.AlbumId,Album.AlbumId), Track.Name),Album.Title))", "score": -0.30765440006156025, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.3119076629378562, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.3234225522464486, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(Genre),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Composer),Album.Title))", "score": -0.3330256741154786, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 66, "beams": [{"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.14425812507557187, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Genre.Name,!=,Soundtrack),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.1528858438121618, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.17682512471378542, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Genre.Name,!=,Soundtrack),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.18545284345037533, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.23467200158176463, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Genre.Name,!=,Soundtrack),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.24329972031835453, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2672390012199781, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Genre.Name,!=,Soundtrack),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2758667199565681, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2835525230020427, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Genre.Name,!=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.29218024173863266, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3161195226402563, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Soundtrack), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.32252782534993596, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingAddress))", "score": -0.3241269512063728, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Genre.Name,!=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.32474728512449574, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Genre.Name,!=,Soundtrack),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingAddress))", "score": -0.33275466994296277, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 67, "beams": [{"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,New York), Invoice.InvoiceDate),Track.Composer))", "score": -0.23787336286886784, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,New York), Invoice.InvoiceDate),Invoice.BillingPostalCode))", "score": -0.25114409860952946, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,New York), Invoice.BillingPostalCode),Track.Composer))", "score": -0.3330628746448383, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,New York), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3463336103854999, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,New York), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.36930385467394444, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,New York), Invoice.BillingCity),Track.Composer))", "score": -0.3806668990550861, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,New York), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.3939376347957477, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,New York), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.39414733883722874, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,New York), Invoice.BillingAddress),Track.Composer))", "score": -0.4472720497547016, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,New York), Invoice.BillingAddress),Invoice.BillingPostalCode))", "score": -0.4605427854953632, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,New York), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.4644933664499149, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,New York), Invoice.BillingPostalCode),Invoice.InvoiceDate))", "score": -0.4893368506131992, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,New York), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5120973908601627, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,New York), Invoice.InvoiceDate),Employee.PostalCode))", "score": -0.5198116028009281, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,New York), Invoice.BillingCity),Invoice.InvoiceDate))", "score": -0.536940875023447, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 68, "beams": [{"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(merge(merge(getData(Track),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.1583125375276951, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.17184493866888587, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.18868347418140832, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.1973912931518832, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.19969422715900279, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.20958093914644293, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21906299053148875, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.22499943654362553, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2435762303605861, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24691227902160567, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(merge(merge(getData(Track),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24733915338948542, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24962331775511704, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2635833124082497, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2668044751269097, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2707092781191905, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 69, "beams": [{"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,BC), Employee.Email),Employee.Email))", "score": -0.1647590148713789, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,BC), Employee.Email),Employee.Email))", "score": -0.2877014625337324, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,BC), Employee.Email),Employee.Email))", "score": -0.298462067868968, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,!=,BC), Employee.Email),Employee.Email))", "score": -0.30080697419907665, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,BC), Employee.BirthDate),Employee.Email))", "score": -0.3686946343150339, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,BC), Employee.BirthDate),Employee.Email))", "score": -0.4916370819773874, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,BC), Employee.BirthDate),Employee.Email))", "score": -0.502397687312623, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,!=,BC), Employee.BirthDate),Employee.Email))", "score": -0.5047425936427317, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,BC), Track.Bytes),Employee.Email))", "score": -0.5129964660372934, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,BC), Employee.Email),Employee.BirthDate))", "score": -0.5133899144348106, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,BC), Employee.Email),Employee.Title))", "score": -0.5495918683227501, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,BC), Employee.Email),Employee.Email))", "score": -0.5519992012050352, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,BC), Employee.Address),Employee.Email))", "score": -0.591208608027955, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,BC), Employee.Email),Employee.Email))", "score": -0.6038992303874693, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,BC), Employee.Email),Employee.Email))", "score": -0.6049919697907171, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 70, "beams": [{"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -0.05804276149086756, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -0.5912890519762596, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.Company))", "score": -0.8764403991102139, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "sum(distinct(getData(Customer), Customer.City),Invoice.CustomerId)", "score": -0.8852595108062384, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.Phone))", "score": -0.9549122951481946, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.PostalCode))", "score": -0.9875876230371129, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -1.0255576361032657, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Invoice.BillingCity),Customer.City))", "score": -1.0400578335114545, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Invoice.BillingCity))", "score": -1.0497812613728252, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "sum(distinct(getData(Customer), Customer.City),Customer.City)", "score": -1.0583269138010332, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "sum(distinct(getData(Customer), Customer.City),Customer.Company)", "score": -1.0954579952181391, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.State),Customer.City))", "score": -1.1076194277860187, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.City))", "score": -1.1196637769501885, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.State))", "score": -1.127732829779872, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.City))", "score": -1.1441599902581792, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 71, "beams": [{"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Track.GenreId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.12460774226303357, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.17032013270171428, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2015080994243203, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Science Fiction), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2225401005032722, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Track.GenreId), Invoice.InvoiceId),Invoice.Total)", "score": -0.26995915225193723, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2801956022868669, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Track.GenreId), Invoice.BillingAddress),Invoice.Total)", "score": -0.30004004373545207, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3030789968208697, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.31226729350614363, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Invoice.InvoiceId),Invoice.Total)", "score": -0.315671542690618, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)", "score": -0.3198063126929777, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Invoice.BillingAddress),Invoice.Total)", "score": -0.3457524341741328, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), Invoice.InvoiceId),Invoice.Total)", "score": -0.34685950941322397, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.34879138725955044, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.354273725054175, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 72, "beams": [{"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Bytes)", "score": -0.1002846326528243, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Bytes)", "score": -0.1696361795229106, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Album.AlbumId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Bytes)", "score": -0.2025917775118993, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),merge(merge(merge(getData(Customer),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Bytes)", "score": -0.21949500129640862, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Track.UnitPrice), Track.TrackId),Track.Bytes)", "score": -0.2435026216927748, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Customer.SupportRepId), Track.TrackId),Track.Bytes)", "score": -0.24401879343602886, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),merge(merge(merge(getData(Customer),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Album.AlbumId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Bytes)", "score": -0.2524505992853973, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.2553660375494668, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,Track.AlbumId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Bytes)", "score": -0.2586198668116939, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)", "score": -0.2734385135751599, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Bytes)", "score": -0.29028312770386744, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Bytes)", "score": -0.2915754842049986, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Customer.SupportRepId), Track.TrackId),Track.Bytes)", "score": -0.3164928985549631, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.3176718536020152, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ton Koopman),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.31949864825038327, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 73, "beams": [{"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,11774865), Track.UnitPrice),Track.Name))", "score": -0.26032320843654233, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,11774865), Track.UnitPrice),Track.Name))", "score": -0.29309748269133706, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,11774865), Track.UnitPrice),Track.Name))", "score": -0.30223611037735887, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,11774865), Track.UnitPrice),Track.Bytes))", "score": -0.3201847719980541, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,!=,11774865), Track.UnitPrice),Track.Name))", "score": -0.33341191865019937, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,11774865), Track.UnitPrice),Track.Name))", "score": -0.35088753477090173, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Album.ArtistId),Track.Composer,!=,11774865), Track.UnitPrice),Track.Name))", "score": -0.3615467725245213, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,11774865), Track.UnitPrice),Track.Bytes))", "score": -0.3620976739388707, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Track.Composer,!=,11774865), Track.UnitPrice),Track.Name))", "score": -0.376967449080325, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,11774865), Track.UnitPrice),Track.Name))", "score": -0.3928004367117183, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,!=,11774865), Track.UnitPrice),Track.Name))", "score": -0.3949937068484637, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Album.ArtistId),Track.Composer,!=,11774865), Track.UnitPrice),Track.Name))", "score": -0.4034596744653378, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,11774865), Track.UnitPrice),Track.Bytes))", "score": -0.4107490983324136, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Track.Composer,!=,11774865), Track.UnitPrice),Track.Name))", "score": -0.41888031128830794, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Album.ArtistId),Track.Composer,!=,11774865), Track.UnitPrice),Track.Bytes))", "score": -0.42140833608603306, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 74, "beams": [{"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))", "score": -0.10138607453154691, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Invoice.BillingCountry))", "score": -0.3119614912156976, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Bernard), Customer.Country),Customer.Country))", "score": -0.31884647588776716, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Address),Customer.Country))", "score": -0.41144301984058984, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Invoice.BillingCountry),Customer.Country))", "score": -0.42884161565052636, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Invoice.BillingState))", "score": -0.4504841757898248, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Company),Customer.Country))", "score": -0.5104069063399947, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Address))", "score": -0.5286327792291559, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Bernard), Customer.Country),Invoice.BillingCountry))", "score": -0.5294218925719179, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,=,Bernard), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5403310293575345, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.LastName,=,Bernard), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5435704907538624, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,=,Bernard), Customer.Country),Invoice.BillingCountry))", "score": -0.5459454764440226, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Company))", "score": -0.5464929236059106, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.LastName,=,Bernard), Customer.Country),Invoice.BillingCountry))", "score": -0.5491849732814843, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Invoice.BillingState),Customer.Country))", "score": -0.5551772961352981, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 75, "beams": [{"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.1346365519571009, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.17188021622177985, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.24027637101289656, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2775200352775755, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4812294588195982, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5184731230842772, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,S\u00e3o Paulo), Invoice.BillingCountry),Customer.Country))", "score": -0.5612513091186884, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5710482083964052, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,S\u00e3o Paulo), Invoice.BillingCountry),Customer.Country))", "score": -0.5984949733833673, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6030129835712614, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6402566478359404, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,S\u00e3o Paulo), Invoice.BillingCountry),Customer.Country))", "score": -0.666891128174484, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,>,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6766880274522009, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Customer.Country))", "score": -0.704134792439163, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,S\u00e3o Paulo), Invoice.BillingCountry),Employee.Country))", "score": -0.714056101046026, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 76, "beams": [{"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,!=,0.99), Track.UnitPrice),Album.Title))", "score": -0.16422439035159186, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Track.UnitPrice,!=,0.99), Track.UnitPrice),Album.Title))", "score": -0.365296775886236, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99), Track.UnitPrice),Album.Title))", "score": -0.3712793908237728, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,!=,0.99), Track.Name),Album.Title))", "score": -0.37479770597201423, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99), Track.UnitPrice),Album.Title))", "score": -0.45175075119558883, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99),Track.UnitPrice),Album.Title))", "score": -0.4590151113038378, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99), Track.Name),Album.Title))", "score": -0.477503565990497, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99), Track.Bytes),Album.Title))", "score": -0.5179254372805009, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Track.UnitPrice,!=,0.99), Track.UnitPrice),Album.Title))", "score": -0.5181207691868233, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,!=,0.99), Track.Bytes),Album.Title))", "score": -0.5296196978924854, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,!=,0.99), Album.Title),Album.Title))", "score": -0.5322422426579578, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.TrackId),Track.UnitPrice,!=,0.99), Track.UnitPrice),Album.Title))", "score": -0.5396408382934124, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99), Track.Name),Album.Title))", "score": -0.5579749174328086, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Track.UnitPrice,!=,0.99), Track.Name),Album.Title))", "score": -0.5758700915066584, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Track.AlbumId),Track.UnitPrice,!=,0.99), Track.UnitPrice),Album.Title))", "score": -0.5814287659014608, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 77, "beams": [{"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))", "score": -0.0850918917931267, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Title),Employee.Fax))", "score": -0.2510595872081467, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Title))", "score": -0.30236893808614695, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Title),Employee.Title))", "score": -0.46833663350116694, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Track.UnitPrice),Employee.Fax))", "score": -0.47978525897633517, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Customer.Fax),Employee.Fax))", "score": -0.4842000558055588, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Customer.Fax))", "score": -0.5126099131084629, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,Edmonton), Employee.Fax),Employee.Fax))", "score": -0.6118141967817792, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Track.UnitPrice))", "score": -0.6125788233257481, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Album.ArtistId),Employee.Fax))", "score": -0.6279910459197708, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.HireDate),Employee.Fax))", "score": -0.6370824827827164, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,Edmonton), Employee.Fax),Employee.Fax))", "score": -0.6391158659025677, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Phone),Employee.Fax))", "score": -0.6542370571769425, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Email))", "score": -0.6570423386074253, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,Edmonton), Employee.Fax),Employee.Fax))", "score": -0.6743571121260175, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 78, "beams": [{"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.05593375893889543, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.1315767593646347, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.14685077537813954, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.15128004674156512, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19125913689423224, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.21288019294389485, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Music Videos), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23917157112650872, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24197209370951742, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24266404098070135, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24680493856102215, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.24690732754499137, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.25055567819434077, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.26415487239285595, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.28635496395955984, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.28928192347355086, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 79, "beams": [{"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))", "score": -0.0720067299589573, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Country),Employee.Address))", "score": -0.30618132051677094, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Country))", "score": -0.3297752361431776, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.State))", "score": -0.470515034689015, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.State),Employee.Address))", "score": -0.4834362655565201, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.City))", "score": -0.5583101730480848, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Customer.Address),Employee.Address))", "score": -0.5629474311754166, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Country),Employee.Country))", "score": -0.5639498267009913, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.BirthDate),Employee.Address))", "score": -0.5889627128526627, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))", "score": -0.5925606326818524, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Customer.Address))", "score": -0.594041429056233, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,+1 (780) 428-9482), Employee.Address),Employee.Address))", "score": -0.6028710227146803, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.City),Employee.Address))", "score": -0.6070259004518448, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))", "score": -0.6073678951397596, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,+1 (780) 428-9482), Employee.Address),Employee.Address))", "score": -0.6581632118359266, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 80, "beams": [{"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.1415345489893841, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1962-02-18 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.1635025833254367, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.BirthDate,<,1962-02-18 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.16939033667087772, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Employee.BirthDate),Track.Bytes)", "score": -0.17277245451126141, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1962-02-18 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Employee.BirthDate),Track.Bytes)", "score": -0.1956952559070137, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.BirthDate,<,1962-02-18 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), None),None)", "score": -0.19699396528249263, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1962-02-18 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.20168681931115137, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.BirthDate,<,1962-02-18 00:00:00), None),None)", "score": -0.23942495722421853, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1962-02-18 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Employee.BirthDate),Track.Bytes)", "score": -0.24025715355880653, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.HireDate,<,1962-02-18 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.24400396535250662, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.BirthDate,<,1962-02-18 00:00:00), Employee.BirthDate),Track.Bytes)", "score": -0.2581197261025293, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.BirthDate,<,1962-02-18 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.25836587723577015, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Employee.Email),Track.Bytes)", "score": -0.2677569923153063, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.BirthDate,<,1962-02-18 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.2739210669820332, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.BirthDate,>=,1962-02-18 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.27527319091910185, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 81, "beams": [{"orig_question": "How much do all tracks cost together?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.20622276070248455, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much do all tracks cost together?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.24127343622896807, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much do all tracks cost together?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.25207001945157304, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much do all tracks cost together?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.2871206949780566, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much do all tracks cost together?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.31111452823707547, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much do all tracks cost together?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.3198340024651385, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much do all tracks cost together?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Artist.Name,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.339992021715412, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much do all tracks cost together?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.346165203763559, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much do all tracks cost together?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.34996992203651045, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much do all tracks cost together?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,None), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3533861616253459, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much do all tracks cost together?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)", "score": -0.35451261055532296, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much do all tracks cost together?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.365681261214227, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much do all tracks cost together?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3832390122687072, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much do all tracks cost together?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.38455867001286387, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much do all tracks cost together?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,None),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.38749874639336596, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 82, "beams": [{"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,James Levine),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.34729059548331537, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Playlist.PlaylistId,Album.ArtistId),Artist.Name,=,James Levine),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.35810541149792047, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.36616780477098176, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,James Levine),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3728426138762918, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,James Levine),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.37471820891308494, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,James Levine),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.37476015378065974, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(InvoiceLine),Playlist.PlaylistId,Album.ArtistId),Artist.Name,=,James Levine),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3836574423817768, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Playlist.PlaylistId,Album.ArtistId),Artist.Name,=,James Levine),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.38553302492769, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Playlist.PlaylistId,Album.ArtistId),Artist.Name,=,James Levine),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3855749697952648, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Playlist.Name,=,James Levine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,PlaylistTrack.PlaylistId), Track.TrackId),Invoice.Total)", "score": -0.3917271007695995, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,James Levine),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3932374722828578, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3935954182007513, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.39363736306832614, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Playlist.Name,=,James Levine),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,PlaylistTrack.PlaylistId), Track.TrackId),Invoice.Total)", "score": -0.3972643643138335, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,James Levine),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4002702273060614, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 83, "beams": [{"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1033 N Park Ave),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.03476766181361913, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1033 N Park Ave),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Invoice.BillingPostalCode))", "score": -0.22419904245187558, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,1033 N Park Ave),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.2671836448777513, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1033 N Park Ave),getData(Genre),Track.GenreId,Genre.GenreId), Invoice.BillingPostalCode),Genre.Name))", "score": -0.26852553932178286, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,1033 N Park Ave),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.2810786603648516, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1033 N Park Ave),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Track.TrackId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.30093554405817435, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1033 N Park Ave),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Track.TrackId,InvoiceLine.TrackId), Genre.Name),Genre.Name))", "score": -0.3188721921510346, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1033 N Park Ave),getData(Genre),Track.GenreId,Genre.GenreId), Invoice.BillingAddress),Genre.Name))", "score": -0.3307543579761388, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1033 N Park Ave),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Track.GenreId))", "score": -0.3411093485475814, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Invoice.BillingPostalCode,=,1033 N Park Ave),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.37418428525501096, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1033 N Park Ave),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Track.Name))", "score": -0.39218122739091366, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1033 N Park Ave),getData(Genre),Track.TrackId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.4115260616061755, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1033 N Park Ave),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Invoice.BillingAddress))", "score": -0.4150627322123351, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,1033 N Park Ave),merge(getData(Genre),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.4172991435386361, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1033 N Park Ave),getData(Genre),Track.GenreId,Album.AlbumId), Genre.Name),Genre.Name))", "score": -0.4197277738993483, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 84, "beams": [{"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.042110305509017, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4888040997784019, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5875629978260435, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.598516219331568, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.6100366008106137, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.6111779676754747, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.6137298474713099, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.619478864159166, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.6252502289503556, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.6255889058060248, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.668685277448612, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),merge(getData(InvoiceLine),getData(Track),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.6854819970842002, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.7022015584627732, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.7056059239353297, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.7062231547158125, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 85, "beams": [{"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Accept),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.19928053547576746, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Accept),merge(merge(getData(Album),getData(Track),Album.AlbumId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.206049740419606, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Accept),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.23952253126512082, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Accept),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.24447930596829515, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Accept),merge(merge(getData(Album),getData(Track),Album.AlbumId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.24629173620895936, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Accept),merge(merge(getData(Album),getData(Track),Album.AlbumId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2512485109121337, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Accept),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.CustomerId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2629326634985073, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2692426700507277, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Accept),merge(merge(getData(Album),getData(Track),Album.AlbumId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.CustomerId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.26970186844234584, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Accept),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.272058900282664, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Accept),merge(merge(getData(Album),getData(Track),Album.AlbumId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2788281052265026, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2817428589593183, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Accept),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2847212880707831, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Accept),merge(merge(getData(Album),getData(Track),Album.AlbumId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.29149049301462165, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Accept),merge(merge(getData(Album),getData(Invoice),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.29157515792112343, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 86, "beams": [{"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Invoice.Total),Invoice.Total))", "score": -0.12155808076693331, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))", "score": -0.13123338744926966, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceDate),Invoice.Total))", "score": -0.14475239875877263, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.Total),Invoice.Total))", "score": -0.1668120808706286, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceDate),Invoice.Total))", "score": -0.16886376078685753, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.BillingState),Invoice.Total))", "score": -0.18150173672271902, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingState),Invoice.Total))", "score": -0.19597588879616767, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Invoice.Total),Invoice.Total))", "score": -0.20631046924086832, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Invoice.Total),Invoice.Total))", "score": -0.2124523433282479, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Invoice.InvoiceDate),Invoice.Total))", "score": -0.22912416912258848, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))", "score": -0.2336113489320489, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceDate),Invoice.Total))", "score": -0.24634931497802023, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingAddress),Invoice.Total))", "score": -0.26969764674399677, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.Total))", "score": -0.2703668727636639, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),Invoice.Total))", "score": -0.2737040744302655, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 87, "beams": [{"orig_question": "How many different artist names do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.04080847803095548, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.LastName))", "score": -0.5504383917482268, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.553139974491086, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Genre.Name))", "score": -0.7064634199084234, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.7415115760135279, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -0.7895701080696771, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Artist.Name))", "score": -0.8485874999545866, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.Phone))", "score": -0.9461188585032183, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Customer.LastName))", "score": -0.9600784175485069, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -0.9679887759337447, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.9687251497687351, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.FirstName))", "score": -0.9842884546067425, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Employee.LastName),Artist.Name))", "score": -1.0517457959220116, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),MediaType.Name))", "score": -1.0591094522044011, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "sum(distinct(getData(Artist), Artist.Name),Artist.Name)", "score": -1.0662061712933608, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 88, "beams": [{"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Track.Name))", "score": -0.1829501193835002, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical 101 - The Basics), Track.Name),Track.Name))", "score": -0.2428356708899952, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.25221187663449635, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical 101 - The Basics), Track.Name),Album.Title))", "score": -0.3043229214752248, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Track.Name))", "score": -0.308900846999788, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),merge(getData(PlaylistTrack),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Track.Name))", "score": -0.3119938704204247, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Track.Name),Track.Name))", "score": -0.3134485539734269, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Track.Name))", "score": -0.3157148387697163, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),merge(getData(InvoiceLine),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Track.Name))", "score": -0.3295248627091099, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Track.Name))", "score": -0.33398533537460073, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.GenreId,Track.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Track.Name))", "score": -0.34079932714452904, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),getData(InvoiceLine),Genre.GenreId,Track.GenreId),getData(Track),Track.GenreId,Genre.GenreId), Genre.Name),Track.Name))", "score": -0.366950729315812, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.3683982621403773, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.3752122539103056, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Track.Name))", "score": -0.3782892424263013, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 89, "beams": [{"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,Bebel Gilberto),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.19139971171493247, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,Bebel Gilberto),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.21213321715003597, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,Bebel Gilberto),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21382881650628535, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,Bebel Gilberto),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23456232194138885, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Track),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,Bebel Gilberto),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.2687669053985901, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,Bebel Gilberto),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.27483924680990024, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,Bebel Gilberto),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),Invoice.Total)", "score": -0.27952952110519086, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(PlaylistTrack),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,Bebel Gilberto),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.2802898166570675, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Bebel Gilberto),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.2837083349862518, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,Bebel Gilberto),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.2895004108336936, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Track),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,Bebel Gilberto),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.29119601018994296, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,Bebel Gilberto),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.29557275224500373, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,Bebel Gilberto),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),Invoice.Total)", "score": -0.3002630333888765, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,Bebel Gilberto),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.3010233289407531, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,Bebel Gilberto),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.30195863274512585, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 90, "beams": [{"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.125602919701271, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Boston Symphony Orchestra & Seiji Ozawa),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.1273948972708443, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Boston Symphony Orchestra & Seiji Ozawa),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Track.Composer),Invoice.BillingPostalCode))", "score": -0.16075191788752746, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Boston Symphony Orchestra & Seiji Ozawa),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.16140656025068392, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.17440205981697113, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.18506727696130873, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Boston Symphony Orchestra & Seiji Ozawa),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.18685925453088204, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Boston Symphony Orchestra & Seiji Ozawa),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Artist.Name),Invoice.BillingPostalCode))", "score": -0.1987033942824858, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Track.Composer),Invoice.BillingPostalCode))", "score": -0.20412006727387655, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.204774709637033, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Boston Symphony Orchestra & Seiji Ozawa),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Track.Composer),Track.Composer))", "score": -0.236545099565618, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Boston Symphony Orchestra & Seiji Ozawa),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.BillingPostalCode),Track.Composer))", "score": -0.23719974192877447, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Artist.Name),Invoice.BillingPostalCode))", "score": -0.24207154366883488, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.25602583473321316, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Boston Symphony Orchestra & Seiji Ozawa),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Track.Composer),Artist.Name))", "score": -0.26936204196956925, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 91, "beams": [{"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.0515619604548192, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3071431102862334, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3507958831896758, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.43281948516869306, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,71020-677), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.4664271999781704, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,71020-677), Invoice.BillingCountry),Invoice.BillingCity))", "score": -0.5368027616923428, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,71020-677), Invoice.BillingCountry),Genre.Name))", "score": -0.5989134241526699, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,71020-677), Invoice.BillingCountry),Customer.Company))", "score": -0.5994789530222988, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6748011293520904, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6884006350001073, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,71020-677), Invoice.BillingCountry),Customer.Country))", "score": -0.6940153767054653, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,71020-677), Invoice.BillingPostalCode),Invoice.BillingCountry))", "score": -0.7115742035375661, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,71020-677), Invoice.BillingCountry),Employee.PostalCode))", "score": -0.7158310343211269, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,71020-677), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.7220083498095846, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Genre.Name,=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.7260286989321685, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 92, "beams": [{"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.11942990345921994, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.17394932158666276, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.17451486339355946, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.21139054664864906, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Composer,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.2947570559988765, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.30041352037732266, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.3141503990440592, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Address,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.3165167714602373, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.3250427243850931, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.3338607808285444, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.Name,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.34251380357914285, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.3489011181245288, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.355498471521426, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.36207150130355387, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,120 S Orange Ave),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.3655981838296351, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 93, "beams": [{"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.18127780146560377, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(getData(Playlist), Playlist.Name),Playlist.Name))", "score": -0.242807349560189, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Track.Name),Playlist.Name))", "score": -0.24668976738466564, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Track.Name),Track.Name))", "score": -0.26924989200454336, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.27887970918513477, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), MediaType.Name),Playlist.Name))", "score": -0.28856878760154353, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.29979522232336653, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Track.Name))", "score": -0.3011996027245784, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), MediaType.Name),Track.Name))", "score": -0.31112891222142125, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Playlist.Name),Playlist.Name))", "score": -0.31266042993748966, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Track.Name),Playlist.Name))", "score": -0.3291818460879774, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Playlist.Name),Track.Name))", "score": -0.3352205545573674, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Track.Name),Playlist.Name))", "score": -0.3440845549030405, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Track.Name),Track.Name))", "score": -0.3517419707078551, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Track.Name),Track.Name))", "score": -0.3666446795229182, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 94, "beams": [{"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,7068737), Playlist.Name),Playlist.Name))", "score": -0.04925751700133597, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Invoice.Total,>=,7068737), Playlist.Name),Playlist.Name))", "score": -0.22702605613259308, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,7068737),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.24490706001772117, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,7068737), Playlist.Name),Playlist.Name))", "score": -0.2694585324208391, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,7068737), Playlist.Name),Playlist.Name))", "score": -0.27069053948034527, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,Playlist.PlaylistId),Track.Bytes,>=,7068737), Playlist.Name),Playlist.Name))", "score": -0.31186179139441345, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,7068737), Playlist.Name),Employee.FirstName))", "score": -0.33603349469790716, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Invoice.Total,>=,7068737),Track.Bytes,>=,7068737), Playlist.Name),Playlist.Name))", "score": -0.3362686321737938, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,7068737),Track.Bytes,>=,7068737), Playlist.Name),Playlist.Name))", "score": -0.35167151798434815, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Invoice.Total,>=,7068737),Playlist.Name,>=,7068737), Playlist.Name),Playlist.Name))", "score": -0.36667354247581674, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Employee.Email,>=,7068737), Playlist.Name),Playlist.Name))", "score": -0.37867788807360503, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,7068737),Playlist.Name,>=,7068737), Playlist.Name),Playlist.Name))", "score": -0.3820764719904021, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,7068737), Playlist.Name),PlaylistTrack.PlaylistId))", "score": -0.39483070784889185, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Playlist),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,7068737), Playlist.Name),Playlist.Name))", "score": -0.40001019282201694, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Customer.CustomerId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,7068737), Playlist.Name),Playlist.Name))", "score": -0.4033418730176563, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 95, "beams": [{"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.11181674165558955, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,5064553), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.13487275861997536, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.17017614125833752, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,5064553),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.20203426122141283, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,<,5064553), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.26275569254844955, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,5064553),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.27119799051131427, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,5064553), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.27500430270829157, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,5064553), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.2980603196726774, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.32274541235741544, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,5064553), Invoice.BillingCity),Customer.City))", "score": -0.32987001094820356, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,5064553),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3464953351968527, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,5064553), Invoice.BillingCity),Customer.City))", "score": -0.35292602791258937, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,5064553),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.35584224663404207, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,5064553),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3634954848152068, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>=,5064553),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.38475429074350626, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 96, "beams": [{"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))", "score": -0.025868592763799825, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))", "score": -0.3759124763109867, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Phone))", "score": -0.5221521025323455, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Country))", "score": -0.5343525772714202, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.PostalCode))", "score": -0.5706794028901641, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))", "score": -0.5918819494345371, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.LastName))", "score": -0.5992065435075347, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Country),Customer.Company))", "score": -0.6459928441126976, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.City))", "score": -0.6605124836587493, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))", "score": -0.6672072000601474, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.PostalCode),Customer.Company))", "score": -0.6711195397456322, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Invoice.BillingCity),Customer.Company))", "score": -0.7021950769503746, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))", "score": -0.7203334159949009, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Invoice.BillingCity))", "score": -0.7293749218606536, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))", "score": -0.7510693515159801, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 97, "beams": [{"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(getData(Track),getData(Album),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.20701392729904036, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(getData(Track),getData(Album),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.2524642752592609, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(getData(Track),getData(Album),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.25839852098669563, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.29024799936508444, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Artist.Name,!=,Adrian Leaper & Doreen de Feis),merge(getData(Track),getData(Album),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.3088974806112884, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.GenreId,Genre.GenreId),Artist.Name,!=,Adrian Leaper & Doreen de Feis), Genre.Name),Album.Title))", "score": -0.32889275709323146, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(getData(Track),getData(Album),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.3306584918360589, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.335698347325305, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(getData(Track),getData(Album),Track.GenreId,Album.AlbumId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.3365849449441934, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Artist.Name,=,Adrian Leaper & Doreen de Feis), Genre.Name),Album.Title))", "score": -0.3398767176579274, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.3416325930527397, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Adrian Leaper & Doreen de Feis),merge(getData(Track),getData(Album),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.35434783410918613, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Adrian Leaper & Doreen de Feis), Genre.Name),Album.Title))", "score": -0.35876293453352076, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),Artist.Name,!=,Adrian Leaper & Doreen de Feis),merge(getData(Track),getData(Album),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.36028204328795155, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(getData(Track),getData(Album),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.36580360137774975, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 98, "beams": [{"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Cupertino), Track.Name),Track.Name))", "score": -0.11203335071342063, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Cupertino), Track.Name),Track.Name))", "score": -0.12496257092140985, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.AlbumId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Cupertino), Track.Name),Track.Name))", "score": -0.2288198930244932, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Cupertino), Track.Name),Track.Name))", "score": -0.2391417084867434, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,Cupertino), Track.Name),Track.Name))", "score": -0.24048589307527138, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.AlbumId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Cupertino), Track.Name),Track.Name))", "score": -0.2417491132324824, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Cupertino), Track.Name),Track.Name))", "score": -0.24372460150191952, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Cupertino), Track.Name),Track.Name))", "score": -0.2575321916536227, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Cupertino), Track.Name),Track.Name))", "score": -0.26996451032463065, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Cupertino), Track.Name),Track.Name))", "score": -0.27021613230642133, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Cupertino), Track.Name),Track.Name))", "score": -0.2704614118616119, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Cupertino), Track.Name),Track.Name))", "score": -0.29271263188395197, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Cupertino), Track.Name),Track.Name))", "score": -0.2950170565995924, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Cupertino), Track.Name),Track.Name))", "score": -0.30564184412862344, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Cupertino), Track.Name),Track.Name))", "score": -0.30848460042079023, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 99, "beams": [{"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Employee.Phone))", "score": -0.3292193606469074, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.HireDate),Employee.Phone))", "score": -0.41033521932008116, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))", "score": -0.45308923065877477, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.Phone),Employee.Phone))", "score": -0.4565637754522221, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Employee.HireDate))", "score": -0.47435421806263556, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Employee.State))", "score": -0.5314344196951399, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.HireDate),Customer.Phone))", "score": -0.5342050893319485, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.HireDate),Employee.HireDate))", "score": -0.5554700767358094, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.Phone),Customer.Phone))", "score": -0.5804336454640895, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.Phone),Employee.HireDate))", "score": -0.6016986328679503, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.HireDate),Employee.State))", "score": -0.6125502783683138, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.Phone),Employee.State))", "score": -0.6587788345004546, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.State),Employee.Phone))", "score": -0.7075859767969394, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Employee.Fax))", "score": -0.7422086353839747, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.State))", "score": -0.7538088390085248, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 100, "beams": [{"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.UnitPrice,=,0.99), MediaType.Name),MediaType.Name))", "score": -0.17466514671060232, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.UnitPrice,=,0.99), MediaType.Name),MediaType.Name))", "score": -0.2449969825453804, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice,=,Age Of Innocence), MediaType.Name),MediaType.Name))", "score": -0.2576063310316288, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,Age Of Innocence),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2661801940616031, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,=,0.99),getData(PlaylistTrack),Track.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.28415899066632677, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.UnitPrice,=,0.99), MediaType.Name),MediaType.Name))", "score": -0.3063336060967741, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.UnitPrice,=,0.99), MediaType.Name),MediaType.Name))", "score": -0.3130006836538468, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,=,0.99),getData(Track),Track.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3131222206333207, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,Age Of Innocence),getData(PlaylistTrack),Track.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.32706005787036746, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice,=,Age Of Innocence), MediaType.Name),MediaType.Name))", "score": -0.32793816686640687, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.UnitPrice,=,0.99), MediaType.Name),MediaType.Name))", "score": -0.3431603797179917, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,0.99),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.34455575850454573, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.UnitPrice,=,0.99), MediaType.Name),MediaType.Name))", "score": -0.3454143383706005, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,0.99),getData(Track),Track.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3560232828534519, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,Age Of Innocence),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3581060137026374, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 101, "beams": [{"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.1439989688076855, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,<=,293041),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.16973147166018454, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,<,293041),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.20631072661782482, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,293041), Playlist.Name),Playlist.Name))", "score": -0.2546017570792689, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,293041), Playlist.Name),Playlist.Name))", "score": -0.2656183455701957, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,293041),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,293041), Playlist.Name),Playlist.Name))", "score": -0.28743419132320097, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,<,293041),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,293041), Playlist.Name),Playlist.Name))", "score": -0.29079042252311815, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,null,293041),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,293041), Playlist.Name),Playlist.Name))", "score": -0.30328902051896467, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,<=,293041),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,293041), Playlist.Name),Playlist.Name))", "score": -0.31209516028465495, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Track.Name))", "score": -0.31608282926186687, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.319882606123717, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,293041),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,293041), Playlist.Name),Playlist.Name))", "score": -0.32952830096580715, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,293041),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.Milliseconds,<,293041), Playlist.Name),Playlist.Name))", "score": -0.3325028370508061, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,<,293041),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,293041), Playlist.Name),Playlist.Name))", "score": -0.3328845321657243, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,<,293041),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.Milliseconds,<,293041), Playlist.Name),Playlist.Name))", "score": -0.3358590603045358, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 102, "beams": [{"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.011123595405479136, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.43372580245645725, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,<,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.46428151774998555, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.49303667503535176, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.52359239032888, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Invoice.BillingCountry),Customer.Country))", "score": -0.547401189915945, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5695230476100791, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6000787629036075, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6009897417988453, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.605104605429915, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6288339115969214, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingCountry))", "score": -0.6569766225247804, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6584710815177459, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingState))", "score": -0.6617047787831325, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Invoice.BillingCountry),Customer.Country))", "score": -0.7009866170945712, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 103, "beams": [{"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.018809367741386515, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.6840428625075535, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Album.Title)", "score": -0.904037944756563, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Album.Title),Album.Title))", "score": -1.1457178316111094, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -1.1492932584666686, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "sum(distinct(getData(Track), Album.Title),Album.Title)", "score": -1.1838366599443604, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Artist.ArtistId)", "score": -1.2340611658711105, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Genre.Name)", "score": -1.23560146650184, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Artist.Name)", "score": -1.2912618175790656, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Customer.LastName)", "score": -1.327914952147556, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "sum(distinct(getData(Album), Album.AlbumId),Album.Title)", "score": -1.3408939816180123, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.AlbumId))", "score": -1.3455293449267076, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "sum(distinct(getData(Album), Album.Title),InvoiceLine.Quantity)", "score": -1.3641209204415539, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Artist.ArtistId))", "score": -1.4123278551653733, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "sum(distinct(getData(Customer), Album.Title),Album.Title)", "score": -1.4384119135655786, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 104, "beams": [{"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.021301715349181904, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NS),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.381892910365957, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.41464730882398726, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NS),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Customer.CustomerId,Track.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4438837728176564, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NS),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Customer.SupportRepId,Track.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.46183166802383263, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NS),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.496585879579978, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NS),getData(InvoiceLine),Invoice.InvoiceId,Customer.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5059117155556223, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NS),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.526313242566119, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NS),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Invoice.InvoiceDate,Track.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5294292425345622, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NS),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.InvoiceId,Track.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5305105869687594, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NS),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Invoice.InvoiceId,Track.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5407799744653523, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NS),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Customer.CustomerId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5585767652899214, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.563315896963104, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NS),getData(InvoiceLine),Invoice.InvoiceId,Customer.CustomerId),getData(Track),Customer.CustomerId,Track.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5679026012655658, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NS),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Employee.EmployeeId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5719477880435304, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 105, "beams": [{"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)", "score": -0.030279357638891568, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.6229416001765866, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.7566368744465108, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.773317630463832, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.7769770251731587, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.7936577811904798, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.8355025549300871, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(getData(Customer), Invoice.InvoiceId),Invoice.Total)", "score": -0.8804729319896124, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Customer.CustomerId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.8809626715492435, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Customer.CustomerId,InvoiceLine.InvoiceId), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.8976434275665646, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.8983543674161854, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(getData(InvoiceLine), Invoice.InvoiceId),Invoice.Total)", "score": -0.9002761188820889, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Customer.CustomerId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.9013028222758914, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Customer.CustomerId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.9179835782932125, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.9239522167811306, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 106, "beams": [{"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.11168964522490597, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.1514743779616757, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.19907236874677087, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.266111459028268, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99), Playlist.Name),Playlist.Name))", "score": -0.2727049139694819, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),InvoiceLine.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.2728634488063029, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.279074809691992, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.28198129210299, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,Invoice.InvoiceId),Track.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.3016197723264791, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99), Playlist.Name),Employee.FirstName))", "score": -0.30291043763473596, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99), Playlist.Name),Playlist.Name))", "score": -0.3124896467062516, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),InvoiceLine.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.3126481815430726, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Track.UnitPrice,<=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3298734256454221, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,MediaType.MediaTypeId),Track.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.33848489533977905, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,Invoice.InvoiceId),Track.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.3414045049334595, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 107, "beams": [{"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.BirthDate),Employee.Title))", "score": -0.07157842864762642, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))", "score": -0.31576017712723115, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.BirthDate),Employee.Title))", "score": -0.40940180656980374, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Address),Employee.Title))", "score": -0.470626038066257, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,AB), Employee.BirthDate),Employee.Title))", "score": -0.47416058418821194, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB), Employee.BirthDate),Employee.Title))", "score": -0.4753930240997456, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Email),Employee.Title))", "score": -0.515091222277988, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.BirthDate),Employee.BirthDate))", "score": -0.5180767043821106, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB), Employee.BirthDate),Track.UnitPrice))", "score": -0.5498928391658447, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Invoice.BillingState,=,AB), Employee.BirthDate),Employee.Title))", "score": -0.5586998125121193, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,!=,AB), Employee.BirthDate),Employee.Title))", "score": -0.5819336921304057, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,AB), Employee.BirthDate),Employee.Title))", "score": -0.598560305810679, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB), Employee.Email),Employee.Title))", "score": -0.604779322555392, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.City),Employee.Title))", "score": -0.607468318692554, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB), Employee.Title),Employee.Title))", "score": -0.6247289485056162, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 108, "beams": [{"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Artist),InvoiceLine.TrackId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Track.UnitPrice,=,1.99), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.34231784406619914, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Artist),InvoiceLine.TrackId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Track.UnitPrice,=,1.99), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3682681257834374, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Artist),InvoiceLine.TrackId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Track.UnitPrice,=,1.99), Invoice.InvoiceDate),Customer.City))", "score": -0.3782357320254928, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.TrackId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Track.UnitPrice,=,1.99), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.381058268353621, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Artist),InvoiceLine.TrackId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Track.UnitPrice,=,1.99), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.38990422916217615, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Artist),InvoiceLine.TrackId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Track.UnitPrice,=,1.99), Customer.City),Invoice.BillingCity))", "score": -0.39537109493726663, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Artist),InvoiceLine.TrackId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Track.UnitPrice,=,1.99), Invoice.BillingCity),Customer.City))", "score": -0.404186013742731, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.TrackId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Track.UnitPrice,=,1.99), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.4070085500708592, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Artist),InvoiceLine.TrackId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Track.UnitPrice,=,1.99), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.4084523421204222, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Artist),InvoiceLine.TrackId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Track.UnitPrice,=,1.99), Invoice.BillingCity),Invoice.InvoiceDate))", "score": -0.4158545108794144, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.TrackId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Track.UnitPrice,=,1.99), Invoice.InvoiceDate),Customer.City))", "score": -0.4169761563129146, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Artist),Customer.SupportRepId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Track.UnitPrice,=,1.99), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.42366970618188526, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.TrackId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Track.UnitPrice,=,1.99), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.42864465344959796, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Artist),InvoiceLine.TrackId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Track.UnitPrice,=,1.99), Customer.City),Customer.City))", "score": -0.43128898289656026, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.TrackId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Track.UnitPrice,=,1.99), Customer.City),Invoice.BillingCity))", "score": -0.43411151922468844, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 109, "beams": [{"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)", "score": -0.14213839378562804, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.28591930705427404, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,None), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.29367132935708734, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(getData(Track), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.5509753014420288, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(getData(Track), Track.UnitPrice),Track.UnitPrice)", "score": -0.5939134391896917, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,None), Track.Milliseconds),Track.UnitPrice)", "score": -0.6046828745441927, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,None), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.6742482475929529, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.6820002698957661, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(filter(getData(Album),Track.UnitPrice,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.7086456266341059, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(filter(getData(Album),Track.UnitPrice,=,None), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.7163976489369192, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(getData(Track), Track.Milliseconds),Track.UnitPrice)", "score": -0.7614043645762036, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,None), Track.TrackId),Track.Milliseconds)", "score": -0.7914129402866835, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(getData(Track), Album.AlbumId),Track.UnitPrice)", "score": -0.7945739521856171, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(filter(getData(Track),Album.Title,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.7980858040820992, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,None), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.7991649625894968, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 110, "beams": [{"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.0418465185945717, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))", "score": -0.15942182293281434, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.20007006389704401, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.24988711381332745, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,MPEG audio file),Track.Milliseconds),Album.Title))", "score": -0.2743722113449016, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),Track.Milliseconds),Album.Title))", "score": -0.3146464157020418, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.37393169071112214, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.408624413237989, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.4392451756059792, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.GenreId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.4577397752209849, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),Genre.GenreId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.45867213087391323, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.4697109413018545, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,<=,MPEG audio file),Track.Milliseconds),Album.Title))", "score": -0.48241340459818016, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title)", "score": -0.48961910578975426, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,MPEG audio file),Track.Bytes),Album.Title))", "score": -0.5115212930905664, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 111, "beams": [{"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC),Invoice.Total),Employee.PostalCode))", "score": -0.29796938845036347, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Address),Employee.PostalCode))", "score": -0.31845231739274177, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Employee.PostalCode),Employee.PostalCode))", "score": -0.36765176708470093, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingState,!=,BC),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Employee.Address),Employee.PostalCode))", "score": -0.3682105401643657, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC),getData(Invoice),Customer.CustomerId,Employee.EmployeeId), Employee.PostalCode),Employee.PostalCode))", "score": -0.37585469282138156, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Invoice.Total),Employee.PostalCode))", "score": -0.387138080906639, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC),Employee.Address),Employee.PostalCode))", "score": -0.4065197645865349, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,!=,BC),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))", "score": -0.4128753506024535, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,!=,BC), Employee.Address),Employee.PostalCode))", "score": -0.41661881600525985, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,!=,BC),Invoice.Total),Employee.PostalCode))", "score": -0.4207938808686417, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,!=,BC), Invoice.Total),Employee.PostalCode))", "score": -0.4276197594506729, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Country),Employee.PostalCode))", "score": -0.43675469366794223, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingState,!=,BC),merge(filter(getData(Customer),Customer.City,!=,Chase),getData(Invoice),Customer.CustomerId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address),Employee.PostalCode))", "score": -0.5609033504038585, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingState,!=,BC),merge(filter(getData(Customer),Customer.Address,!=,BC),getData(Invoice),Customer.CustomerId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address),Employee.PostalCode))", "score": -0.5816649781713912, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingState,!=,BC),merge(filter(getData(Customer),Customer.City,!=,BC),getData(Invoice),Customer.CustomerId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),Employee.Address),Employee.PostalCode))", "score": -0.5824294570289105, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 112, "beams": [{"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))", "score": -0.2055867289150831, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))", "score": -0.2115382272786519, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Country))", "score": -0.28665205280980877, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.CustomerId),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))", "score": -0.3315552884399511, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.CustomerId,Invoice.CustomerId),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))", "score": -0.361601643758117, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.CustomerId),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))", "score": -0.3905092754464198, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.CustomerId),Customer.LastName,=,Peeters), Invoice.BillingCountry),Customer.Country))", "score": -0.43832439762011655, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.CustomerId,Invoice.CustomerId),Customer.LastName,=,Peeters), Invoice.BillingCountry),Customer.Country))", "score": -0.46837075293828245, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.CustomerId),Genre.Name,=,Peeters), Customer.Country),Customer.Country))", "score": -0.4721449501617929, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Peeters),merge(getData(Track),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCountry),Customer.Country))", "score": -0.4905268024491695, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))", "score": -0.4928523946633144, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.CustomerId),Customer.LastName,=,Peeters), Invoice.BillingCountry),Customer.Country))", "score": -0.4972783846265852, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Peeters),merge(getData(Track),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCountry),Customer.Country))", "score": -0.4990393375008215, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Peeters),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCountry),Customer.Country))", "score": -0.5001677333627804, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.CustomerId,Invoice.CustomerId),Genre.Name,=,Peeters), Customer.Country),Customer.Country))", "score": -0.5021913121251714, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 113, "beams": [{"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,IT Staff),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.14884792096433122, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,IT Staff),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.1541659138834407, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,IT Staff),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), None),None)", "score": -0.15992380172466117, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,IT Staff),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), None),None)", "score": -0.16440797245382704, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,IT Staff), Track.TrackId),Track.UnitPrice)", "score": -0.19917312394768327, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,IT Staff),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.21565742235317198, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,IT Staff),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.22038403139998405, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Invoice.BillingState,=,IT Staff),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), None),None)", "score": -0.22253387843560865, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Invoice.BillingCountry,=,IT Staff),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), None),None)", "score": -0.2262534101836785, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,IT Staff),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.23027217983192622, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Playlist.Name,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.24495355243507252, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Invoice.BillingState,=,IT Staff),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.26467726172291445, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,IT Staff), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.2679883853843785, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,IT Staff), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.2883561706503533, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,IT Staff),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.30448655501548666, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 114, "beams": [{"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,>,2011-04-20 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.12669262928334898, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,<,2011-04-20 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.12848215354215137, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2011-04-20 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.1424147751954416, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2011-04-20 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.18046396702810416, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2011-04-20 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.19235192254482486, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,<,2011-04-20 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.2258537939288102, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,>,2011-04-20 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.23574062657391284, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,=,2011-04-20 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.23614529134642254, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2011-04-20 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.24456217811135672, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,>=,2011-04-20 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.24666584964631616, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,<=,2011-04-20 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.24802357845853854, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-04-20 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.24906246819516004, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2011-04-20 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.25481272429265767, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.28989076765710503, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,<,2011-04-20 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.29131714343260645, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 115, "beams": [{"orig_question": "Which tracks are bigger than 8201437 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Milliseconds),Track.Name))", "score": -0.10522849348126329, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are bigger than 8201437 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Composer),Track.Name))", "score": -0.13100583341656602, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are bigger than 8201437 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Name),Track.Name))", "score": -0.38931961592970765, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are bigger than 8201437 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8201437), Track.Milliseconds),Track.Name))", "score": -0.4542772691020218, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are bigger than 8201437 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8201437), Track.Composer),Track.Name))", "score": -0.48005460903732455, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are bigger than 8201437 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Milliseconds),Track.Composer))", "score": -0.5188892488622514, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are bigger than 8201437 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Composer),Track.Composer))", "score": -0.5446665887975541, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are bigger than 8201437 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.UnitPrice),Track.Name))", "score": -0.5688992315226642, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are bigger than 8201437 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,8201437), Track.Milliseconds),Track.Name))", "score": -0.6014638464221207, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are bigger than 8201437 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,8201437), Track.Composer),Track.Name))", "score": -0.6272411863574234, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are bigger than 8201437 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8201437), Track.Milliseconds),Track.Name))", "score": -0.6457148115405289, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are bigger than 8201437 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,8201437), Track.Milliseconds),Track.Name))", "score": -0.6572412173518387, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are bigger than 8201437 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8201437), Track.Composer),Track.Name))", "score": -0.6714921514758316, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are bigger than 8201437 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,8201437), Track.Composer),Track.Name))", "score": -0.6830185572871414, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are bigger than 8201437 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Bytes),Track.Name))", "score": -0.6888384237208811, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 116, "beams": [{"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.12588583736011105, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.5552150284460861, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.LastName))", "score": -0.5562341316759031, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.Phone))", "score": -0.6744658953691499, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -0.6922601304316317, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "sum(distinct(getData(Artist), Artist.Name),Artist.Name)", "score": -0.6924752961734864, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Customer.Phone))", "score": -0.7956970229953456, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Customer.LastName))", "score": -0.7984001846416517, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.FirstName))", "score": -0.8410169201937818, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -0.9001061975173246, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.9026046475473862, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.9123599413885801, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Customer.Phone),Artist.Name))", "score": -0.9653166364925482, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "sum(distinct(getData(Artist), Artist.Name),Employee.Phone)", "score": -0.9656034560527221, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.9955506286972868, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 117, "beams": [{"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Maurizio Pollini),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.10068154498506794, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Maurizio Pollini),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Album.ArtistId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.12423090615372123, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))", "score": -0.2005508956119464, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Maurizio Pollini),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Playlist),Album.ArtistId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.24142112309425987, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Maurizio Pollini),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),Album.ArtistId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.24510409571903466, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), Track.Name),MediaType.Name))", "score": -0.2707787708658869, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Album.ArtistId,MediaType.MediaTypeId),Artist.Name,!=,Maurizio Pollini), Track.TrackId),MediaType.Name)", "score": -0.27748364687723515, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Maurizio Pollini),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Album.AlbumId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2850571045145304, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.AlbumId,MediaType.MediaTypeId),Artist.Name,!=,Maurizio Pollini), Track.TrackId),MediaType.Name)", "score": -0.2914698550727182, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), Track.Bytes),MediaType.Name))", "score": -0.30322066031873807, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Maurizio Pollini),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Album.ArtistId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.30587654963433886, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Album.ArtistId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))", "score": -0.3066800759138424, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.Name,!=,Maurizio Pollini), Track.TrackId),MediaType.Name)", "score": -0.3204472007647209, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), Track.TrackId),MediaType.Name)", "score": -0.3426846100809234, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Album.ArtistId,MediaType.MediaTypeId),Artist.Name,!=,Maurizio Pollini), Track.TrackId),Track.UnitPrice)", "score": -0.34595288084493686, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 118, "beams": [{"orig_question": "What are the unit prices of tracks on the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Track.UnitPrice),Track.UnitPrice))", "score": -0.08610411061697582, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks on the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.16456524906098954, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks on the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.2071828120488096, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks on the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.22589350846183445, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks on the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Track.UnitPrice),Track.UnitPrice))", "score": -0.23569641496524915, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks on the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.24995911652719532, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks on the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Album),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.25936431593367887, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks on the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))", "score": -0.2657123760037454, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks on the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.27452504889376556, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks on the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.2749445701965666, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks on the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))", "score": -0.2756689716231611, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks on the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),Track.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))", "score": -0.29391918708258125, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks on the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.2958365480441794, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks on the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.2981068517341083, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks on the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.3143421034635138, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 119, "beams": [{"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.014686061895679932, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -0.8087084394624574, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Customer.Phone))", "score": -0.8297470910572016, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.8442859459224218, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -0.870651501966398, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Employee.Phone))", "score": -0.922888421130208, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Album.Title),Artist.Name))", "score": -0.9306692127557998, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Customer.Phone),Artist.Name))", "score": -0.9488310233250763, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.9589786013941333, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Genre.Name))", "score": -1.014659894572663, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Customer.LastName))", "score": -1.0147614180643003, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -1.034529797275145, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Genre), Artist.Name),Artist.Name))", "score": -1.0687183869336996, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -1.112657379032201, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Employee.LastName))", "score": -1.1142103884625953, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 120, "beams": [{"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.0968702123741517, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.12488732026074438, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.1260863159589392, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.16049094011964338, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.1967755616395551, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.20443136717315932, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.20918130800848453, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.22352355457770803, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2353538523204904, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.23591856825834673, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2553843058787172, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.25719511541056495, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Track),Track.MediaTypeId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2710178206790117, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.2904651809553025, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.32166760236304287, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 121, "beams": [{"orig_question": "What is the UnitPrice of tracks with a bytes size equal to or above 6906078?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.UnitPrice),Track.Name))", "score": -0.16553011627547676, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the UnitPrice of tracks with a bytes size equal to or above 6906078?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.Bytes),Track.Name))", "score": -0.22035225571744377, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the UnitPrice of tracks with a bytes size equal to or above 6906078?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.Name),Track.Name))", "score": -0.2982230568086379, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the UnitPrice of tracks with a bytes size equal to or above 6906078?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.Milliseconds),Track.Name))", "score": -0.31810153366677696, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the UnitPrice of tracks with a bytes size equal to or above 6906078?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>=,6906078), Track.UnitPrice),Track.Name))", "score": -0.3985279260660903, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the UnitPrice of tracks with a bytes size equal to or above 6906078?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>=,6906078), Track.Bytes),Track.Name))", "score": -0.4119565362320265, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the UnitPrice of tracks with a bytes size equal to or above 6906078?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),Track.Bytes,>=,6906078),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Bytes),Track.Name))", "score": -0.41688037869401023, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the UnitPrice of tracks with a bytes size equal to or above 6906078?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>=,6906078), Track.UnitPrice),Track.Name))", "score": -0.4312925454665234, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the UnitPrice of tracks with a bytes size equal to or above 6906078?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>=,6906078), Track.Name),Track.Name))", "score": -0.4343358136062682, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the UnitPrice of tracks with a bytes size equal to or above 6906078?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>=,6906078), Track.Bytes),Track.Name))", "score": -0.4447211556324597, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the UnitPrice of tracks with a bytes size equal to or above 6906078?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>=,6906078), Track.Milliseconds),Track.Name))", "score": -0.4457803139168811, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the UnitPrice of tracks with a bytes size equal to or above 6906078?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,6906078), Track.UnitPrice),Track.Name))", "score": -0.46129820993291415, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the UnitPrice of tracks with a bytes size equal to or above 6906078?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>=,6906078), Track.Name),Track.Name))", "score": -0.46710043300670134, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the UnitPrice of tracks with a bytes size equal to or above 6906078?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.Composer),Track.Name))", "score": -0.4728643083726638, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the UnitPrice of tracks with a bytes size equal to or above 6906078?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6906078), Track.UnitPrice),Track.Name))", "score": -0.47549135701410705, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 122, "beams": [{"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Lisbon), Customer.Fax),Customer.Fax))", "score": -0.10320950604000245, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Lisbon), Customer.Fax),Customer.Fax))", "score": -0.17940617284693872, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))", "score": -0.28366609357824163, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Lisbon), Customer.Fax),Customer.Fax))", "score": -0.5497917600623623, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Lisbon), Customer.Email),Customer.Fax))", "score": -0.6312717420696572, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,Lisbon), Customer.Fax),Customer.Fax))", "score": -0.6478518315307156, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Lisbon), Customer.Fax),Employee.Fax))", "score": -0.6893252248592034, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Lisbon), Customer.Fax),Album.Title))", "score": -0.7005002016849176, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Lisbon), Customer.Email),Customer.Fax))", "score": -0.7074684088765935, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Lisbon), Customer.State),Customer.Fax))", "score": -0.7106775266765908, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Lisbon), Customer.Fax),Customer.Fax))", "score": -0.7134053774825588, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,Lisbon), Customer.Fax),Customer.Fax))", "score": -0.7487144537917629, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Lisbon), Customer.Fax),Employee.Fax))", "score": -0.7655218916661397, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Lisbon), Customer.Fax),Album.Title))", "score": -0.7766968684918538, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Lisbon), Customer.Phone),Customer.Fax))", "score": -0.7791244012951211, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 123, "beams": [{"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.City),Employee.City))", "score": -0.20849246405850863, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.City),Employee.Title))", "score": -0.3076937856603763, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Title),Employee.City))", "score": -0.4260898331631324, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Callahan), Employee.City),Employee.City))", "score": -0.46297753559360344, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.City))", "score": -0.5053778985966346, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Title),Employee.Title))", "score": -0.5252911547650001, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.City),Employee.HireDate))", "score": -0.5294901343513629, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.City),Employee.BirthDate))", "score": -0.5298568817306659, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.City))", "score": -0.5346915091955107, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Callahan), Employee.City),Employee.City))", "score": -0.5470233447436097, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Phone),Employee.City))", "score": -0.5476581553448341, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Callahan), Employee.City),Employee.Title))", "score": -0.5524646264502188, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Callahan), Employee.City),Employee.HireDate))", "score": -0.5594385910001708, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Callahan), Employee.City),Employee.BirthDate))", "score": -0.5599786429974274, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.HireDate),Employee.City))", "score": -0.5656196574200294, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 124, "beams": [{"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Genre.Name),Genre.Name))", "score": -0.13341618782642922, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Genre.Name),Genre.Name))", "score": -0.1743714860255611, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Genre),Track.GenreId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.20404578305372897, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Genre.Name),Genre.Name))", "score": -0.22546916924912644, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))", "score": -0.2257876808453503, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,InvoiceLine.TrackId), Genre.Name),Genre.Name))", "score": -0.23035646155777073, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Genre),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2382429188983594, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,InvoiceLine.TrackId), Genre.Name),Genre.Name))", "score": -0.2560619157541554, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.25617787723053415, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.GenreId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Genre.Name),Genre.Name))", "score": -0.2569577839874995, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))", "score": -0.27133220161768756, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))", "score": -0.27294467980321097, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId), Genre.Name),Genre.Name))", "score": -0.29262166231864184, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))", "score": -0.31652067707123627, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.32428483716479095, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 125, "beams": [{"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))", "score": -0.13989066566153388, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),merge(getData(Track),getData(Genre),Track.GenreId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.18884387681612058, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),merge(getData(Track),getData(Genre),Track.GenreId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.20779059213190262, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),Track.GenreId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.21552228670329046, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2189788088034702, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),Track.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.22572084965540978, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.22917737175558955, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),Track.GenreId,InvoiceLine.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.25379807650486647, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,InvoiceLine.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.25725459860504624, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),Track.GenreId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2601894090958219, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.26364593119600166, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),Track.GenreId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2638604348702556, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2673169645238765, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.GenreId,Track.MediaTypeId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))", "score": -0.3152133757380682, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.MediaTypeId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))", "score": -0.3270608884330928, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 126, "beams": [{"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.Bytes),Track.Bytes)", "score": -0.10022539755754965, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Bytes),Track.Bytes)", "score": -0.14359609226857037, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.19897330833223428, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.TrackId),Track.Bytes)", "score": -0.2347606640069293, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.2414792653502735, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Employee.BirthDate),Track.Bytes)", "score": -0.2651311155681526, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Employee.BirthDate),Track.Bytes)", "score": -0.2843600084222537, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Employee.Email),Track.Bytes)", "score": -0.30397805251821186, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.TrackId),Track.Bytes)", "score": -0.3132572390814145, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.Bytes)", "score": -0.3165747263963004, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Employee.Email),Track.Bytes)", "score": -0.33299172363706103, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Invoice.Total),Track.Bytes)", "score": -0.34876737968678007, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.Bytes)", "score": -0.35532570169909217, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Playlist.Name),Track.Bytes)", "score": -0.3759500837931049, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Invoice.Total),Track.Bytes)", "score": -0.38068121626951945, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 127, "beams": [{"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.20314602038620297, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),Track.MediaTypeId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.21528441184409405, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),Track.GenreId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.2258235367971371, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.241362637920417, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.2535010293783081, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.GenreId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.26404015433135114, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.2673512023629621, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2801687521029919, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),Track.Name))", "score": -0.28277300500701325, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),Track.GenreId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.2920429872468362, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),Track.MediaTypeId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),Track.Name))", "score": -0.2949113964649043, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.295047230373471, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.29870597202763566, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),Track.MediaTypeId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.2988470857655411, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.PlaylistId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.3018363526255877, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 128, "beams": [{"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))", "score": -0.04438588678021915, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.City),Employee.Phone))", "score": -0.3235505530901719, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.FirstName),Employee.Phone))", "score": -0.4771173904009629, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,Calgary), Employee.Phone),Employee.Phone))", "score": -0.4831022853322793, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.PostalCode),Employee.Phone))", "score": -0.48991581893642433, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,Calgary), Employee.Phone),Employee.Phone))", "score": -0.49476566261728294, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Artist.Name),Employee.Phone))", "score": -0.5521346936293412, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,Calgary), Employee.Phone),Employee.Phone))", "score": -0.5917113954492379, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Calgary), Employee.Phone),Employee.Phone))", "score": -0.6176875764795113, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.LastName),Employee.Phone))", "score": -0.6264122734137345, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.FirstName))", "score": -0.6288850410201121, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,Calgary), Employee.Phone),Employee.Phone))", "score": -0.6393057043023873, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Country),Employee.Phone))", "score": -0.6446149954863358, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,Calgary), Employee.Phone),Employee.Phone))", "score": -0.654337936110096, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.City))", "score": -0.6604256136633921, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 129, "beams": [{"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.024594212209194666, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.28073766108354903, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,<,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.6422411434141395, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.6466420523611305, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.6768155554564146, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.Total))", "score": -0.7123008827002195, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.BillingCity),Invoice.InvoiceDate))", "score": -0.7253332158106787, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Customer.City))", "score": -0.7422464946539549, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.Total),Invoice.InvoiceDate))", "score": -0.7583112736720068, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Track.UnitPrice))", "score": -0.7680589417250303, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.7707237231334148, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.7982059943278728, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.8890732752879558, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,<,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.8983845922884939, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.9027855012354848, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 130, "beams": [{"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.005472095665020283, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.7187583718708718, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Album.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.7495713897959845, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Track.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.8149845256575043, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Album.Title,Album.AlbumId), Album.Title),Album.Title))", "score": -0.8401537445921076, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.845797543582617, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.8533609526165485, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Track),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.9202707772445782, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Album.Title,Track.AlbumId), Album.Title),Album.Title))", "score": -0.9363798983787401, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Track),Album.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.9510837951696909, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Album.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.9511545616172883, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.9576490689155489, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.9856205842300907, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Album.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -1.0554426779162887, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Track.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -1.083852139383561, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 131, "beams": [{"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),Track.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.24062812796251293, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)", "score": -0.25225454278307213, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.2539927229543553, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)", "score": -0.2909014933529795, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),Track.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.291564940924855, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,!=,2013-01-15 00:00:00), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.2926396735242627, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.29574712642916506, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),Track.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3224943227538415, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),Track.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3229743090407298, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,1.99),Track.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.33774928049852804, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,1.99),Track.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.34286522785458323, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3466839363498204, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),Track.UnitPrice,<,2013-01-15 00:00:00), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3504629726311818, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),Track.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3600575074789794, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)", "score": -0.3628380214360369, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 132, "beams": [{"orig_question": "What is the title of the album with the longest sold track that has a unit price different from 0.99?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Album.Title,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.17572127035686283, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album with the longest sold track that has a unit price different from 0.99?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Album.Title,=,0.99),getData(Track),InvoiceLine.TrackId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.2180777402382336, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album with the longest sold track that has a unit price different from 0.99?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Album.Title,=,0.99),getData(Track),InvoiceLine.TrackId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.25915260555871744, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album with the longest sold track that has a unit price different from 0.99?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Album.Title,=,0.99),getData(Track),Track.AlbumId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.2951938618897922, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album with the longest sold track that has a unit price different from 0.99?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Album.Title,=,0.99),getData(Track),InvoiceLine.TrackId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3125134854714037, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album with the longest sold track that has a unit price different from 0.99?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Album.Title,=,0.99),Track.UnitPrice),Album.Title))", "score": -0.32037607629796927, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album with the longest sold track that has a unit price different from 0.99?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Album.Title,=,0.99),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.32518313896774054, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album with the longest sold track that has a unit price different from 0.99?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3286874154084887, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album with the longest sold track that has a unit price different from 0.99?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,=,0.99),Track.UnitPrice),Album.Title))", "score": -0.33607983004993314, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album with the longest sold track that has a unit price different from 0.99?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,InvoiceLine.TrackId),Album.Title,=,0.99),Track.UnitPrice),Album.Title))", "score": -0.3541372560802019, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album with the longest sold track that has a unit price different from 0.99?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Album.Title,=,0.99),InvoiceLine.UnitPrice),Album.Title))", "score": -0.3555200672288737, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album with the longest sold track that has a unit price different from 0.99?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Album.AlbumId),Album.Title,=,0.99),Track.UnitPrice),Album.Title))", "score": -0.36420612650188466, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album with the longest sold track that has a unit price different from 0.99?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,0.99),Track.UnitPrice),Album.Title))", "score": -0.3698410098321657, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album with the longest sold track that has a unit price different from 0.99?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,=,0.99),InvoiceLine.UnitPrice),Album.Title))", "score": -0.37122382098083756, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album with the longest sold track that has a unit price different from 0.99?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.GenreId),Album.Title,=,0.99),Track.UnitPrice),Album.Title))", "score": -0.3715663285282839, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 133, "beams": [{"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))", "score": -0.06792389290058054, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Country),Employee.Address))", "score": -0.2712057779135648, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Country))", "score": -0.27982829199754633, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Country),Employee.Country))", "score": -0.4831101770105306, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.State))", "score": -0.49476740942918696, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Customer.Address),Employee.Address))", "score": -0.5217296431364957, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.City))", "score": -0.558787447080249, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))", "score": -0.6227073576592375, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Invoice.BillingAddress))", "score": -0.655048113927478, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,T5K 2N1), Employee.Address),Employee.Address))", "score": -0.6563164763210807, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Composer,=,T5K 2N1), Employee.Address),Employee.Address))", "score": -0.6654020123241935, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Customer.Address))", "score": -0.6779725967498962, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Invoice.BillingAddress),Employee.Address))", "score": -0.6827841947379056, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Country),Employee.State))", "score": -0.6980492944421712, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Track.Milliseconds))", "score": -0.6992974697204772, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 134, "beams": [{"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.1755701921747301, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.17767575204472424, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.TrackId),Track.UnitPrice)", "score": -0.19715324007975418, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.TrackId),Track.Bytes)", "score": -0.20565124572462498, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.23748342112657597, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.2391038227454944, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2452758158980347, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.24736050323725983, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.2703676660212897, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)", "score": -0.2781600607927484, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.TrackId),Track.UnitPrice)", "score": -0.3082105231712097, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.TrackId),Track.UnitPrice)", "score": -0.3115353160467891, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)", "score": -0.31708421034270035, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.TrackId),Track.Bytes)", "score": -0.3185354037483332, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.32242813323892283, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 135, "beams": [{"orig_question": "In which cities do live customers named Barnett?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -0.04842147540291733, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Barnett), Customer.City),Customer.City))"}, {"orig_question": "In which cities do live customers named Barnett?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,Barnett), Customer.City),Customer.City))", "score": -0.33207063430018025, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Barnett), Customer.City),Customer.City))"}, {"orig_question": "In which cities do live customers named Barnett?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Barnett), Customer.City),Customer.City))", "score": -0.35026900523371296, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Barnett), Customer.City),Customer.City))"}, {"orig_question": "In which cities do live customers named Barnett?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Barnett), Customer.City),Customer.City))", "score": -0.5118110185212572, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Barnett), Customer.City),Customer.City))"}, {"orig_question": "In which cities do live customers named Barnett?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Barnett), Customer.City),Customer.City))", "score": -0.5209727609253605, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Barnett), Customer.City),Customer.City))"}, {"orig_question": "In which cities do live customers named Barnett?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Barnett), Customer.City),Customer.City))", "score": -0.5391711318588932, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Barnett), Customer.City),Customer.City))"}, {"orig_question": "In which cities do live customers named Barnett?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Barnett), Customer.City),Customer.City))", "score": -0.7007131451464375, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Barnett), Customer.City),Customer.City))"}, {"orig_question": "In which cities do live customers named Barnett?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,Barnett), Customer.City),Customer.City))", "score": -0.7041699295587023, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Barnett), Customer.City),Customer.City))"}, {"orig_question": "In which cities do live customers named Barnett?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Barnett), Customer.City),Customer.City))", "score": -0.7248392706460436, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Barnett), Customer.City),Customer.City))"}, {"orig_question": "In which cities do live customers named Barnett?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,!=,Barnett), Customer.City),Customer.City))", "score": -0.7694406812734087, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Barnett), Customer.City),Customer.City))"}, {"orig_question": "In which cities do live customers named Barnett?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,!=,Barnett), Customer.City),Customer.City))", "score": -0.8217023764227633, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Barnett), Customer.City),Customer.City))"}, {"orig_question": "In which cities do live customers named Barnett?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,<=,Barnett), Customer.City),Customer.City))", "score": -0.8399422340517049, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Barnett), Customer.City),Customer.City))"}, {"orig_question": "In which cities do live customers named Barnett?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.City))", "score": -0.9804641100860474, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Barnett), Customer.City),Customer.City))"}, {"orig_question": "In which cities do live customers named Barnett?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.PostalCode))", "score": -0.9823932237230762, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Barnett), Customer.City),Customer.City))"}, {"orig_question": "In which cities do live customers named Barnett?", "inferred_code": "done(extractValues(distinct(getData(Customer), Invoice.BillingCity),Customer.City))", "score": -0.999390741485014, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Barnett), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 136, "beams": [{"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,=,11043559), Artist.Name),Artist.Name))", "score": -0.10953567489111593, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,=,11043559), Artist.Name),Artist.Name))", "score": -0.11082698543718561, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,11043559), Artist.Name),Artist.Name))", "score": -0.17245220614133303, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,<=,11043559), Artist.Name),Artist.Name))", "score": -0.23104089076143608, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.23640673166891557, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.24182660250055135, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Track.TrackId),Track.Bytes,=,11043559), Artist.Name),Artist.Name))", "score": -0.3067364272055316, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Invoice.InvoiceId),Track.Bytes,=,11043559), Artist.Name),Artist.Name))", "score": -0.31554018205384055, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Artist),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,=,11043559), Artist.Name),Artist.Name))", "score": -0.3566141466711342, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Track.TrackId),Track.Bytes,<=,11043559), Artist.Name),Artist.Name))", "score": -0.36836164790967907, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Invoice.InvoiceId),Track.Bytes,<=,11043559), Artist.Name),Artist.Name))", "score": -0.37716540275798793, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Album.AlbumId),Track.Bytes,=,11043559), Artist.Name),Artist.Name))", "score": -0.3900941921512384, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId),Track.Bytes,=,11043559), Artist.Name),Artist.Name))", "score": -0.4034779460246394, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Artist),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,11043559), Artist.Name),Artist.Name))", "score": -0.4182393673752816, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,=,11043559), Artist.Name),Employee.Phone))", "score": -0.48041771526468957, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 137, "beams": [{"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8271418), Track.Composer),Track.Composer))", "score": -0.0419018370998856, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8271418), Track.Composer),Track.Composer))", "score": -0.38369673210809196, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8271418),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.40249564115103853, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8271418),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.4102976523517258, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8271418),getData(Track),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.4601451817858687, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8271418),getData(Track),Track.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.46794719298655596, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,8271418),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.47258634669044314, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,8271418),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.484259092333044, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,8271418),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.4926293711036559, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8271418),getData(Track),Track.AlbumId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.5008364234135251, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,8271418),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.5024918235016466, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,8271418),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.5043021167462568, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8271418),getData(Track),Track.AlbumId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.508638425684708, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,8271418),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.514164560214743, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,8271418),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.5225348389853549, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 138, "beams": [{"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))", "score": -0.04715787668101257, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))", "score": -0.37921534768192783, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Fax))", "score": -0.37985146280698245, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))", "score": -0.40699035161538566, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,1016), Customer.Email),Customer.Email))", "score": -0.44582090575568145, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingPostalCode,=,1016), Customer.Email),Customer.Email))", "score": -0.44875928502538415, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Address),Customer.Email))", "score": -0.4745345027404255, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingPostalCode,=,1016), Customer.Email),Customer.Email))", "score": -0.4765342889588419, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.State))", "score": -0.49477893349103397, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))", "score": -0.5000891338250091, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.State),Customer.Email))", "score": -0.5180311114745564, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Address))", "score": -0.5257293605463929, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))", "score": -0.5278640718601088, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Fax),Customer.Email))", "score": -0.5637083859401173, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.PostalCode,=,1016), Customer.Email),Customer.Fax))", "score": -0.5960475275958969, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 139, "beams": [{"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))", "score": -0.03799253561210569, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Phone))", "score": -0.6492893300699325, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Album.Title))", "score": -0.6982014904154491, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Fax))", "score": -0.7281672620991012, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))", "score": -0.8524395361231117, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.LastName))", "score": -0.8754325339357638, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Album.Title),Customer.Phone))", "score": -0.9274120275405829, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Company))", "score": -0.9372681559148861, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Employee.Phone))", "score": -0.978253726315999, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),MediaType.Name))", "score": -1.030864368070951, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Phone))", "score": -1.0415204059370156, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.Phone))", "score": -1.049585918414937, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.City))", "score": -1.0533984780654495, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.State),Customer.Phone))", "score": -1.0744400691343452, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Phone))", "score": -1.0936724551858086, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 140, "beams": [{"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.AlbumId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u2019s Music),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.2496102616676505, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u2019s Music),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.25322182367905166, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.2770949742386555, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Track.TrackId),Playlist.Name,=,90\u2019s Music), Track.Bytes),Track.Bytes)", "score": -0.27726831946198516, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Track.TrackId),Playlist.Name,=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.2882218537150169, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Track.TrackId),Playlist.Name,!=,90\u2019s Music), Track.Bytes),Track.Bytes)", "score": -0.29691254338318884, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Track.TrackId),Playlist.Name,!=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.3078660776362206, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,90\u2019s Music), Track.Bytes),Track.Bytes)", "score": -0.3080956985578905, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Track.TrackId),Playlist.Name,=,90\u2019s Music), Employee.BirthDate),Track.Bytes)", "score": -0.3123038127485999, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.31904923281092223, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u2019s Music),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3202636746089273, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.TrackId,Track.TrackId),Playlist.Name,!=,90\u2019s Music), Track.Bytes),Track.Bytes)", "score": -0.356892713063261, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.TrackId,Track.TrackId),Playlist.Name,=,90\u2019s Music), Track.Bytes),Track.Bytes)", "score": -0.36611704272758777, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.TrackId,Track.TrackId),Playlist.Name,!=,90\u2019s Music), Track.Bytes),Track.Bytes)", "score": -0.3777762516659475, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,!=,90\u2019s Music),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), None),None)", "score": -0.42367864860090315, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 141, "beams": [{"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.0709193627755592, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.24017454408543445, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),Track.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.24697735348352537, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2656919032689723, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.26821754258265185, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),InvoiceLine.InvoiceId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.2788610312258677, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),Track.AlbumId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.27943474236329324, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Track.TrackId),getData(Track),InvoiceLine.InvoiceId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.2886070700527909, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),InvoiceLine.TrackId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3035221573442472, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),getData(Track),InvoiceLine.InvoiceId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.304109521529759, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),InvoiceLine.TrackId,Genre.GenreId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.30604779665792675, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.3097036241542365, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.31045620077684977, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.31650643355232744, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.3172590101749407, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 142, "beams": [{"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,<=,MPEG audio file), Album.Title),Album.Title))", "score": -0.09167956640753153, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,MPEG audio file), Album.Title),Album.Title))", "score": -0.2125178820324863, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,MPEG audio file), Album.Title),Album.Title))", "score": -0.23922582430867922, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,!=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.25491477219285225, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,<=,MPEG audio file), Track.Composer),Album.Title))", "score": -0.2789809636987034, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,<=,MPEG audio file), InvoiceLine.UnitPrice),Album.Title))", "score": -0.2886271542980813, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,13250848), Album.Title),Album.Title))", "score": -0.2979785787723488, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,<=,MPEG audio file), Album.AlbumId),Album.Title))", "score": -0.3210425722069165, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,<=,MPEG audio file), Track.UnitPrice),Album.Title))", "score": -0.3340223912952008, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,<=,MPEG audio file), InvoiceLine.InvoiceLineId),Album.Title))", "score": -0.3395043904344354, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,!=,13250848), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3489463395422705, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,!=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.352590244362009, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,<,MPEG audio file), Album.Title),Album.Title))", "score": -0.35496228461089924, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,!=,13250848), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.39394582027515396, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),MediaType.Name,<=,MPEG audio file), Album.Title),Album.Title))", "score": -0.4342255885345368, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 143, "beams": [{"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Mundo Livre S/A),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.UnitPrice))", "score": -0.11516354033070254, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Mundo Livre S/A),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.UnitPrice))", "score": -0.12944851461330184, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Mundo Livre S/A),getData(Track),Album.AlbumId,Track.AlbumId),Track.UnitPrice),Track.UnitPrice))", "score": -0.1918564527580197, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,!=,Mundo Livre S/A),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Bytes),Track.UnitPrice))", "score": -0.26208064601603026, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,!=,Mundo Livre S/A),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.UnitPrice))", "score": -0.2762399439522565, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))", "score": -0.291986183996394, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,!=,Mundo Livre S/A),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.UnitPrice))", "score": -0.3014795556238529, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.UnitPrice),Track.UnitPrice))", "score": -0.3016044868535917, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Mundo Livre S/A),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.UnitPrice))", "score": -0.3145216835169464, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.AlbumId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))", "score": -0.3154328747762015, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.AlbumId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.UnitPrice),Track.UnitPrice))", "score": -0.31869248745004175, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Mundo Livre S/A),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.UnitPrice))", "score": -0.355943928654311, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,!=,Mundo Livre S/A),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.UnitPrice),Track.UnitPrice))", "score": -0.3589419050500921, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Mundo Livre S/A),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.UnitPrice))", "score": -0.36487535706128593, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,!=,Mundo Livre S/A),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.UnitPrice),Track.UnitPrice))", "score": -0.3690738004769413, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 144, "beams": [{"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))", "score": -0.270876093512539, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),getData(Employee),InvoiceLine.InvoiceId,Employee.EmployeeId),Invoice.Total),Employee.Address))", "score": -0.3245326573835514, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),getData(Invoice),InvoiceLine.InvoiceId,Employee.EmployeeId),Invoice.Total),Employee.Address))", "score": -0.3266415067395208, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.Total,<,3.96),Invoice.Total),Employee.Country))", "score": -0.3297636638342158, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(merge(filter(getData(Invoice),Invoice.Total,<,3.96),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.Address))", "score": -0.332812402932927, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.Total),Employee.Address))", "score": -0.33389939907284477, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId),Invoice.Total),Employee.Address))", "score": -0.3360082484288141, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(merge(filter(getData(Invoice),Invoice.Total,<,3.96),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.Country))", "score": -0.37423837470595195, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.Total,<,3.96),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.Total),Employee.Address))", "score": -0.37917478979929914, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.Total,<,3.96),Invoice.Total),Employee.State))", "score": -0.3823439793552116, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),getData(Employee),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total),Employee.Address))", "score": -0.39569419895714203, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total),Employee.Address))", "score": -0.39780304831311136, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),getData(Employee),Customer.SupportRepId,Customer.CustomerId),Invoice.Total),Employee.Address))", "score": -0.4050609406464354, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(merge(filter(getData(Invoice),Invoice.Total,<,3.96),merge(getData(Customer),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.Address))", "score": -0.4058215616951895, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),getData(Invoice),Customer.SupportRepId,Customer.CustomerId),Invoice.Total),Employee.Address))", "score": -0.4071697900024047, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 145, "beams": [{"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,9640349), Playlist.Name),Playlist.Name))", "score": -0.14456339260721293, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,!=,9640349), Playlist.Name),Playlist.Name))", "score": -0.195480491158839, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>,9640349), Playlist.Name),Playlist.Name))", "score": -0.21983542567798628, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,9640349), Playlist.Name),Track.Name))", "score": -0.2371231544542243, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,9640349),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.24119257822554982, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,9640349),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2557415446537434, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,9640349), Playlist.Name),Playlist.Name))", "score": -0.2590002354263481, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,9640349), Playlist.Name),Playlist.Name))", "score": -0.27726787168162853, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,!=,9640349), Playlist.Name),Track.Name))", "score": -0.2880402530058504, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<,9640349), Playlist.Name),Playlist.Name))", "score": -0.3071033921247991, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>,9640349), Playlist.Name),Track.Name))", "score": -0.3123951875249977, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,Playlist.PlaylistId),Track.Bytes,<,9640349), Playlist.Name),Playlist.Name))", "score": -0.3133841120037605, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,!=,9640349), Playlist.Name),Playlist.Name))", "score": -0.3135211523807528, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<,9640349),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.31384905561988674, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,9640349), Playlist.Name),MediaType.Name))", "score": -0.31651038161762507, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 146, "beams": [{"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.2294691478689786, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId),Track.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.24423770309745982, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId),Track.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.27211023708012577, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Protected MPEG-4 video file),getData(Album),Artist.ArtistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.27813376968612497, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Artist),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId),Track.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.28158718478902894, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.2961934572723514, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,Album.AlbumId),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId),Track.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.3006795969662946, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Protected MPEG-4 video file),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3034484500755876, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Protected MPEG-4 video file),getData(Album),Artist.ArtistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.30953735815920336, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,PlaylistTrack.PlaylistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.3111118709398416, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,PlaylistTrack.PlaylistId),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId),Track.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.31329903849279306, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,Album.AlbumId),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId),Track.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.328552101379288, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,Album.AlbumId),merge(getData(Artist),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId),Track.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.3380290250811303, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,Track.GenreId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.34060014801405814, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.3494204162848805, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 147, "beams": [{"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.09759537110039673, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.2616477383107849, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.UnitPrice,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.31295017132470093, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.3980473054380127, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.42276302704522095, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.Country),Employee.FirstName))", "score": -0.4422033063874551, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.5395158899755188, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.Phone))", "score": -0.5589228167937108, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.LastName))", "score": -0.567711283247263, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.5827495230169006, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.LastName),Employee.FirstName))", "score": -0.5835389129624673, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,2003-05-03 00:00:00), Employee.Country),Employee.FirstName))", "score": -0.6062556735978433, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.Country))", "score": -0.6098838344023534, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.6108111853518494, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Album.ArtistId,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.6158961428136536, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 148, "beams": [{"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Knocking At Your Back Door),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.262483574067122, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Knocking At Your Back Door),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.30603763973178444, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,1),getData(PlaylistTrack),Playlist.PlaylistId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3084099053149234, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(PlaylistTrack),Track.TrackId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,1), MediaType.Name),MediaType.Name))", "score": -0.3459657990668188, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,1),getData(PlaylistTrack),Track.TrackId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3519639709795858, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(PlaylistTrack),Playlist.PlaylistId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,1), MediaType.Name),MediaType.Name))", "score": -0.3605026977889442, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3649991181079158, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Knocking At Your Back Door),getData(PlaylistTrack),Genre.GenreId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.37760315042409015, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(PlaylistTrack),Invoice.InvoiceId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,Knocking At Your Back Door), MediaType.Name),MediaType.Name))", "score": -0.3818924055450339, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Track),Track.TrackId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,1), MediaType.Name),MediaType.Name))", "score": -0.38425845785439877, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(Track),Track.TrackId,Track.GenreId),Invoice.BillingAddress,=,1),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.38860039795717427, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,1),getData(PlaylistTrack),MediaType.MediaTypeId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3988310691273754, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(PlaylistTrack),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1), MediaType.Name),MediaType.Name))", "score": -0.4015733258075726, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,1),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.4085531746354109, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(PlaylistTrack),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,Track.GenreId),Invoice.BillingAddress,=,Knocking At Your Back Door), MediaType.Name),MediaType.Name))", "score": -0.41706847290738847, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 149, "beams": [{"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,!=,Milton Nascimento, Caetano Veloso),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2556109132613943, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,<,Milton Nascimento, Caetano Veloso), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.270796022664972, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)", "score": -0.27240217750599555, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,!=,Milton Nascimento, Caetano Veloso),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27654393863936294, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,<,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)", "score": -0.27828138856310325, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,<,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)", "score": -0.2837183759759956, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,!=,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.28853346239667504, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Milton Nascimento, Caetano Veloso), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.28906915205968703, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Milton Nascimento, Caetano Veloso), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2902739231657193, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)", "score": -0.2965545179578183, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,<,Milton Nascimento, Caetano Veloso), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.30159014148463975, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Milton Nascimento, Caetano Veloso),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3036078894902323, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,!=,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3094664877746437, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Milton Nascimento, Caetano Veloso),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3237726700229898, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Milton Nascimento, Caetano Veloso),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.32454093301578535, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 150, "beams": [{"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.23958742171979153, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.24810497139130028, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.2518957954441853, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Composer),Track.Name))", "score": -0.2544907952400972, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.UnitPrice),Track.Name))", "score": -0.2595588979850284, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Composer),Track.Name))", "score": -0.26300834491160596, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Composer),Track.Name))", "score": -0.26679916896449096, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.UnitPrice),Track.Name))", "score": -0.26807644765653715, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.UnitPrice),Track.Name))", "score": -0.27186727170942215, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,InvoiceLine.InvoiceId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.3498781639534101, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.3539652534060011, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.3575270861674996, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,InvoiceLine.InvoiceId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.35839571362491884, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.3587499380292607, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.3642736496621568, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 151, "beams": [{"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,cole porter), Track.Bytes),Track.Bytes))", "score": -0.1418181146173083, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,cole porter), Track.Milliseconds),Track.Bytes))", "score": -0.22481353680177563, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,cole porter), Track.Bytes),Track.Bytes))", "score": -0.31984181056304806, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))", "score": -0.3699118430404269, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,>=,cole porter), Track.Bytes),Track.Bytes))", "score": -0.37699026899917953, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,cole porter), Track.Milliseconds),Track.Bytes))", "score": -0.4028372327475154, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Milliseconds),Track.Bytes))", "score": -0.4529072652248942, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,>=,cole porter), Track.Milliseconds),Track.Bytes))", "score": -0.45998569118364685, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,cole porter), Track.UnitPrice),Track.Bytes))", "score": -0.5175790200619304, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.TrackId),Track.Milliseconds)", "score": -0.5465396823508485, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,cole porter), Track.Bytes),Track.Bytes))", "score": -0.5550139649449193, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,cole porter), Track.Bytes),Track.Bytes))", "score": -0.575450503328284, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>=,cole porter), Track.Bytes),Track.Bytes))", "score": -0.6050839974222981, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.TrackId),Track.Bytes)", "score": -0.6364805829885424, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,cole porter), Track.Milliseconds),Track.Bytes))", "score": -0.6380093871293866, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 152, "beams": [{"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Milliseconds)", "score": -0.12020630124158062, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.1632124578935164, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.19350963682487562, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.26276299662752084, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.2889228041992448, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.29306017555888003, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.2982473179723322, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),merge(merge(getData(Invoice),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.3005209523961196, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Invoice.InvoiceId),Track.Milliseconds)", "score": -0.306401694354424, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Invoice.InvoiceId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.31921998313060407, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.32824566664576993, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.3298314005277665, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3457597636903926, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.Quantity)", "score": -0.37605694262175177, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.38847331230920057, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 153, "beams": [{"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(InvoiceLine),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.Name))", "score": -0.38244476353485235, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.Name))", "score": -0.38363879276631935, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(InvoiceLine),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.Name))", "score": -0.40275153482536047, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.Name))", "score": -0.40394556405682747, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(InvoiceLine),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.Name))", "score": -0.40703668416949007, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.Name))", "score": -0.4082307134009571, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),MediaType.Name,=,Tucson),merge(getData(InvoiceLine),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.Name))", "score": -0.41310526817649856, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),MediaType.Name,=,Tucson),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.Name))", "score": -0.41429929740796556, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),MediaType.Name,=,Tucson), InvoiceLine.Quantity),Track.Name))", "score": -0.4186907846130142, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),MediaType.Name,=,Tucson),merge(getData(InvoiceLine),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.Name))", "score": -0.42607672394809154, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),MediaType.Name,=,Tucson), Track.Name),Track.Name))", "score": -0.4270301658238533, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),MediaType.Name,=,Tucson),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.Name))", "score": -0.4272707531795586, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(InvoiceLine),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.Name))", "score": -0.42734342454358815, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),MediaType.Name,=,Tucson), InvoiceLine.Quantity),Track.Name))", "score": -0.42954386482988155, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(InvoiceLine),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Track.Name),Track.Name))", "score": -0.43374654940283425, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 154, "beams": [{"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.08857797543825192, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.12988392014217096, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.15070596919712098, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.1526657316071832, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.15662320738699229, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.18142165729204465, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.18322361465596215, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.19427319311888244, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.22272555011318362, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2440790023184471, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.25380821897115624, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2786331758681758, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.29833629608041234, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.33504505252641087, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Genre.Name),Track.GenreId))", "score": -0.3630047785296819, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 155, "beams": [{"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Andrew), Employee.Country),Employee.Country))", "score": -0.11950590633159663, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))", "score": -0.18638339065319087, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,Andrew), Employee.Country),Employee.Country))", "score": -0.3778513910651782, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Andrew), Employee.City),Employee.Country))", "score": -0.43643644251233127, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Andrew), Employee.Country),Employee.City))", "score": -0.4439968092769959, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Andrew), Invoice.BillingCountry),Employee.Country))", "score": -0.5022934953153708, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.City),Employee.Country))", "score": -0.5033139268339255, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.City))", "score": -0.5108742935985902, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Andrew), Employee.Country),Invoice.BillingCountry))", "score": -0.5242408736080506, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Andrew), Employee.Country),Employee.State))", "score": -0.5392570717663148, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Invoice.BillingCountry),Employee.Country))", "score": -0.5691709796369651, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Andrew), Employee.Country),Employee.Address))", "score": -0.5815976484150269, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Invoice.BillingCountry))", "score": -0.5911183579296448, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Andrew), Employee.Address),Employee.Country))", "score": -0.5934351960599997, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.State))", "score": -0.606134556087909, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 156, "beams": [{"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Track.Bytes),Track.Bytes))", "score": -0.1589358816228336, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Track.Bytes),Track.Bytes))", "score": -0.1756532047861021, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Track.Bytes),Playlist.Name))", "score": -0.21830672498058284, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Track.Bytes),Playlist.Name))", "score": -0.22750979283483647, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Track.Bytes),Track.Bytes))", "score": -0.23972211353699524, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Track.Bytes),Track.Bytes))", "score": -0.25085119661683086, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Track.Bytes),Track.Bytes))", "score": -0.2763582426541445, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Track.Bytes),Track.Bytes))", "score": -0.28748732573398006, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Playlist),InvoiceLine.InvoiceId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Track.Bytes),Track.Bytes))", "score": -0.2914963370447511, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Track.Bytes),Track.Name))", "score": -0.29344061480027234, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Track.Bytes),Track.Name))", "score": -0.29364743059308246, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Track.Bytes),Track.Bytes))", "score": -0.29420459887538836, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Track.Bytes),Track.Bytes))", "score": -0.29884558462227834, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Track.Bytes),Playlist.Name))", "score": -0.30428423024784723, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Track.Name),Track.Bytes))", "score": -0.3088901000488467, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 157, "beams": [{"orig_question": "What is the average track rice on invoices made by employees not in Edmonton?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Edmonton),getData(Invoice),Invoice.InvoiceId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.18597709392563566, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Edmonton),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track rice on invoices made by employees not in Edmonton?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Edmonton),getData(Invoice),Invoice.InvoiceId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.18971414699807884, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Edmonton),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track rice on invoices made by employees not in Edmonton?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Edmonton),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.19368331444097486, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Edmonton),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track rice on invoices made by employees not in Edmonton?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Edmonton),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.19656339368976564, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Edmonton),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track rice on invoices made by employees not in Edmonton?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,!=,Edmonton),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.2027387041639079, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Edmonton),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track rice on invoices made by employees not in Edmonton?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Artist.Name,!=,Edmonton),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.20568600185702157, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Edmonton),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track rice on invoices made by employees not in Edmonton?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Edmonton),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.20722226251667142, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Edmonton),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track rice on invoices made by employees not in Edmonton?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,!=,Edmonton),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.21549430043501486, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Edmonton),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track rice on invoices made by employees not in Edmonton?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Edmonton),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), None),None)", "score": -0.21638724565165338, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Edmonton),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track rice on invoices made by employees not in Edmonton?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Edmonton),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.23001741487712238, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Edmonton),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track rice on invoices made by employees not in Edmonton?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Edmonton),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.23132308360091897, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Edmonton),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track rice on invoices made by employees not in Edmonton?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Edmonton),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.23686665502069176, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Edmonton),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track rice on invoices made by employees not in Edmonton?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Edmonton),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2390293041162582, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Edmonton),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track rice on invoices made by employees not in Edmonton?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.City,!=,Edmonton),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2846685520985781, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Edmonton),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track rice on invoices made by employees not in Edmonton?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,!=,Edmonton), Track.TrackId),Track.UnitPrice)", "score": -0.2900349370224191, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Edmonton),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 158, "beams": [{"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,On-The-Go 1),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3292530009336367, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Album.ArtistId),Track.Composer,=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones), Track.TrackId),Track.Bytes)", "score": -0.3455934595741864, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.36005677294596233, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),getData(PlaylistTrack),Artist.ArtistId,Album.ArtistId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.36518172918401026, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,On-The-Go 1),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3681338272229563, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Album.ArtistId),Track.Bytes,=,On-The-Go 1), Track.TrackId),Track.Bytes)", "score": -0.37227605883186127, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,On-The-Go 1),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3758548304308046, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.38393188470779854, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Album.ArtistId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Bytes)", "score": -0.3871028144603487, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.38873327731506585, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Album.ArtistId),Track.Composer,=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones), Track.TrackId),Track.Bytes)", "score": -0.3938055427169592, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Track),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3955907640141332, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Album.ArtistId),Track.Composer,=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones), Track.TrackId),Track.Bytes)", "score": -0.3961016144419053, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(Album),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,On-The-Go 1),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.39681034080763, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Album.ArtistId),Track.Composer,=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones), Track.TrackId),Track.Bytes)", "score": -0.41446425689758276, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 159, "beams": [{"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.02423010063600544, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2175980816171575, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2314088850355862, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.233367229767864, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.24042228078349565, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Artist.Name,=,Iron Maiden),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2692313693732958, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Iron Maiden), Genre.Name),Genre.Name))", "score": -0.2707716777670431, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2739233028092989, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Track.GenreId))", "score": -0.3112929309710773, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Track.Name))", "score": -0.31289659701484995, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3421765773527203, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.34398622143220187, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.3490932761221531, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.3568473066356045, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Track.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.37880487068440066, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 160, "beams": [{"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))", "score": -0.024456296908283548, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Margaret), Employee.Email),Employee.Email))", "score": -0.372007769393349, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.FirstName,=,Margaret), Employee.Email),Employee.Email))", "score": -0.5399723470682147, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Customer.Email),Employee.Email))", "score": -0.5720575254881624, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.BirthDate))", "score": -0.5858248689683023, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Margaret), Employee.Email),Employee.Email))", "score": -0.6062622488016132, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.FirstName))", "score": -0.6300491312058512, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Customer.Email))", "score": -0.6436852434189859, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.BirthDate),Employee.Email))", "score": -0.647431532713199, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Track.Bytes))", "score": -0.6554801681550089, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.FirstName),Employee.Email))", "score": -0.6733405989134553, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Fax))", "score": -0.6878071644814554, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.State))", "score": -0.6960820773156229, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Track.Bytes),Employee.Email))", "score": -0.7563776176893953, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Address),Employee.Email))", "score": -0.7726845544302705, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 161, "beams": [{"orig_question": "What are the last names of the employees living in Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))", "score": -0.03140685475591454, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees living in Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Track.Name))", "score": -0.40051720059636864, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees living in Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,Canada), Employee.LastName),Employee.LastName))", "score": -0.4425767394823197, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees living in Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Canada), Employee.LastName),Employee.LastName))", "score": -0.49961492746297154, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees living in Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.FirstName))", "score": -0.547752474911249, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees living in Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Canada), Employee.LastName),Employee.LastName))", "score": -0.5622691544813279, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees living in Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Genre.Name))", "score": -0.5682395449948672, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees living in Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Genre.GenreId))", "score": -0.5870154253316286, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees living in Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.FirstName),Employee.LastName))", "score": -0.5874035253764305, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees living in Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,!=,Canada), Employee.LastName),Employee.LastName))", "score": -0.6378359769114468, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees living in Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Customer.LastName))", "score": -0.6452715746236208, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees living in Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Track.GenreId))", "score": -0.6580554596257571, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees living in Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Artist.ArtistId))", "score": -0.7519554845166567, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees living in Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.PostalCode),Employee.LastName))", "score": -0.7585329904795799, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees living in Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.Title))", "score": -0.7597174397778872, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 162, "beams": [{"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.UnitPrice,=,0.99), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3200605537055637, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.UnitPrice,=,0.99), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.32488548826670144, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.UnitPrice,=,0.99), Track.Milliseconds),Track.Milliseconds)", "score": -0.4011560108267045, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.UnitPrice,=,0.99), Track.Milliseconds),Track.Milliseconds)", "score": -0.40598094538784224, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.TrackId),Track.UnitPrice,=,0.99), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.42211589236114566, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.TrackId),Track.UnitPrice,=,0.99), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.42694082692228336, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,=,0.99), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.4551690133662261, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.UnitPrice,=,0.99), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.45552628315908694, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.UnitPrice,=,0.99), Track.Milliseconds),Track.Milliseconds))", "score": -0.45895108253249534, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice),Track.Milliseconds))", "score": -0.46360472595019936, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice),Track.Milliseconds))", "score": -0.46735992672597854, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice),Track.Name))", "score": -0.49087752901732784, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice),Track.Name))", "score": -0.494632729793107, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),Album.Title,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice),Track.Milliseconds))", "score": -0.5004389798657253, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),Album.Title,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice),Track.Milliseconds))", "score": -0.5041941806415045, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 163, "beams": [{"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))", "score": -0.3717494463935509, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,Riotur), Customer.State),Customer.State))", "score": -0.3789743638053551, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Riotur), Customer.State),Customer.State))", "score": -0.38392584085613635, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Company,=,Riotur), Customer.State),Customer.State))", "score": -0.43952231913954165, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Riotur), Customer.State),Customer.State))", "score": -0.44674723655134585, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.FirstName,=,Riotur), Customer.State),Customer.State))", "score": -0.4516987136021271, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Riotur), Customer.State),Customer.State))", "score": -0.5117224311843529, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Riotur), Customer.State),Customer.State))", "score": -0.5289837574973717, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Employee.State))", "score": -0.5433873391166344, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,Riotur), Customer.State),Employee.State))", "score": -0.5506122565284386, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Riotur), Customer.State),Employee.State))", "score": -0.5555637335792198, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Riotur), Customer.State),Customer.State))", "score": -0.5633458948150292, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Invoice.BillingState),Customer.State))", "score": -0.5783472663179055, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Country,=,Riotur), Customer.State),Customer.State))", "score": -0.5794953039303437, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,Riotur), Customer.State),Customer.State))", "score": -0.5841790294662133, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 164, "beams": [{"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))", "score": -0.09195039073529188, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,VV), Customer.FirstName),Customer.FirstName))", "score": -0.25162087405624334, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.Phone))", "score": -0.3180703895777697, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,VV), Customer.FirstName),Customer.FirstName))", "score": -0.4266169967741007, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.LastName))", "score": -0.44929144556226674, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,VV), Customer.FirstName),Customer.Phone))", "score": -0.47774087289872114, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.Email))", "score": -0.5334610717982287, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.State,=,VV), Customer.FirstName),Customer.FirstName))", "score": -0.5356833639234537, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Employee.Phone))", "score": -0.6003909784049029, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,VV), Customer.FirstName),Customer.LastName))", "score": -0.6089619288832182, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Employee.FirstName))", "score": -0.6163806396216387, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.Email),Customer.FirstName))", "score": -0.6168461570196087, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,VV), Customer.FirstName),Customer.Phone))", "score": -0.6527369956165785, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.Country),Customer.FirstName))", "score": -0.6610083112173015, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.Fax))", "score": -0.6689857917517656, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 165, "beams": [{"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.06230732389667537, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Track.Name),Track.Name))", "score": -0.35048327465483453, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),Track.GenreId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.36997765436636854, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.41591616407378124, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),Track.GenreId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.417044618635118, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),Track.GenreId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.4309465407131728, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),Track.GenreId,PlaylistTrack.TrackId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.43561746507463356, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),PlaylistTrack.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.4383712456031373, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.44385803815572195, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.46298312834253064, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.47688505042058543, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),Track.GenreId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.4780135387617529, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),Track.GenreId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.4794753426600481, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),Track.GenreId,PlaylistTrack.TrackId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.48268450188695383, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Name),Track.Name))", "score": -0.5394535424275091, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 166, "beams": [{"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))", "score": -0.12008738517579332, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,!=,FL), Customer.City),Customer.City))", "score": -0.22164463624176278, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Invoice.BillingCity),Customer.City))", "score": -0.2644581124168326, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,!=,FL), Invoice.BillingCity),Customer.City))", "score": -0.36601536348280206, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,!=,FL), Customer.City),Customer.City))", "score": -0.4023276520874788, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,FL), Customer.City),Customer.City))", "score": -0.5038849031534482, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,!=,FL), Invoice.BillingCity),Customer.City))", "score": -0.5466983793285181, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.PostalCode),Customer.City))", "score": -0.5495473220926215, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.State,!=,FL), Customer.City),Customer.City))", "score": -0.5587586127203394, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.Company),Customer.City))", "score": -0.5915587916952063, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Invoice.InvoiceId),Customer.City))", "score": -0.5991195812803198, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Invoice.BillingCity))", "score": -0.6361291643679579, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Employee.City),Customer.City))", "score": -0.6436733975988318, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.Total,!=,FL), Customer.City),Customer.City))", "score": -0.6452212296408106, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,FL), Customer.City),Customer.City))", "score": -0.6474288068693568, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 167, "beams": [{"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))", "score": -0.03190454008472443, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Canada), Employee.Phone),Employee.Phone))", "score": -0.4158187881712365, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.City),Employee.Phone))", "score": -0.47298106557173014, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.PostalCode),Employee.Phone))", "score": -0.5095713437203813, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.FirstName),Employee.Phone))", "score": -0.5130173862580705, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,Canada), Employee.Phone),Employee.Phone))", "score": -0.570406504035418, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.Phone))", "score": -0.5764105022553849, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Artist.Name))", "score": -0.5889718072157848, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.FirstName))", "score": -0.6214364306670177, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Artist.Name),Employee.Phone))", "score": -0.626152545273726, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Customer.Phone))", "score": -0.6593417660933483, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.LastName))", "score": -0.6652352349501598, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Customer.Phone),Employee.Phone))", "score": -0.6935368478898454, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.City))", "score": -0.7136542336684215, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Canada), Employee.Phone),Employee.Phone))", "score": -0.7208928540949273, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 168, "beams": [{"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.Name),Album.Title))", "score": -0.269463984938908, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,One By One),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Track.UnitPrice),Album.Title))", "score": -0.3110076040283213, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.Name),Album.Title))", "score": -0.3150668715391202, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,One By One),getData(Track),InvoiceLine.TrackId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId), Track.UnitPrice),Album.Title))", "score": -0.3186112157618447, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Composer,!=,One By One), Track.Name),Album.Title))", "score": -0.34032733367276125, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Album),InvoiceLine.TrackId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Composer,!=,Jack's Mannequin & Mick Fleetwood), Track.Name),Album.Title))", "score": -0.3481477793864715, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.Name),Album.Title))", "score": -0.3545356066965462, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,One By One),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3549445358315756, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,One By One),getData(Track),InvoiceLine.TrackId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.362548147565099, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.Name),Album.Title))", "score": -0.36300577851792054, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Jack's Mannequin & Mick Fleetwood),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.3648404092187651, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.Name),Album.Title))", "score": -0.3719110052087503, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,One By One),getData(Track),InvoiceLine.TrackId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.37244401153823736, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,One By One),getData(Album),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Track.UnitPrice),Album.Title))", "score": -0.37427412080679867, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Composer,!=,One By One), Track.Name),Album.Title))", "score": -0.37874876629832216, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 169, "beams": [{"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))", "score": -0.09974883975179674, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.1967052422951383, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.2911588192473573, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Album.Title))", "score": -0.5447963687147421, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Album.Title))", "score": -0.5953660174490946, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.6147207409630937, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Portugal), Customer.Fax),Album.Title))", "score": -0.6392499456669611, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.7299606889973802, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Email),Customer.Fax))", "score": -0.7858877388316614, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Employee.Fax))", "score": -0.8159106584753317, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Portugal), Customer.Email),Customer.Fax))", "score": -0.8803413157838804, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Portugal), Customer.Fax),Employee.Fax))", "score": -0.9103642354275507, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Album.Title),Customer.Fax))", "score": -0.9456159678775293, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Email))", "score": -0.9518049570287985, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.LastName))", "score": -0.9543007227148337, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 170, "beams": [{"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>,10.91),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.18130309893379473, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.2341868647855095, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,10.91),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2517288267157751, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,>,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.26952288981810407, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.28895042873157434, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.2896233176342231, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,>,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.3034472582029224, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),Invoice.Total,>,10.91),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.32127171308003044, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.3235476860190414, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91),Track.Bytes,>,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.3288272346515617, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>,10.91),Track.Bytes,>,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.33039535194350633, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,>=,10.91),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.33940276641378364, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.34545607329082967, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),Invoice.Total,>,10.91),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3637790903950763, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91),Track.Bytes,>,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.37736291876876193, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 171, "beams": [{"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.0938378500952981, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.0947906109722156, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.09704382577407011, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.17117796858898288, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.19900389806285645, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2648331796687807, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.2951657588870012, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.29609216476176853, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.29659702849401637, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.30157824798067523, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3203861417800615, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.32757281483631334, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.36134410698616287, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.37605192547698413, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.4136019388783543, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 172, "beams": [{"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.21756110511440294, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Album),Artist.ArtistId,Track.GenreId),Artist.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.24318153066057643, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Track.GenreId),Artist.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.28522134287148593, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Album),Artist.ArtistId,Track.GenreId),Artist.Name,!=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2857383913578179, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.286335864637087, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Album),getData(Album),Artist.ArtistId,Track.GenreId),Artist.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.323480188602324, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Track.GenreId),Artist.Name,!=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.32777820356872744, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3283756674339453, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3288927002763393, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.35618433941595856, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.36080430385711776, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.3734182641209054, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Album.Title,=,None),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.37803830387447396, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Album.ArtistId), Album.Title),Album.Title))", "score": -0.39241013994594165, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Artist.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.39270027269657193, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 173, "beams": [{"orig_question": "How many bytes do the tracks need which are not of Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Bytes),Track.Bytes))", "score": -0.07735867283242116, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker), Track.TrackId),Track.Bytes)"}, {"orig_question": "How many bytes do the tracks need which are not of Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.1182827352542858, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker), Track.TrackId),Track.Bytes)"}, {"orig_question": "How many bytes do the tracks need which are not of Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.2253910876689248, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker), Track.TrackId),Track.Bytes)"}, {"orig_question": "How many bytes do the tracks need which are not of Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker),merge(getData(Album),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Bytes),Track.Bytes))", "score": -0.2295229835685723, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker), Track.TrackId),Track.Bytes)"}, {"orig_question": "How many bytes do the tracks need which are not of Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Bytes),Track.Bytes))", "score": -0.2498265678750753, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker), Track.TrackId),Track.Bytes)"}, {"orig_question": "How many bytes do the tracks need which are not of Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker),merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.2823761004189871, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker), Track.TrackId),Track.Bytes)"}, {"orig_question": "How many bytes do the tracks need which are not of Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.29439183334006075, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker), Track.TrackId),Track.Bytes)"}, {"orig_question": "How many bytes do the tracks need which are not of Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.2986346628031046, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker), Track.TrackId),Track.Bytes)"}, {"orig_question": "How many bytes do the tracks need which are not of Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.3104601838712118, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker), Track.TrackId),Track.Bytes)"}, {"orig_question": "How many bytes do the tracks need which are not of Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker),merge(getData(Album),getData(Track),Album.AlbumId,Track.TrackId),Artist.ArtistId,Album.ArtistId), Track.Bytes),Track.Bytes))", "score": -0.316333988337897, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker), Track.TrackId),Track.Bytes)"}, {"orig_question": "How many bytes do the tracks need which are not of Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.AlbumId,Album.ArtistId), Track.Bytes),Track.Bytes))", "score": -0.3169761797446562, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker), Track.TrackId),Track.Bytes)"}, {"orig_question": "How many bytes do the tracks need which are not of Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.3234885292607647, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker), Track.TrackId),Track.Bytes)"}, {"orig_question": "How many bytes do the tracks need which are not of Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Track.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.33781932541021936, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker), Track.TrackId),Track.Bytes)"}, {"orig_question": "How many bytes do the tracks need which are not of Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker), Track.Bytes),Track.Bytes))", "score": -0.3747340557242633, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker), Track.TrackId),Track.Bytes)"}, {"orig_question": "How many bytes do the tracks need which are not of Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker),merge(getData(Album),getData(Track),Album.AlbumId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Track.Bytes),Track.Bytes))", "score": -0.3965387009710364, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 174, "beams": [{"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.State),Employee.BirthDate)", "score": -0.35277810161706796, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.BirthDate),Employee.BirthDate)", "score": -0.3616673852244352, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.FirstName),Employee.BirthDate)", "score": -0.3729385807901184, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Invoice),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.State),Employee.BirthDate)", "score": -0.3842130570341711, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.State),Track.UnitPrice)", "score": -0.39176812394621124, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Invoice),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.BirthDate),Employee.BirthDate)", "score": -0.3931023406415383, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.State),Employee.BirthDate)", "score": -0.3987130444509625, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.BirthDate),Track.UnitPrice)", "score": -0.4006574075535785, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Invoice),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.FirstName),Employee.BirthDate)", "score": -0.4043735362072215, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Email),Employee.BirthDate)", "score": -0.405177528203434, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.BirthDate),Employee.BirthDate)", "score": -0.40760232805832974, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.FirstName),Track.UnitPrice)", "score": -0.41192860311926166, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.State),Employee.BirthDate)", "score": -0.4137290164968404, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Track.TrackId),Employee.BirthDate)", "score": -0.41851004571202666, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.FirstName),Employee.BirthDate)", "score": -0.4188735236240129, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 175, "beams": [{"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,M\u00c3\u00b4nica Marianno), Track.Milliseconds),Track.Milliseconds))", "score": -0.17976080116022786, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Milliseconds),Track.Milliseconds))", "score": -0.3482228162369285, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),getData(Track),Album.AlbumId,Track.TrackId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.TrackId),Track.Milliseconds)", "score": -0.35429985984997736, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Milliseconds),Track.Milliseconds))", "score": -0.35640461019756475, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Milliseconds),Track.Milliseconds))", "score": -0.3967957788438464, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.TrackId),Track.Milliseconds)", "score": -0.39863789288954227, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Milliseconds),Track.Milliseconds))", "score": -0.4095722517582007, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Milliseconds),Track.Milliseconds))", "score": -0.4152395638009134, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Milliseconds),Track.Milliseconds))", "score": -0.41775404571883695, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Milliseconds),Track.Milliseconds))", "score": -0.4265843725572327, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),getData(Track),Album.AlbumId,Track.TrackId),Artist.Name,=,M\u00c3\u00b4nica Marianno), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.42885979564078625, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Milliseconds),Track.Milliseconds))", "score": -0.4357469835296581, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(PlaylistTrack),Invoice.InvoiceId,Album.ArtistId),getData(Track),Album.AlbumId,Track.TrackId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.TrackId),Track.Milliseconds)", "score": -0.4413786861365515, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),getData(PlaylistTrack),Invoice.InvoiceId,Album.ArtistId),getData(Track),Album.AlbumId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.4453544789581929, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Invoice.InvoiceId,Album.ArtistId),getData(Track),Album.AlbumId,Track.TrackId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.TrackId),Track.Milliseconds)", "score": -0.45684374622267565, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 176, "beams": [{"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.08353594553236816, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.17811232930762344, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.2122243133817392, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.23728008389482125, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.2640991991380854, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-07-03 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.2853517569359129, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),merge(getData(Track),getData(Genre),InvoiceLine.TrackId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.2952510304940654, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.30849999646566334, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),merge(getData(Track),getData(Genre),InvoiceLine.TrackId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.31428209794703427, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2013-07-03 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.3282297918331078, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.BirthDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.33526317870546757, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),InvoiceLine.TrackId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.34529220723061643, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,2013-07-03 00:00:00),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.34583457012832486, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.3586545037787117, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.3687465263237463, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 177, "beams": [{"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.17552025353984763, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.18313184549689757, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Track),Track.MediaTypeId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.2322105077724537, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Track),Track.AlbumId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.2443018295609147, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),Track.AlbumId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.2597077439230858, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.26373220797702224, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.26802082442027214, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Album),Track.MediaTypeId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.2697245471947345, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.27982290548626576, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.AlbumId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.28011210871965825, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.28300681105205555, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Playlist.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.2866263208882826, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2924592302894852, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(Track),getData(Track),Track.MediaTypeId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.307561997330156, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(Track),getData(Track),Track.AlbumId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3254173071586961, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 178, "beams": [{"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.158250704417715, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(getData(Invoice),InvoiceLine.Quantity,<=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.22634797122472278, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,None), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.35745300365724847, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(getData(Invoice),InvoiceLine.Quantity,<=,None), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.42555027046425625, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(getData(InvoiceLine),InvoiceLine.Quantity,<,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4386978389712744, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(getData(Invoice),InvoiceLine.Quantity,<,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5067951057782822, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,<=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5334095057906431, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(getData(Track),InvoiceLine.Quantity,<=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5337143699087441, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,>=,None),InvoiceLine.Quantity,<=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5603928251550759, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,>=,None),InvoiceLine.Quantity,<=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5768801626862007, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,>=,None),InvoiceLine.Quantity,<=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5787062778796048, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,>=,None),InvoiceLine.Quantity,<=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5897558560712737, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,>=,None),InvoiceLine.Quantity,<=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5986435144397374, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,>=,None),InvoiceLine.Quantity,<=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.6062432094445173, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(getData(InvoiceLine),InvoiceLine.Quantity,<,None), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.6379001382108079, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 179, "beams": [{"orig_question": "Are there tracks that don't are in the album with the title No Prayer For The Dying and were created by the artist Elis Regina?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Elis Regina),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.19553347625675474, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Are there tracks that don't are in the album with the title No Prayer For The Dying and were created by the artist Elis Regina?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Elis Regina),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Track.Name))", "score": -0.2248302471643368, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Are there tracks that don't are in the album with the title No Prayer For The Dying and were created by the artist Elis Regina?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))", "score": -0.26414918637938517, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Are there tracks that don't are in the album with the title No Prayer For The Dying and were created by the artist Elis Regina?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))", "score": -0.30134806299391387, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Are there tracks that don't are in the album with the title No Prayer For The Dying and were created by the artist Elis Regina?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina),Track.Name,!=,Elis Regina),getData(Track),Album.AlbumId,Track.AlbumId), Genre.Name),Track.Name))", "score": -0.30594600346562406, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Are there tracks that don't are in the album with the title No Prayer For The Dying and were created by the artist Elis Regina?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Elis Regina),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Composer),Track.Name))", "score": -0.31352778044155305, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Are there tracks that don't are in the album with the title No Prayer For The Dying and were created by the artist Elis Regina?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina),Track.Name,=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId), Genre.Name),Track.Name))", "score": -0.32266337260163325, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Are there tracks that don't are in the album with the title No Prayer For The Dying and were created by the artist Elis Regina?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Elis Regina),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.3269645783376285, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Are there tracks that don't are in the album with the title No Prayer For The Dying and were created by the artist Elis Regina?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Album.Title))", "score": -0.3272646091689991, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Are there tracks that don't are in the album with the title No Prayer For The Dying and were created by the artist Elis Regina?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Elis Regina),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Track.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.3354172121601472, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Are there tracks that don't are in the album with the title No Prayer For The Dying and were created by the artist Elis Regina?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Elis Regina),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),getData(Track),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.3363680105081018, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Are there tracks that don't are in the album with the title No Prayer For The Dying and were created by the artist Elis Regina?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina),Track.Composer,!=,Elis Regina),getData(Track),Album.AlbumId,Track.AlbumId), Genre.Name),Track.Name))", "score": -0.34233390945667413, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Are there tracks that don't are in the album with the title No Prayer For The Dying and were created by the artist Elis Regina?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Elis Regina),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),getData(Track),Track.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.3448206909068191, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Are there tracks that don't are in the album with the title No Prayer For The Dying and were created by the artist Elis Regina?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina),Artist.Name,!=,Elis Regina),getData(Track),Album.AlbumId,Track.AlbumId), Genre.Name),Track.Name))", "score": -0.34769005389585605, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Are there tracks that don't are in the album with the title No Prayer For The Dying and were created by the artist Elis Regina?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina),Track.Composer,=,Elis Regina),getData(Track),Album.AlbumId,Track.AlbumId), Genre.Name),Track.Name))", "score": -0.35905127001617076, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 180, "beams": [{"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Classical), Genre.Name),Genre.Name))", "score": -0.12744948642117873, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Classical), Genre.Name),Genre.Name))", "score": -0.12952430058279546, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(Track),PlaylistTrack.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.16677193298257528, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Classical), Genre.Name),Genre.Name))", "score": -0.18040076649374825, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.1875699924875111, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(Track),PlaylistTrack.TrackId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.19429509655521277, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.20040306386104928, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Genre.Name),Genre.Name))", "score": -0.21875482848558458, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.22012447814431083, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Invoice.BillingAddress),Genre.Name))", "score": -0.24663842396513122, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(Track),PlaylistTrack.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Invoice.BillingAddress),Genre.Name))", "score": -0.24703591330713812, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.25943545880117863, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.25976522009708797, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,!=,Classical), Genre.Name),Genre.Name))", "score": -0.2622579352668074, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.26246198779190993, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 181, "beams": [{"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Johnson), Employee.City),Employee.City))", "score": -0.2564274489059244, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Johnson), Employee.City),Employee.State))", "score": -0.2868975817336832, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Johnson), Employee.City),Employee.Country))", "score": -0.39209082416437013, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Johnson), Employee.City),Employee.BirthDate))", "score": -0.4035454659833704, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Johnson), Employee.City),Employee.Title))", "score": -0.40835347465417726, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Johnson), Employee.City),Employee.City))", "score": -0.4192051074578558, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Johnson), Employee.City),Employee.FirstName))", "score": -0.43341913513086183, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Johnson), Employee.City),Employee.State))", "score": -0.44967524028561456, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Johnson), Employee.FirstName),Employee.City))", "score": -0.5290518856718336, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Johnson), Employee.State),Employee.City))", "score": -0.538765118189076, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Johnson), Employee.City),Employee.HireDate))", "score": -0.5437017946615015, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Johnson), Employee.City),Employee.Phone))", "score": -0.5547086267843042, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Johnson), Employee.City),Employee.Country))", "score": -0.5548684827163015, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Johnson), Employee.Country),Employee.City))", "score": -0.5553079105093275, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Johnson), Employee.City),Employee.Address))", "score": -0.5563554435148035, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 182, "beams": [{"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.06531350277327874, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.28440729677640775, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(getData(Invoice), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.42816355362802727, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(getData(InvoiceLine), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.49539421960826274, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5037128148596821, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6525873361151753, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Track.Composer))", "score": -0.6569200112480758, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6708202777426777, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6745331106703816, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(getData(Invoice), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.7011728588021293, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.7228066088628111, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.7458714797157882, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.7594271256584761, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(getData(InvoiceLine), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.7684035247823647, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.7734597279686568, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 183, "beams": [{"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))", "score": -0.06339543390633065, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.08508501412515, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.16821261156043718, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))", "score": -0.24306527010401213, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))", "score": -0.2870926290481203, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.29738636062756035, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),Track.GenreId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.3145139686249176, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.3251166920399545, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3331666508831712, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Genre),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.3401364226230941, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.3417633805437202, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.34723449703979903, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Genre.Name),Track.GenreId))", "score": -0.37673587941640946, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Track.GenreId))", "score": -0.37898330106036593, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),Track.GenreId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))", "score": -0.41889306659109277, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 184, "beams": [{"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))", "score": -0.04248736869642666, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.15087945241570655, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.20490652814877605, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,0.99), Playlist.Name),Playlist.Name))", "score": -0.29717398137769435, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.3189319622470807, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Employee.FirstName))", "score": -0.34851780280972017, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Track.UnitPrice,=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3650780614494534, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,Playlist.PlaylistId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))", "score": -0.3789668512273415, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3839355466343779, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Track.UnitPrice,=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.38680929540088616, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),PlaylistTrack.PlaylistId))", "score": -0.38779118643749144, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3935683394533442, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.TrackId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))", "score": -0.39592578914401766, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Employee.FirstName))", "score": -0.3964918237921812, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Employee.Email))", "score": -0.4058162990139934, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 185, "beams": [{"orig_question": "To which addresses has the track Heartbreaker been sold to?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Heartbreaker),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),InvoiceLine.Quantity),Invoice.BillingAddress))", "score": -0.2601298706603983, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Heartbreaker),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses has the track Heartbreaker been sold to?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Heartbreaker),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Invoice.BillingAddress))", "score": -0.27640966524182886, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Heartbreaker),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses has the track Heartbreaker been sold to?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Heartbreaker),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Track.TrackId),InvoiceLine.Quantity),Invoice.BillingAddress))", "score": -0.2791214353817267, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Heartbreaker),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses has the track Heartbreaker been sold to?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Heartbreaker),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Track.Milliseconds),Invoice.BillingAddress))", "score": -0.2838474040167341, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Heartbreaker),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses has the track Heartbreaker been sold to?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Heartbreaker),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Invoice.BillingAddress))", "score": -0.3001271985981646, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Heartbreaker),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses has the track Heartbreaker been sold to?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Heartbreaker),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Track.TrackId),Track.Milliseconds),Invoice.BillingAddress))", "score": -0.30283896873806243, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Heartbreaker),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses has the track Heartbreaker been sold to?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Heartbreaker),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Milliseconds))", "score": -0.30847208105627494, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Heartbreaker),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses has the track Heartbreaker been sold to?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Heartbreaker),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.310429505780159, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Heartbreaker),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses has the track Heartbreaker been sold to?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Heartbreaker),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Milliseconds))", "score": -0.32475187563770547, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Heartbreaker),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses has the track Heartbreaker been sold to?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Heartbreaker),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.3267093003615895, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Heartbreaker),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses has the track Heartbreaker been sold to?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Heartbreaker),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Track.TrackId),InvoiceLine.Quantity),Track.Milliseconds))", "score": -0.3274636457776033, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Heartbreaker),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses has the track Heartbreaker been sold to?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Heartbreaker),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Track.TrackId),InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.32942107050148733, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Heartbreaker),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses has the track Heartbreaker been sold to?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Heartbreaker),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Track.Milliseconds),Track.Milliseconds))", "score": -0.3321896144126107, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Heartbreaker),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses has the track Heartbreaker been sold to?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Heartbreaker),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Track.Milliseconds),InvoiceLine.Quantity))", "score": -0.33414703913649474, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Heartbreaker),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses has the track Heartbreaker been sold to?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,Heartbreaker),Track.Milliseconds),Invoice.BillingAddress))", "score": -0.3402824139678738, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Heartbreaker),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 186, "beams": [{"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))", "score": -0.2136039611432352, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,AB), Customer.Company),Customer.Company))", "score": -0.21480272975895787, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Country))", "score": -0.3185118314358988, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,AB), Customer.Company),Customer.Country))", "score": -0.31971060005162144, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Country),Customer.Company))", "score": -0.4013043482336798, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,AB), Customer.Country),Customer.Company))", "score": -0.40250311684940243, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Country),Customer.Country))", "score": -0.5062122185263433, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,AB), Customer.Country),Customer.Country))", "score": -0.507410987142066, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.City))", "score": -0.5612950798604288, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Phone))", "score": -0.5623968121144571, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,AB), Customer.Company),Customer.City))", "score": -0.5624938484761515, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,AB), Customer.Company),Customer.Phone))", "score": -0.5635955807301798, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,AB), Customer.Company),Customer.Company))", "score": -0.5938968535992899, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.State))", "score": -0.6089530464741983, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,AB), Customer.Company),Customer.State))", "score": -0.610151815089921, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 187, "beams": [{"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -0.004909311582650844, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,=,Senhora E Senhor),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5877886096304964, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -0.608357174065173, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(InvoiceLine),Track.AlbumId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -0.6133304910407297, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -0.6385334521498072, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -0.6435067691253638, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Track.Name,=,Senhora E Senhor),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.6660000348262294, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,=,Senhora E Senhor),getData(InvoiceLine),Track.TrackId,Album.AlbumId), Track.UnitPrice),Track.UnitPrice))", "score": -0.6689915746826915, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -0.6756443374052784, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -0.6806176543808351, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Album.Title))", "score": -0.7125952609799242, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Track.Name,=,Senhora E Senhor),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,Album.AlbumId), Track.UnitPrice),Track.UnitPrice))", "score": -0.7180808518673502, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,=,Senhora E Senhor),getData(InvoiceLine),Track.AlbumId,InvoiceLine.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.7477374158944762, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,=,Senhora E Senhor),getData(Album),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.7602857994006552, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.TrackId),Track.UnitPrice)", "score": -0.8108545513498754, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 188, "beams": [{"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))", "score": -0.03609376804832161, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Country))", "score": -0.610358081563434, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Phone))", "score": -0.6140628995564686, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Company))", "score": -0.7383893582239877, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))", "score": -0.8599437526947816, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Company))", "score": -0.8750710823655745, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.PostalCode))", "score": -0.9160504068466848, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.City))", "score": -0.9184275249312012, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.LastName))", "score": -0.9327360216382599, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.Company))", "score": -0.9663425960315613, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Invoice.CustomerId))", "score": -0.986531551484956, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.Company))", "score": -0.9950735073293742, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Invoice.BillingCity),Customer.Company))", "score": -1.0276156547125443, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(MediaType), Customer.Company),Customer.Company))", "score": -1.03519147379422, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.FirstName))", "score": -1.1135057035638205, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 189, "beams": [{"orig_question": "Which composers have tracks that are not 159473 milliseconds long?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))", "score": -0.06358187270870985, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers have tracks that are not 159473 milliseconds long?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,!=,159473),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.29633618940696327, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers have tracks that are not 159473 milliseconds long?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,!=,159473),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.30191447767666424, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers have tracks that are not 159473 milliseconds long?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,!=,159473),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.TrackId,Album.AlbumId), Track.Composer),Track.Composer))", "score": -0.3363267553887171, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers have tracks that are not 159473 milliseconds long?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,!=,159473),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.TrackId,Album.AlbumId), Track.Composer),Track.Composer))", "score": -0.34190504365841806, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers have tracks that are not 159473 milliseconds long?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,!=,159473),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.AlbumId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.36042658019643553, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers have tracks that are not 159473 milliseconds long?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,!=,159473),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.AlbumId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.3660048684661365, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers have tracks that are not 159473 milliseconds long?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))", "score": -0.37203614501207094, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers have tracks that are not 159473 milliseconds long?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Genre),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))", "score": -0.38701439217374467, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers have tracks that are not 159473 milliseconds long?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,!=,159473),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.AlbumId,Album.AlbumId), Track.Composer),Track.Composer))", "score": -0.4004171461781893, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers have tracks that are not 159473 milliseconds long?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,!=,159473),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.AlbumId,Album.AlbumId), Track.Composer),Track.Composer))", "score": -0.40599543444789027, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers have tracks that are not 159473 milliseconds long?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,!=,159473),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.4127043214675246, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers have tracks that are not 159473 milliseconds long?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,!=,159473),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.41828260060005823, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers have tracks that are not 159473 milliseconds long?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,!=,159473),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Album),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.4237940025899441, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers have tracks that are not 159473 milliseconds long?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,!=,159473),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.4395452229681735, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 190, "beams": [{"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.041404027058233095, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1555340077266172, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1726949319954703, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.17384407213872202, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2069814903733255, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2236925655227, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23592784293772065, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Berliner Philharmoniker & Herbert Von Karajan),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2578119724941175, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27917658968580883, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.27946953017346104, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.28050071969323964, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.29453743753849443, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan), Invoice.InvoiceId),Invoice.Total)", "score": -0.300030628410754, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3018163265719783, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan), Invoice.InvoiceId),Invoice.Total)", "score": -0.3214482931753914, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 191, "beams": [{"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Margaret),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.13793708433516844, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Invoice.BillingCountry,=,Margaret),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.2043537438598296, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Margaret),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.20622083460763077, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Margaret),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.22242566986766205, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Playlist.Name,=,Margaret),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.2365485150129952, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Margaret),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.25238484094037494, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Margaret),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2568132030417547, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Invoice.BillingCountry,=,Margaret),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.2652515987308073, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Margaret),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.30512851001645414, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Margaret),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.3120954265623127, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Invoice.BillingCountry,=,Margaret),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.31880150046503614, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Invoice.BillingCountry,=,Margaret),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.3232298625664159, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Margaret),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.33007639592532784, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Margaret),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.CustomerId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.3330795709778551, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Margaret),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.33948055572914165, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 192, "beams": [{"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))", "score": -0.14114594083366683, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.InvoiceDate),Invoice.BillingState))", "score": -0.2183213233583956, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Austria), Invoice.BillingState),Invoice.BillingState))", "score": -0.2933141030007391, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Employee.State))", "score": -0.3538081757360487, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Austria), Invoice.InvoiceDate),Invoice.BillingState))", "score": -0.3704894855254679, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.InvoiceDate))", "score": -0.3976247124010115, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.InvoiceDate),Employee.State))", "score": -0.4309835582607775, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.Total))", "score": -0.43781743567524245, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.47480009492574027, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Austria), Invoice.BillingState),Employee.State))", "score": -0.505976337903121, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.InvoiceDate),Invoice.Total))", "score": -0.5149928181999712, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.Total),Invoice.BillingState))", "score": -0.5340604781740694, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Austria), Invoice.BillingState),Invoice.InvoiceDate))", "score": -0.5497928745680838, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Austria), Invoice.InvoiceDate),Employee.State))", "score": -0.5831517204278498, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Employee.State),Invoice.BillingState))", "score": -0.583857983314374, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 193, "beams": [{"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))", "score": -0.0695907043373154, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax)", "score": -0.3649970751572834, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax)", "score": -0.3971938615601115, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax)", "score": -0.4430262415584353, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax)", "score": -0.4508064762133361, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax)", "score": -0.47522303022971146, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "sum(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.CustomerId),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax)", "score": -0.4781141038180575, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax)", "score": -0.48300326261616416, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "sum(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax)", "score": -0.5046971164607967, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.CustomerId),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax)", "score": -0.5086045182281697, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax)", "score": -0.5288356642356334, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax)", "score": -0.5351875308709089, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "sum(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.CustomerId),Invoice.BillingPostalCode,!=,2010), Customer.Fax),Customer.Fax)", "score": -0.5381374734574882, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.PostalCode,!=,2010), Customer.Phone),Customer.Fax)", "score": -0.5508381266917466, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Email),Customer.Fax))", "score": -0.5680864325804578, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 194, "beams": [{"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.00760421731385417, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -0.8209015024671703, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.8958817324774512, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.Phone))", "score": -0.9300020075787132, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Customer.Phone))", "score": -1.0011538704012377, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Customer.Phone),Artist.Name))", "score": -1.0420283064298344, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -1.0466611044936514, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -1.0671526864741836, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -1.1033003183934298, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -1.1460837861495552, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.PostalCode))", "score": -1.146639954888734, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.LastName))", "score": -1.1937343027259957, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.Title),Artist.Name))", "score": -1.2208942255242665, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.City))", "score": -1.2910442536795705, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Employee.Phone),Artist.Name))", "score": -1.2916720461202147, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 195, "beams": [{"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))", "score": -0.04254088494053576, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))", "score": -0.3793860630976269, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Fax),Customer.Phone))", "score": -0.44400362520536873, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Fax))", "score": -0.45622294246277306, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))", "score": -0.516526215938169, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.State),Customer.Phone))", "score": -0.5609805717976997, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.City))", "score": -0.5945904463442275, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Album.Title))", "score": -0.6022215098055312, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.State))", "score": -0.6183429568918655, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Employee.Phone))", "score": -0.6992235392244766, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.City),Customer.Phone))", "score": -0.7119041219266364, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Employee.HireDate),Customer.Phone))", "score": -0.7181217208417365, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))", "score": -0.7419252352701733, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))", "score": -0.7606580214487622, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Employee.Phone),Customer.Phone))", "score": -0.7712125912221381, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 196, "beams": [{"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.32662870839539365, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3270810187891237, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1),getData(InvoiceLine),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.35768583557133, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(InvoiceLine),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.35813814596506, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3694580193209022, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3699103297146323, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(InvoiceLine),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4005151464968385, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,1),getData(InvoiceLine),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.40096745689056856, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,1), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.40570477875383143, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4063084928730708, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4067608032668008, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Track.TrackId),Track.UnitPrice,<,0.99), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.4199713933489413, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,1), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.4272111226183479, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<,0.99),getData(InvoiceLine),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4373656200490071, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,1),getData(InvoiceLine),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.43781793044273715, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 197, "beams": [{"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.22818597391775206, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(getData(InvoiceLine), Invoice.InvoiceId),Invoice.Total)", "score": -0.35026731676051936, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Genre.Name,=,Blues),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.37276766433313585, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Name,=,Blues),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.37898713187035254, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(getData(Invoice), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.40024268446592826, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Blues),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4104728627459149, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Genre.Name,=,Blues),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4224045016578426, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Genre.Name,=,Blues),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4252689163804534, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4278215996577105, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Name,=,Blues),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4286239691950593, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Name,=,Blues),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4314883839176701, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Genre.Name,=,Blues),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.43717409470234353, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Name,=,Blues),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.44339357159690845, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Blues),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4470645605351721, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Composer,=,Blues),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4549351130175933, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 198, "beams": [{"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))", "score": -0.10492627499297669, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,!=,Michael), Employee.Address),Employee.Address))", "score": -0.1848222630997043, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Invoice.BillingAddress),Employee.Address))", "score": -0.36283962232664635, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,!=,Michael), Invoice.BillingAddress),Employee.Address))", "score": -0.44273561043337395, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Track.Milliseconds),Employee.Address))", "score": -0.4479119013030868, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Track.Milliseconds))", "score": -0.49590007112965395, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.FirstName,!=,Michael), Employee.Address),Employee.Address))", "score": -0.5187042373199802, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,!=,Michael), Track.Milliseconds),Employee.Address))", "score": -0.5278078894098144, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Country),Employee.Address))", "score": -0.5330800543506484, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,!=,Michael), Employee.Address),Track.Milliseconds))", "score": -0.5757960592363816, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Invoice.BillingAddress))", "score": -0.5968127016876679, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,!=,Michael), Employee.Country),Employee.Address))", "score": -0.612976042457376, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Invoice.Total),Employee.Address))", "score": -0.624241484232698, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,Michael), Employee.Address),Employee.Address))", "score": -0.6294518130798679, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Michael), Employee.Address),Employee.Address))", "score": -0.6298066395302158, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 199, "beams": [{"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.InvoiceDate,=,NY), Customer.Email),Customer.Email))", "score": -0.29477286881137843, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.InvoiceDate,=,NY), Invoice.Total),Customer.Email))", "score": -0.3428689146630859, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))", "score": -0.3463875705592727, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,NY), Customer.Email),Customer.Email))", "score": -0.3565584326379394, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Invoice.Total),Customer.Email))", "score": -0.3944836164109802, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.InvoiceDate,=,NY), Customer.Email),Employee.Email))", "score": -0.4023137295835113, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,NY), Invoice.Total),Customer.Email))", "score": -0.40465447848964686, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.InvoiceDate,=,NY), Invoice.Total),Employee.Email))", "score": -0.45040977543521876, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Employee.Email))", "score": -0.4539284313314056, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,NY), Customer.Email),Customer.Email))", "score": -0.4596232826106643, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,NY), Customer.Email),Employee.Email))", "score": -0.4640992934100723, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Invoice.Total),Employee.Email))", "score": -0.502024477183113, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,NY), Invoice.Total),Customer.Email))", "score": -0.5077193284623718, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,NY), Invoice.Total),Employee.Email))", "score": -0.5121953392617797, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,NY), Customer.Email),Customer.Email))", "score": -0.5202431770258045, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 200, "beams": [{"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.21024966799119324, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.24375146740537082, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.Address),Employee.Address))", "score": -0.252451297994412, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2531085680690303, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Invoice.Total,=,683 10 Street SW),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3165254011473523, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Invoice.BillingAddress,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.32964809348421487, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Invoice.BillingAddress,=,AB),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.32984115788289975, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Address,=,683 10 Street SW),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3487224310664291, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Invoice.Total,=,683 10 Street SW),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.35002720056152986, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Address,=,683 10 Street SW),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.CustomerId,!=,683 10 Street SW),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3581280676182257, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Address,=,AB),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.36157294566990006, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Address,=,683 10 Street SW),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Invoice.BillingState,!=,683 10 Street SW),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3628393820321492, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Invoice.BillingAddress,=,AB),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.36334298498546314, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Employee.Address))", "score": -0.3764491017718683, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.Address),Invoice.BillingAddress))", "score": -0.3891392845471273, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 201, "beams": [{"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)", "score": -0.03630089700822314, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.6518748974532128, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.6557958029560679, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.7802251369847407, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.8062068394209609, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.8212479505185224, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Customer.City)", "score": -0.8315523863435611, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.8336869811321475, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.8472296529547426, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(getData(InvoiceLine), Invoice.InvoiceId),Invoice.Total)", "score": -0.857849539044732, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.8596686835683677, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.8747097946659291, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Customer.CustomerId,InvoiceLine.InvoiceId), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.8885448576875347, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.9006914971021494, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.902719787156318, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 202, "beams": [{"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.18429957434366237, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21380977038100418, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24436349593703904, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24509999750256387, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.26132295851060017, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2672174579742224, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Artist.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2913352188715445, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2944534212647093, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Genre.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2982509196285284, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2997347558350586, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3005298085685433, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3066504565920425, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3102777775918184, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Track.Composer,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.31155818895414633, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3171934936839732, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 203, "beams": [{"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.BirthDate))", "score": -0.08312918812589487, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1973-07-01 00:00:00), Employee.BirthDate),Employee.BirthDate))", "score": -0.2912601736243232, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.3651508261318668, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.BirthDate),Employee.BirthDate))", "score": -0.38912530810193857, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Invoice.InvoiceDate))", "score": -0.47150828883604845, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.Total,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.BirthDate))", "score": -0.4812625982667669, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.HireDate),Employee.BirthDate))", "score": -0.4842611123676761, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.HireDate))", "score": -0.4917597417588695, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.State),Employee.BirthDate))", "score": -0.5227707792873844, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.City),Employee.BirthDate))", "score": -0.5330858399029239, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1973-07-01 00:00:00), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.5732818116302951, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.City))", "score": -0.6014681403394206, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.State))", "score": -0.6388398949857219, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Track.UnitPrice))", "score": -0.6440526787991985, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.6711469461079105, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 204, "beams": [{"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))", "score": -0.0319129398521909, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Album.AlbumId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes,=,5264376), Track.Name),Track.Name))", "score": -0.3583217859747802, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,Album.AlbumId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes,=,5264376), Track.Name),Track.Name))", "score": -0.3652484720522069, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Album.AlbumId),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.Bytes,=,5264376), Track.Name),Track.Name))", "score": -0.3815654991839141, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,Album.AlbumId),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.Bytes,=,5264376), Track.Name),Track.Name))", "score": -0.38849218526134077, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Album.AlbumId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes,=,5264376), Track.Name),Track.Name))", "score": -0.3890581491575667, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes,=,5264376), Track.Name),Track.Name))", "score": -0.39598483523499345, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Album.AlbumId),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.Bytes,=,5264376), Track.Name),Track.Name))", "score": -0.4123018623667006, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.Bytes,=,5264376), Track.Name),Track.Name))", "score": -0.4192285484441273, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes,=,5264376), Track.Name),Track.Name))", "score": -0.4588254763976766, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes,=,5264376), Track.Name),Track.Name))", "score": -0.46575216247510337, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Track),InvoiceLine.TrackId,Album.AlbumId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes,=,5264376), Track.Name),Track.Name))", "score": -0.46668380134494425, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Track),Track.AlbumId,Album.AlbumId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes,=,5264376), Track.Name),Track.Name))", "score": -0.47361048742237094, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Album.AlbumId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes,=,5264376), Track.Name),Track.Name))", "score": -0.48155319992435164, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.Bytes,=,5264376), Track.Name),Track.Name))", "score": -0.48206918960681056, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 205, "beams": [{"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))", "score": -0.0991836177654477, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))", "score": -0.26221614577843866, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))", "score": -0.2876735354311677, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Track.Composer))", "score": -0.4087993508674117, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))", "score": -0.45070606344415864, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.48556691468729696, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))", "score": -0.5190421889074059, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))", "score": -0.5452225158460351, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Customer.PostalCode),Employee.PostalCode))", "score": -0.5608968154065224, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.City))", "score": -0.5702251798011275, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Track.Composer))", "score": -0.5718318788804027, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Track.Composer))", "score": -0.5972892685331317, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))", "score": -0.637509281421444, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.6485994427002879, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Artist.Name))", "score": -0.6498197919227096, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 206, "beams": [{"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,IT Manager), Employee.City),Employee.City))", "score": -0.13550703726468782, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,IT Manager), Employee.City),Employee.City))", "score": -0.19105773918090563, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,IT Manager), Employee.City),Employee.PostalCode))", "score": -0.37438920825479727, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,IT Manager), Employee.City),Employee.PostalCode))", "score": -0.42993991017101507, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,IT Manager), Employee.City),Employee.City))", "score": -0.47237813226638536, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.LastName,=,IT Manager), Employee.City),Employee.City))", "score": -0.47606293052194815, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,IT Manager), Employee.PostalCode),Employee.City))", "score": -0.4807717058411072, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,IT Manager), Employee.City),Employee.City))", "score": -0.5013373469537328, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,IT Manager), Employee.City),Employee.Phone))", "score": -0.510849035677893, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.FirstName,=,IT Manager), Employee.City),Employee.City))", "score": -0.531613632438166, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,IT Manager), Employee.PostalCode),Employee.City))", "score": -0.536322407757325, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,IT Manager), Employee.City),Employee.Phone))", "score": -0.5663997375941108, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,IT Manager), Employee.City),Employee.City))", "score": -0.5910566424554418, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,IT Manager), Employee.City),Employee.City))", "score": -0.6036790584748815, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,IT Manager), Employee.Phone),Employee.City))", "score": -0.6275597665062378, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 207, "beams": [{"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))", "score": -0.046270301601907704, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,AB), Employee.Phone),Employee.Phone))", "score": -0.3209771285769056, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),Invoice.BillingState,=,AB), Employee.Phone),Employee.Phone))", "score": -0.40695717747679877, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingState,=,AB), Employee.Phone),Employee.Phone))", "score": -0.40750865921290824, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,AB), Customer.Phone),Employee.Phone))", "score": -0.41143778516467916, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Employee.EmployeeId),Invoice.BillingState,=,AB), Employee.Phone),Employee.Phone))", "score": -0.41755117031811356, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.FirstName),Employee.Phone))", "score": -0.4277420640355558, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,AB), Employee.Phone),Employee.Phone))", "score": -0.441764830940149, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.City),Employee.Phone))", "score": -0.45536619428457925, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.CustomerId),Invoice.BillingState,=,AB), Employee.Phone),Employee.Phone))", "score": -0.4590805859004962, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.CustomerId),Invoice.BillingState,=,AB), Employee.Phone),Employee.Phone))", "score": -0.47393901544898415, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),Invoice.BillingState,=,AB), Customer.Phone),Employee.Phone))", "score": -0.49741783406457235, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Employee.EmployeeId),Invoice.BillingState,=,AB), Customer.Phone),Employee.Phone))", "score": -0.5080118075240171, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,AB), Employee.Phone),Customer.Phone))", "score": -0.5294563382839955, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Phone),Employee.Phone))", "score": -0.5330873011043877, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 208, "beams": [{"orig_question": "Is empty?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))", "score": -0.2814185227194523, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>,192992), Track.TrackId),Track.Bytes)"}, {"orig_question": "Is empty?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,192992), Customer.Email),Customer.State))", "score": -0.4316487297510321, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>,192992), Track.TrackId),Track.Bytes)"}, {"orig_question": "Is empty?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,192992), Customer.Email),Customer.FirstName))", "score": -0.4616334423517401, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>,192992), Track.TrackId),Track.Bytes)"}, {"orig_question": "Is empty?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,192992), Customer.State),Customer.State))", "score": -0.4748814687227423, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>,192992), Track.TrackId),Track.Bytes)"}, {"orig_question": "Is empty?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,192992), Customer.Country),Customer.State))", "score": -0.4827079162096197, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>,192992), Track.TrackId),Track.Bytes)"}, {"orig_question": "Is empty?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,192992), Customer.Email),Customer.Email))", "score": -0.4876871690248663, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>,192992), Track.TrackId),Track.Bytes)"}, {"orig_question": "Is empty?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,192992), Customer.Address),Customer.State))", "score": -0.5003924355005438, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>,192992), Track.TrackId),Track.Bytes)"}, {"orig_question": "Is empty?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,192992), Customer.FirstName),Customer.State))", "score": -0.5042614474987204, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>,192992), Track.TrackId),Track.Bytes)"}, {"orig_question": "Is empty?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,192992), Customer.State),Customer.FirstName))", "score": -0.5048661813234503, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>,192992), Track.TrackId),Track.Bytes)"}, {"orig_question": "Is empty?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,192992), Customer.Country),Customer.FirstName))", "score": -0.5126926288103277, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>,192992), Track.TrackId),Track.Bytes)"}, {"orig_question": "Is empty?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,192992), Customer.Address),Customer.FirstName))", "score": -0.5303771481012518, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>,192992), Track.TrackId),Track.Bytes)"}, {"orig_question": "Is empty?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,192992), Customer.Email),Customer.Country))", "score": -0.5307932928299124, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>,192992), Track.TrackId),Track.Bytes)"}, {"orig_question": "Is empty?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,192992), Customer.State),Customer.Email))", "score": -0.5309199079965765, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>,192992), Track.TrackId),Track.Bytes)"}, {"orig_question": "Is empty?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,192992), Customer.FirstName),Customer.FirstName))", "score": -0.5342461600994284, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>,192992), Track.TrackId),Track.Bytes)"}, {"orig_question": "Is empty?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,192992), Customer.Country),Customer.Email))", "score": -0.538746355483454, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>,192992), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 209, "beams": [{"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.09138111838831857, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.16279105789628803, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.16343815013687332, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.18609575179720106, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.2286406606469019, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.22992800839316027, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.24513698898437264, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.24875830799064705, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Alice In Chains),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2544956369696043, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Alice In Chains),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2577331285953362, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Alice In Chains),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Invoice.Total)", "score": -0.27567925612574207, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Alice In Chains),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceDate),Invoice.Total)", "score": -0.278916747751474, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(getData(Album),Artist.Name,!=,Alice In Chains),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28160206434978996, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Alice In Chains),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.Total)", "score": -0.2839902371573627, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Invoice),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.291258636762606, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 210, "beams": [{"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.InvoiceDate,!=,Creedence Clearwater Revival),merge(getData(InvoiceLine),getData(Track),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.23486093914086603, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.InvoiceDate,!=,Creedence Clearwater Revival),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2572940961468915, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.InvoiceDate,!=,Creedence Clearwater Revival),merge(getData(InvoiceLine),getData(Track),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.26789371801281253, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,!=,Creedence Clearwater Revival), Genre.Name),Genre.Name))", "score": -0.28473405015574177, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,Creedence Clearwater Revival),merge(getData(InvoiceLine),getData(Track),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2896180594328843, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.InvoiceDate,!=,Creedence Clearwater Revival),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.29032689027210473, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,!=,Creedence Clearwater Revival), Genre.Name),Genre.Name))", "score": -0.2916558030450545, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,!=,Creedence Clearwater Revival), Genre.Name),Genre.Name))", "score": -0.2937294138817942, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,Creedence Clearwater Revival),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.29399772285785886, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,Creedence Clearwater Revival), Genre.Name),Genre.Name))", "score": -0.3013051859959285, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,Creedence Clearwater Revival), Genre.Name),Genre.Name))", "score": -0.31030054972198085, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId),Invoice.InvoiceDate,!=,Creedence Clearwater Revival), Genre.Name),Genre.Name))", "score": -0.32102723241213765, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId),Invoice.InvoiceDate,!=,Creedence Clearwater Revival), Genre.Name),Genre.Name))", "score": -0.33002259613819007, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId),Invoice.InvoiceDate,=,Creedence Clearwater Revival), Genre.Name),Genre.Name))", "score": -0.3375983682523243, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,!=,Creedence Clearwater Revival), Genre.Name),Genre.Name))", "score": -0.33897431151438445, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 211, "beams": [{"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.23620542208426454, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,1),Track.UnitPrice),Customer.Address))", "score": -0.23629540497963505, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.2376391621422458, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.26437154994049594, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.26580528999847725, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,<=,1),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.2708494825964754, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,<=,1),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.2722832226544567, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,1),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.2827272641302037, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,=,1),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.29901561045270686, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.3000133991275333, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,=,1),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.3004493505106881, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,1),Track.Milliseconds),Customer.Address))", "score": -0.3318822738093661, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.3476445336388764, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,<=,1),Track.UnitPrice),Customer.Address))", "score": -0.3527159666600163, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,1),Track.UnitPrice),Customer.Address))", "score": -0.35936276856593363, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 212, "beams": [{"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.08678152867638228, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,<,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.11258906602171065, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,<,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.13246452731889835, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<=,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.1356361614217601, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2349536955000119, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.2562861788372935, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,!=,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.27780694520800975, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.28487207631987677, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.2920455692049976, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<=,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.2959723085269128, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(PlaylistTrack),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,<,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.2977175255830448, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.3075193339335552, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.3094137822021946, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.31799389165914277, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.32783143683546634, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 213, "beams": [{"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.16153695643797328, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Track.Name),Album.Title))", "score": -0.19543039944959287, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Wilhelm Kempff),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Album.Title))", "score": -0.21226514271650535, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Wilhelm Kempff),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Album.Title))", "score": -0.21489021658295981, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.22203125100064208, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.2220403053711437, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Wilhelm Kempff),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.2538754206045012, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.AlbumId), Track.Name),Album.Title))", "score": -0.2559337483827633, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.26167099653871173, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Artist.Name,=,Wilhelm Kempff),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Album.Title))", "score": -0.2775059143461849, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Wilhelm Kempff),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.28682492378376295, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Wilhelm Kempff),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.29006576738610595, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Artist.Name,=,Wilhelm Kempff),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Album.Title))", "score": -0.2920163570000371, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Wilhelm Kempff),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Track.Name),Album.Title))", "score": -0.2951669075942137, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Track.Name),Album.Title))", "score": -0.2955644395503313, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 214, "beams": [{"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.11964060628596086, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.13172684566298928, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Rob Thomas),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.AlbumId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.16112709095680336, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Rob Thomas),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.16542322850881253, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Rob Thomas),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.18395377933610907, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.1899988309226302, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Rob Thomas),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.19238129566966797, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Rob Thomas),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.19255038851604686, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.20626031444440607, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Rob Thomas),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.AlbumId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.23948059936823562, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.Name,=,Santana Feat. Rob Thomas), MediaType.Name),MediaType.Name)", "score": -0.25391310719738464, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.25908206093220365, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Rob Thomas),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.2633590522648917, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas), MediaType.Name),MediaType.Name))", "score": -0.2673566291120707, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.Name,=,Santana Feat. Rob Thomas), MediaType.Name),MediaType.Name)", "score": -0.2796671041322949, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 215, "beams": [{"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.10064208663607133, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,India), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.14981603778505814, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>,India), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.32541392899656785, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Customer.City))", "score": -0.5344485209097911, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,India), Invoice.BillingCity),Customer.City))", "score": -0.5836224720587779, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>=,India), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6262254879584361, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.6929588887614955, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.696618841659074, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(getData(Invoice), Invoice.BillingCity),Customer.City))", "score": -0.7056772904545399, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.InvoiceDate))", "score": -0.7109945283045818, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.731084761373495, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(getData(Invoice), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.7385503760001854, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,India), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.7421328399104823, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(getData(Invoice), Customer.City),Customer.City))", "score": -0.7421510751790419, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,India), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.7436583217240695, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 216, "beams": [{"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))", "score": -0.1620384521247868, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Address))", "score": -0.22207847602704128, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.State),Customer.Address))", "score": -0.41874232765511327, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Email),Customer.Address))", "score": -0.5709695393161383, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.Address))", "score": -0.5821897809192993, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Address),Customer.Address))", "score": -0.7182128006534185, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Email),Customer.Address))", "score": -0.7660299004928675, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Invoice.Total),Customer.Address))", "score": -0.7712021643237676, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Email),Customer.Address))", "score": -0.7743517817871179, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.Address))", "score": -0.7889508977170875, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.State),Customer.Address))", "score": -0.798978344158968, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Email))", "score": -0.8065127484133809, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Invoice.InvoiceId),Customer.Address))", "score": -0.8072975978799989, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Email),Invoice.InvoiceId))", "score": -0.8216145640180912, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), InvoiceLine.UnitPrice),Customer.Address))", "score": -0.844047680839566, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 217, "beams": [{"orig_question": "What are all different artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.08144508859587914, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all different artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.LastName))", "score": -0.4123250783472613, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all different artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.4500082142987882, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all different artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.Phone))", "score": -0.6359426472895817, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all different artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.FirstName))", "score": -0.7026207266678334, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all different artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Customer.LastName))", "score": -0.723766191080762, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all different artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Customer.Phone))", "score": -0.8342704855240738, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all different artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -0.8532113270540626, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all different artist names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -0.8715386532698932, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all different artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Genre.Name))", "score": -0.8806557478233219, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all different artist names?", "inferred_code": "done(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.9352983269894368, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all different artist names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.9860676436038122, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all different artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Customer.Phone),Artist.Name))", "score": -1.014855705886856, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all different artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.Title),Artist.Name))", "score": -1.0294143798450797, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all different artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Employee.Phone),Artist.Name))", "score": -1.040335733932625, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 218, "beams": [{"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.13564902825237368, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3114979909914837, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Employee.PostalCode))", "score": -0.34672513140321826, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Customer.City))", "score": -0.35216524733186816, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Artist.Name))", "score": -0.36144873036028, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Employee.City))", "score": -0.4117637826311693, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Customer.Company))", "score": -0.4394597364771471, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Employee.City),Invoice.BillingCity))", "score": -0.500677398424159, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2013-03-01 00:00:00), Invoice.BillingCity),Employee.PostalCode))", "score": -0.5225740941423282, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2013-03-01 00:00:00), Invoice.BillingCity),Customer.City))", "score": -0.5280142100709782, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Customer.PostalCode))", "score": -0.530809606443654, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2013-03-01 00:00:00), Invoice.BillingCity),Artist.Name))", "score": -0.53729769309939, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,<,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5567940641998143, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.5620097769606218, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,<,2013-03-01 00:00:00), Invoice.BillingCity),Customer.City))", "score": -0.5747261216742091, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 219, "beams": [{"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Invoice.BillingState))", "score": -0.06862722335108629, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Invoice.BillingState))", "score": -0.24130379778989663, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.Total),Invoice.BillingState))", "score": -0.3128806147510659, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Employee.State))", "score": -0.4494560248936068, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,S\u00c3\u00b8nder Boulevard 51), Invoice.Total),Invoice.BillingState))", "score": -0.4855571891898762, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.InvoiceDate),Invoice.BillingState))", "score": -0.5161219630176674, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Invoice.Total))", "score": -0.5259926207149874, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Invoice.BillingState))", "score": -0.5993626229251277, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingCountry),Invoice.BillingState))", "score": -0.6070774290496956, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Employee.State))", "score": -0.6221325993324172, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Customer.State))", "score": -0.6651754565323245, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Employee.State),Invoice.BillingState))", "score": -0.6664427015716683, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,S\u00c3\u00b8nder Boulevard 51), Invoice.InvoiceDate),Invoice.BillingState))", "score": -0.6887985374564778, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Address,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Invoice.BillingState))", "score": -0.6906582824672114, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.Total),Employee.State))", "score": -0.6937094162935864, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 220, "beams": [{"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.15726103529232205, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,>=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.31136419519680203, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.3422137264897174, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.34620991989868344, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.3610478703667468, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.38166693493622006, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.PostalCode),Track.Composer))", "score": -0.42677894130247296, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.44411832734840573, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,<,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.49631688639419735, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.5003130798031634, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.5357700948407, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.5460005615641421, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.5499967549731082, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.UnitPrice,>=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.5610494023458159, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,>=,2002-05-01 00:00:00), Employee.PostalCode),Track.Composer))", "score": -0.5808821012069529, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 221, "beams": [{"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.08002714475240526, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.13989833847919547, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.20074596458510122, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,AB),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.20083495377922156, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2037121576784262, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.State,=,AB),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.22475246739865337, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.2399755180534491, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.24361580272972794, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.State,=,AB),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)", "score": -0.2470896698057004, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,AB),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.24727163769827784, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.25332061625980606, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2543551032683719, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.2645346586866637, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.26986656749519267, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.31287551601193925, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 222, "beams": [{"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.03423114630719209, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.11843932049886514, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.28491697834821483, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),merge(merge(getData(Track),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.33222385971902824, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.36494127266782744, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),merge(merge(getData(Track),getData(Track),Album.AlbumId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.3873045583902687, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,AAC audio file), Album.Title),Album.Title))", "score": -0.3904107811723489, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.40872371663655804, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.GenreId),MediaType.Name,=,AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.43807375021274747, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.46290250840410346, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file), Album.Title),Album.Title))", "score": -0.46403535810701235, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.4678013466144661, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),Customer.LastName,=,AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.47789380896766354, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,MediaType.Name), Album.Title),Album.Title))", "score": -0.48023731753175003, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),Genre.GenreId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.4820955823423147, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 223, "beams": [{"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,153600),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.16145089650674277, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,<=,153600),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.18282170084807742, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,153600),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.22134239763733693, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>=,153600),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.23142448760193723, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))", "score": -0.23283863917879752, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))", "score": -0.2378094935633814, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,153600), Playlist.Name),Playlist.Name))", "score": -0.2586429743069359, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,>=,153600),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2827069922172508, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,<=,153600),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2866972483392073, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,153600),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2895725934536411, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,153600),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.29677933830380754, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,<=,153600),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3040778055573109, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>=,153600),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3049305244979831, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,153600),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3070409637210652, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Invoice.Total,>=,153600), Playlist.Name),Playlist.Name))", "score": -0.3181934929106725, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 224, "beams": [{"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231), Invoice.InvoiceId),Invoice.Total)", "score": -0.09712384964267878, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.147863221578457, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,260231), Invoice.InvoiceId),Invoice.Total)", "score": -0.1702484544192164, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(filter(getData(Track),Track.Milliseconds,<=,260231),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231), Invoice.InvoiceId),Invoice.Total)", "score": -0.267312564621272, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(merge(filter(merge(filter(getData(Track),Track.Milliseconds,>=,260231),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27875689727787933, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,260231),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2973686215774155, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(filter(getData(Track),Track.Milliseconds,>=,260231),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231), Invoice.InvoiceId),Invoice.Total)", "score": -0.3105101015997563, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,260231),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3243789384006119, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(filter(getData(Track),Track.Milliseconds,<=,260231),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,260231), Invoice.InvoiceId),Invoice.Total)", "score": -0.3333905902638054, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(merge(filter(merge(filter(getData(Track),Track.Milliseconds,<=,260231),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.33654116365676534, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>=,260231),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.34403083957053515, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Track),Track.Milliseconds,>=,260231),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231), Invoice.InvoiceId),Invoice.Total)", "score": -0.3576642137303543, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.359861156700797, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.38436087537969377, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>=,260231), Invoice.InvoiceId),Invoice.Total)", "score": -0.3883994684906524, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 225, "beams": [{"orig_question": "How much is the average unit price of the tracks sold with the exception of those containing the billing address 12,Community Centre?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,12,Community Centre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.12021541821266206, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,12,Community Centre), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the average unit price of the tracks sold with the exception of those containing the billing address 12,Community Centre?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,12,Community Centre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.18685943666531213, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,12,Community Centre), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the average unit price of the tracks sold with the exception of those containing the billing address 12,Community Centre?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,12,Community Centre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.216305648142507, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,12,Community Centre), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the average unit price of the tracks sold with the exception of those containing the billing address 12,Community Centre?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,12,Community Centre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2201495832703167, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,12,Community Centre), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the average unit price of the tracks sold with the exception of those containing the billing address 12,Community Centre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,<,12,Community Centre), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.24237277538980675, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,12,Community Centre), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the average unit price of the tracks sold with the exception of those containing the billing address 12,Community Centre?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,12,Community Centre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.2829496665951571, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,12,Community Centre), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the average unit price of the tracks sold with the exception of those containing the billing address 12,Community Centre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,!=,12,Community Centre), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.28710910707501397, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,12,Community Centre), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the average unit price of the tracks sold with the exception of those containing the billing address 12,Community Centre?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,12,Community Centre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2965157436001383, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,12,Community Centre), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the average unit price of the tracks sold with the exception of those containing the billing address 12,Community Centre?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,12,Community Centre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.2972822612702703, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,12,Community Centre), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the average unit price of the tracks sold with the exception of those containing the billing address 12,Community Centre?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,12,Community Centre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),InvoiceLine.Quantity)", "score": -0.31623981320016165, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,12,Community Centre), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the average unit price of the tracks sold with the exception of those containing the billing address 12,Community Centre?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,12,Community Centre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.3179409314671921, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,12,Community Centre), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the average unit price of the tracks sold with the exception of those containing the billing address 12,Community Centre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,<,12,Community Centre), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.3260123378319, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,12,Community Centre), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the average unit price of the tracks sold with the exception of those containing the billing address 12,Community Centre?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Invoice.BillingAddress,=,12,Community Centre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3311663255714594, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,12,Community Centre), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the average unit price of the tracks sold with the exception of those containing the billing address 12,Community Centre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,12,Community Centre), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3505819894072187, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,12,Community Centre), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the average unit price of the tracks sold with the exception of those containing the billing address 12,Community Centre?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,12,Community Centre),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,12,Community Centre), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4187659071237947, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,12,Community Centre), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 226, "beams": [{"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.LastName))", "score": -0.18209370240094785, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.20924813208109397, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))", "score": -0.21664208325489803, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))", "score": -0.24518118006163336, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.LastName),Customer.LastName))", "score": -0.24606537425238292, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.LastName),Customer.PostalCode))", "score": -0.27321980393252904, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.PostalCode))", "score": -0.2773058214394513, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.LastName))", "score": -0.2962541878680718, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.LastName),Customer.LastName))", "score": -0.3005747854819356, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.PostalCode))", "score": -0.31431928319670693, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.PostalCode),Customer.LastName))", "score": -0.31942275798771025, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), InvoiceLine.Quantity),Customer.LastName))", "score": -0.3366517073157781, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), InvoiceLine.InvoiceLineId),Customer.LastName))", "score": -0.33671220533122087, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.340123010672394, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.LastName),Customer.PostalCode))", "score": -0.3444436082862578, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 227, "beams": [{"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99), Track.Composer),Track.Name))", "score": -0.3284053402085029, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99), Track.Composer),Track.Name))", "score": -0.3319084083280947, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceDate,<,1.99), Track.Composer),Track.Name))", "score": -0.35274014416363647, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceDate,<,1.99), Track.Composer),Track.Name))", "score": -0.3562432122832282, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Employee.BirthDate,<,1.99), Track.Composer),Track.Name))", "score": -0.35874266723538895, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Employee.BirthDate,<,1.99), Track.Composer),Track.Name))", "score": -0.3622457353549807, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.3787761934247361, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Track.Name))", "score": -0.37890446925681426, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.3822792615443279, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99), Track.Composer),Track.Name))", "score": -0.3839161590416893, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99), Track.Composer),Track.Name))", "score": -0.3874192271612811, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.Total,<,1.99), Track.Composer),Track.Name))", "score": -0.3876588047958102, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.Total,<,1.99), Track.Composer),Track.Name))", "score": -0.39116187291540194, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99), Track.Milliseconds),Track.Name))", "score": -0.39230060097540687, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99), Track.Milliseconds),Track.Name))", "score": -0.39580366909499864, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 228, "beams": [{"orig_question": "Which is the city of customers with last name equal to K\u00c3\u00b6hler", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))", "score": -0.022480956817162223, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))"}, {"orig_question": "Which is the city of customers with last name equal to K\u00c3\u00b6hler", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.CustomerId),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))", "score": -0.3889957499149217, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))"}, {"orig_question": "Which is the city of customers with last name equal to K\u00c3\u00b6hler", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))", "score": -0.4027163828352952, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))"}, {"orig_question": "Which is the city of customers with last name equal to K\u00c3\u00b6hler", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))", "score": -0.4508927210449573, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))"}, {"orig_question": "Which is the city of customers with last name equal to K\u00c3\u00b6hler", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.State),Customer.City))", "score": -0.456851229610038, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))"}, {"orig_question": "Which is the city of customers with last name equal to K\u00c3\u00b6hler", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))", "score": -0.4626597877329696, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))"}, {"orig_question": "Which is the city of customers with last name equal to K\u00c3\u00b6hler", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))", "score": -0.4681237705879224, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))"}, {"orig_question": "Which is the city of customers with last name equal to K\u00c3\u00b6hler", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.CustomerId),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))", "score": -0.47205212013595693, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))"}, {"orig_question": "Which is the city of customers with last name equal to K\u00c3\u00b6hler", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))", "score": -0.49543723349583396, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))"}, {"orig_question": "Which is the city of customers with last name equal to K\u00c3\u00b6hler", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.CustomerId),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))", "score": -0.5019517491600789, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))"}, {"orig_question": "Which is the city of customers with last name equal to K\u00c3\u00b6hler", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))", "score": -0.5108468998951139, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))"}, {"orig_question": "Which is the city of customers with last name equal to K\u00c3\u00b6hler", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))", "score": -0.5163001182116357, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))"}, {"orig_question": "Which is the city of customers with last name equal to K\u00c3\u00b6hler", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))", "score": -0.5436135717054961, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))"}, {"orig_question": "Which is the city of customers with last name equal to K\u00c3\u00b6hler", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))", "score": -0.5457161526932115, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))"}, {"orig_question": "Which is the city of customers with last name equal to K\u00c3\u00b6hler", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.CustomerId), Customer.City),Customer.City))", "score": -0.5897859092080212, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 229, "beams": [{"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.23922239876992535, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.2672389069404837, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,Invoice.InvoiceId),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.2834050212942135, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.28809491552255523, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.2948356065296576, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(MediaType),Track.AlbumId,MediaType.MediaTypeId),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.2992338512375948, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),Track.MediaTypeId,Invoice.InvoiceId),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.3042610298762851, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.MediaTypeId,Invoice.InvoiceId),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.31100172088338746, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(MediaType),Track.AlbumId,Invoice.InvoiceId),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.3153999655913246, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),Track.AlbumId,MediaType.MediaTypeId),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.3200898598196663, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.AlbumId,MediaType.MediaTypeId),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.32683054168960135, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(MediaType),Track.TrackId,MediaType.MediaTypeId),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.33365926847313016, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),Track.AlbumId,Invoice.InvoiceId),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.33625595589906154, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,!=,291866),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.AlbumId,MediaType.MediaTypeId), Track.Bytes),Track.Bytes))", "score": -0.4073540225512256, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,!=,291866),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId), Track.Bytes),Track.Bytes))", "score": -0.4251349014142419, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 230, "beams": [{"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.038988320268799725, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.33068633910776957, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3486885451818672, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3505026962905025, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4220140100800433, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4222065416173658, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.42904575087140984, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.43848265904783423, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4470054648072619, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4550882061607441, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.45782424981835695, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4699871908503253, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.47354318919575233, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.48678253509115166, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Track.Composer),Invoice.BillingPostalCode))", "score": -0.5115388325602908, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 231, "beams": [{"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,=,1.99),getData(Track),Track.AlbumId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.2452577229639717, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,=,1.99),getData(Track),Track.AlbumId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.30207191164435654, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,PlaylistTrack.TrackId),Track.Name,=,1.99),Track.Milliseconds),Album.Title))", "score": -0.30263699294300084, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3048806968125598, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,=,1.99),getData(Track),Track.AlbumId,PlaylistTrack.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3152351386001958, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),Track.AlbumId,PlaylistTrack.TrackId),Track.Name,=,1.99),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3225836634089666, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,PlaylistTrack.TrackId),Track.Name,=,1.99),Track.Milliseconds),Album.Title))", "score": -0.32620765061168927, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Name,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Track.TrackId),Track.Milliseconds),Album.Title))", "score": -0.3405192651662602, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),Track.AlbumId,InvoiceLine.TrackId),Track.Name,=,1.99),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.34791131528713115, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,PlaylistTrack.TrackId),Track.Name,=,1.99),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3496217044056247, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),Track.AlbumId,Track.GenreId),Track.Name,=,1.99),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.35102324204026625, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),Track.AlbumId,PlaylistTrack.TrackId),Playlist.Name,=,1.99),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.35161576435926994, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Name,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))", "score": -0.35254119887159185, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,PlaylistTrack.TrackId),Track.Name,=,1.99),Track.Milliseconds),Album.Title))", "score": -0.3670360404285309, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,PlaylistTrack.TrackId),Playlist.Name,=,1.99),Track.Milliseconds),Album.Title))", "score": -0.3896012331305459, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 232, "beams": [{"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))", "score": -0.01473524232278578, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.City))", "score": -0.5218416633724701, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.LastName),Customer.PostalCode))", "score": -0.6262772238987964, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),InvoiceLine.InvoiceLineId))", "score": -0.6418794574856292, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))", "score": -0.6540120406716596, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))", "score": -0.6639226837723982, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))", "score": -0.6719500959443394, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.City),Customer.PostalCode))", "score": -0.6743455088871997, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Album.Title,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))", "score": -0.6942611499398481, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Employee.PostalCode))", "score": -0.7010221662640106, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))", "score": -0.7167870565026533, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.LastName))", "score": -0.7268934431194793, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Employee.PostalCode),Customer.PostalCode))", "score": -0.7308133400219958, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))", "score": -0.744848446425749, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.Fax),Customer.PostalCode))", "score": -0.7470169223088305, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 233, "beams": [{"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(getData(Playlist), Playlist.Name),Playlist.Name))", "score": -0.029759028009805597, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(getData(Playlist), Playlist.Name),Employee.FirstName))", "score": -0.6563999176282144, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(getData(Playlist), Employee.FirstName),Playlist.Name))", "score": -0.7354652988015276, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(getData(Playlist), MediaType.Name),Playlist.Name))", "score": -0.7579278055247078, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(getData(Playlist), PlaylistTrack.PlaylistId),Playlist.Name))", "score": -0.7751386425479021, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(getData(PlaylistTrack), Playlist.Name),Playlist.Name))", "score": -0.7791650498680806, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(getData(Playlist), Customer.FirstName),Playlist.Name))", "score": -0.8146931738098956, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(getData(MediaType), Playlist.Name),Playlist.Name))", "score": -0.8152692034275112, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(getData(Playlist), Playlist.Name),MediaType.Name))", "score": -0.8248081276322906, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(getData(Playlist), Invoice.BillingState),Playlist.Name))", "score": -0.8585571641399232, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(getData(Playlist), Playlist.Name),Customer.FirstName))", "score": -0.9108148666996818, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(getData(Playlist), Playlist.Name),PlaylistTrack.PlaylistId))", "score": -0.9251846248604811, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(getData(Playlist), Playlist.Name),Playlist.PlaylistId))", "score": -0.9335309453164381, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(getData(Playlist), Customer.Country),Playlist.Name))", "score": -0.9630488363670039, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(getData(Invoice), Playlist.Name),Playlist.Name))", "score": -0.9819348566423898, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 234, "beams": [{"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Milliseconds,<,182883), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.22475916289677092, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Milliseconds,<,182883), Track.TrackId),Track.UnitPrice)", "score": -0.2598254400376748, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Milliseconds,<,182883), Track.TrackId),Invoice.Total)", "score": -0.2688313040264667, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Milliseconds,<,182883), Track.TrackId),Track.Milliseconds)", "score": -0.37719109336187073, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.40640548968639884, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>=,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4264603852132437, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,1),getData(Track),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.46678287049306544, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Milliseconds,<,182883), Track.TrackId),InvoiceLine.Quantity)", "score": -0.4727838533746111, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>=,1),getData(Track),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4868377660199103, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<,1),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4923956359562134, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4956209625601259, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<,1),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4974881952755797, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(merge(getData(Track),filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<,182883),Invoice.InvoiceId,Track.TrackId),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5001149893247687, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5063717510155232, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,1),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5129675971848681, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 235, "beams": [{"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingPostalCode,!=,1016), Genre.Name),Genre.Name))", "score": -0.08655907898091032, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.12164013281802681, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingPostalCode,!=,1016), Genre.Name),Genre.Name))", "score": -0.15426366537140518, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016), Genre.Name),Genre.Name))", "score": -0.1586785999441093, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.18140949783990304, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,1016),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.21758336796906402, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,1016), Genre.Name),Genre.Name))", "score": -0.2409295326162081, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Track.GenreId,Genre.GenreId),Invoice.BillingPostalCode,!=,1016), Genre.Name),Genre.Name))", "score": -0.2413919307607767, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,1016),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.24394413117985, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016), Genre.Name),Genre.Name))", "score": -0.25839955649814805, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,1016),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2826657249299855, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,!=,1016), Genre.Name),Genre.Name))", "score": -0.29293038315316106, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.GenreId,Genre.GenreId),Invoice.BillingPostalCode,!=,1016), Genre.Name),Genre.Name))", "score": -0.3130833832391022, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingPostalCode,=,1016), Genre.Name),Genre.Name))", "score": -0.31562306734598705, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingPostalCode,!=,1016), Genre.Name),Genre.Name))", "score": -0.3159595884365127, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 236, "beams": [{"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))", "score": -0.38233377296951326, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingCountry),Customer.Company))", "score": -0.43313133743702414, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<,1),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId), Invoice.BillingAddress),Customer.Company))", "score": -0.44202539868352925, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<,1),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId), Invoice.BillingPostalCode),Customer.Company))", "score": -0.44790429422020955, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.LastName))", "score": -0.45182342114115914, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,1),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId), Invoice.BillingAddress),Customer.Company))", "score": -0.46713454268122484, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,1),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId), Invoice.BillingPostalCode),Customer.Company))", "score": -0.47301343821790515, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<,1),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId), Invoice.BillingCountry),Customer.Company))", "score": -0.48393120796743866, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingPostalCode),Customer.Company))", "score": -0.4860810647561828, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Customer.Company))", "score": -0.4873378850633043, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId), Customer.Company),Customer.Company))", "score": -0.48788408703068137, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId), Invoice.BillingAddress),Customer.Company))", "score": -0.48847832758815807, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Customer.Company))", "score": -0.4932167805999846, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId), Invoice.BillingPostalCode),Customer.Company))", "score": -0.4943572142645549, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<,1),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId), Invoice.BillingAddress),Customer.Company))", "score": -0.4960005664784146, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 237, "beams": [{"orig_question": "How much is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)", "score": -0.1467337434967586, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "How much is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,0.99), Track.TrackId),Track.Bytes)", "score": -0.19140573192535884, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "How much is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,0.99), Track.TrackId),Track.Bytes)", "score": -0.20748692348520423, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "How much is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.Total,>=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.2790863014056458, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "How much is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.Total,>=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.2966248120467181, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "How much is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)", "score": -0.3283816664908516, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "How much is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,>=,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.33758168327309723, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "How much is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)", "score": -0.344462858050697, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "How much is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3703013424147212, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "How much is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>=,0.99), Track.TrackId),Track.Bytes)", "score": -0.37068662564943516, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "How much is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),Invoice.Total,>=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3715352502827405, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "How much is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,>=,0.99),getData(InvoiceLine),Track.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3715610751338339, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "How much is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,0.99), Track.TrackId),Track.UnitPrice)", "score": -0.3732178059205066, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "How much is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,>=,0.99),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.38584123916915075, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "How much is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>=,0.99), Track.TrackId),Track.Bytes)", "score": -0.38676785180311335, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 238, "beams": [{"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.AlbumId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.15405010294387989, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.16235197973871734, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Track.TrackId), Track.Name),Track.Name))", "score": -0.175302269104375, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.19487928780839242, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.19583631620130706, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks),merge(getData(Track),getData(Genre),Track.AlbumId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2029984142270663, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Album),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.20413819299614452, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2109148739378773, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Track.TrackId), Track.Name),Track.Name))", "score": -0.23460158288635152, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.25583839267717295, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.26285235825103714, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks),merge(getData(Track),getData(Album),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2637547935999618, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2779689889430649, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.29691704941626307, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Track.Name),Track.Name))", "score": -0.31218746256773616, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 239, "beams": [{"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.2787292303420274, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Address))", "score": -0.2835274991274705, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3330414849798129, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Invoice.BillingCountry),Customer.Country))", "score": -0.3435454662014904, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.3464938123356336, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Address))", "score": -0.3512920811210767, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingState),Customer.Address))", "score": -0.3533317892550912, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.35522752843214606, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.3573576805507579, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Invoice.BillingCountry),Invoice.BillingState))", "score": -0.35840124652522476, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Country))", "score": -0.35965726011283905, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Country))", "score": -0.3865436722080971, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.3915060595677959, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Invoice.BillingState))", "score": -0.4076734083552071, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Invoice.BillingCountry),Customer.Country))", "score": -0.42598295295050936, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 240, "beams": [{"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.1315742866354445, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Email),Customer.Email))", "score": -0.165543173221522, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Email),Customer.Email))", "score": -0.2392404943384463, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,None), Customer.Email),Customer.Email))", "score": -0.6754765778459841, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Email),Customer.Email))", "score": -0.6820452481188113, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,>=,None), Customer.Email),Customer.Email))", "score": -0.703587359530502, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Email),Customer.Address))", "score": -0.7114053957775468, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Email),Customer.State))", "score": -0.7747782461956376, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,>=,None), Customer.Email),Customer.Email))", "score": -0.7772846806474263, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Email),Customer.Address))", "score": -0.7851027168944711, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Address))", "score": -0.8210458990466035, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Email),Customer.Fax))", "score": -0.8236632340267533, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Email),Customer.State))", "score": -0.8484755673125619, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,None), Customer.Email),Customer.Email))", "score": -0.8562122851290042, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Country,=,None), Customer.Email),Customer.Email))", "score": -0.8604257970728213, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 241, "beams": [{"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.07175702443639706, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.13016809214347955, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.1406910515199942, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.1471571606174577, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.20653590349720807, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.22853885949602995, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.23296581242528153, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2588806104128262, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2697711172951598, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.27082776640394735, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Track.UnitPrice),Invoice.InvoiceDate))", "score": -0.27188531655815806, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.30727720852876306, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),Track.MediaTypeId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3209769475264529, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),Track.TrackId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.345088157391163, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file), Track.UnitPrice),Invoice.InvoiceDate))", "score": -0.346254920808434, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 242, "beams": [{"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.08909815908373275, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,NS), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.20799169302881637, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>,NS), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3030725306362001, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Customer.City))", "score": -0.3902035261035053, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,NS), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.4350619798988191, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,NS), Invoice.BillingCity),Customer.City))", "score": -0.5090970600485889, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.5324538469776599, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>,NS), Invoice.BillingCity),Customer.City))", "score": -0.6041778976559726, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,null,NS), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6198149806350557, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.InvoiceDate))", "score": -0.6330091560721485, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingState),Invoice.BillingCity))", "score": -0.6344849288925616, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,NS), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.6513473809227435, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,<=,NS), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6601436024993745, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,<,NS), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.7338923102706758, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Customer.City),Invoice.BillingCity))", "score": -0.73544279937596, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 243, "beams": [{"orig_question": "Are there any orders from Portugal for which the file type was not specified?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,!=,Portugal),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Invoice.Total))", "score": -0.2019205066974374, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Portugal), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any orders from Portugal for which the file type was not specified?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Portugal),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.Total))", "score": -0.22510291432574367, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Portugal), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any orders from Portugal for which the file type was not specified?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),MediaType.Name,!=,Portugal),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Invoice.Total))", "score": -0.23661881441285235, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Portugal), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any orders from Portugal for which the file type was not specified?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Portugal),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),Invoice.Total))", "score": -0.26081167899821955, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Portugal), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any orders from Portugal for which the file type was not specified?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,!=,Portugal),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Invoice.BillingAddress))", "score": -0.2622319284305947, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Portugal), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any orders from Portugal for which the file type was not specified?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,!=,Portugal),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,Track.MediaTypeId), MediaType.Name),Invoice.Total))", "score": -0.26377509574415847, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Portugal), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any orders from Portugal for which the file type was not specified?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,!=,Portugal),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Customer.Address))", "score": -0.2651563435126984, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Portugal), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any orders from Portugal for which the file type was not specified?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Portugal),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingAddress))", "score": -0.2667640285456834, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Portugal), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any orders from Portugal for which the file type was not specified?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Portugal),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),Invoice.Total))", "score": -0.26779115038463475, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Portugal), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any orders from Portugal for which the file type was not specified?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Portugal),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Customer.Address))", "score": -0.28996523162168963, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Portugal), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any orders from Portugal for which the file type was not specified?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),MediaType.Name,!=,Portugal),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Invoice.BillingAddress))", "score": -0.2969302361460096, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Portugal), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any orders from Portugal for which the file type was not specified?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),MediaType.Name,!=,Portugal),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,Track.MediaTypeId), MediaType.Name),Invoice.Total))", "score": -0.2984734034595734, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Portugal), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any orders from Portugal for which the file type was not specified?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),MediaType.Name,!=,Portugal),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Customer.Address))", "score": -0.2998546512281134, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Portugal), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any orders from Portugal for which the file type was not specified?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,!=,Portugal),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingAddress))", "score": -0.3011009142739634, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Portugal), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any orders from Portugal for which the file type was not specified?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,!=,Portugal),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingState),Invoice.Total))", "score": -0.3013410953609409, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Portugal), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 244, "beams": [{"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(getData(Customer), MediaType.Name),MediaType.Name))", "score": -0.22677347782731463, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(getData(InvoiceLine), MediaType.Name),MediaType.Name))", "score": -0.296732567909007, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Audiobooks),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3506249984184423, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Audiobooks),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.37014059560621415, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Audiobooks),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3817507792158708, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Audiobooks),getData(Track),Genre.GenreId,Track.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3924548522188524, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Audiobooks),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.4074510776517672, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Audiobooks),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.4096441079050716, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),MediaType.MediaTypeId,Track.GenreId),Genre.Name,!=,Audiobooks),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.4169578587595302, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.417389276946071, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,Track.GenreId),Genre.Name,!=,Audiobooks),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.41784555321021644, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Audiobooks),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.44642490366403587, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Audiobooks),getData(Track),MediaType.MediaTypeId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.4473167306012402, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Audiobooks),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.4580208036042218, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Audiobooks),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.45886222555640127, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 245, "beams": [{"orig_question": "who are you", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),Track.Milliseconds)", "score": -0.2891896123780857, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.38213539782886663, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "avg(distinct(filter(getData(Track),Track.Name,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.3951250025061999, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)", "score": -0.4078590176139728, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,None), Track.TrackId),Track.Milliseconds)", "score": -0.4987098928145081, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "avg(distinct(filter(getData(Track),Track.Name,=,None), Track.TrackId),Track.Milliseconds)", "score": -0.5116994974918414, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "avg(distinct(filter(getData(Track),Track.Bytes,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.531120327189541, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,None), Track.UnitPrice),Track.UnitPrice))", "score": -0.5330121056067583, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,None), Track.UnitPrice),Track.Bytes))", "score": -0.6149185509311792, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "avg(distinct(filter(getData(Track),Track.Bytes,=,None), Track.TrackId),Track.Milliseconds)", "score": -0.6476948221751825, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "avg(distinct(filter(getData(Track),Album.Title,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.651938221077358, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,None), Track.TrackId),Track.Bytes)", "score": -0.6996969238980492, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "avg(distinct(filter(getData(Track),Track.Name,=,None), Track.TrackId),Track.Bytes)", "score": -0.7126865285753824, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,None), Track.UnitPrice),Track.Milliseconds))", "score": -0.7495182962047693, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Name,=,None),getData(Track),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.8064686082764461, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 246, "beams": [{"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Album.Title,=,1),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.11831515472861237, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Album.Title,=,1),getData(Track),Genre.GenreId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.1623355193910373, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Album.Title,=,1),getData(Track),Album.AlbumId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.21392264143794726, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Album.Title,=,1),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.2579430061003722, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Album),Album.Title,=,1),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.2589847328846279, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Album.Title,<=,1),Track.UnitPrice),Album.Title))", "score": -0.2812313830852898, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Album.Title,=,1),Track.UnitPrice),Album.Title))", "score": -0.2930405062108571, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Album),Album.Title,=,1),getData(Track),Genre.GenreId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.30300509754705285, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Album.Title,!=,1),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3108799856867074, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(merge(merge(getData(Track),getData(Album),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.31272050407895113, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Album.Title,=,1),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.32864080819058383, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(merge(merge(getData(Genre),getData(Album),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3349802332605509, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Artist.Name,=,1),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3438000283031651, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Album),Album.Title,=,1),getData(Track),Album.AlbumId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3545922287311301, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(merge(merge(getData(Album),getData(Album),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.38127511973078343, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 247, "beams": [{"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,560001), Customer.City),Customer.City))", "score": -0.03739209231753193, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingPostalCode,=,560001), Customer.City),Customer.City))", "score": -0.28537887838501774, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,560001), Customer.City),Customer.City))", "score": -0.5411497404875263, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,560001), Customer.City),Customer.City))", "score": -0.5503246238531574, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,560001), Customer.State),Customer.City))", "score": -0.5613812421524926, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.PostalCode,=,560001), Customer.City),Customer.City))", "score": -0.582365889016728, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -0.593631583406931, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.PostalCode,=,560001), Customer.City),Customer.City))", "score": -0.638485496312569, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,560001), InvoiceLine.UnitPrice),Customer.City))", "score": -0.6783530329430505, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,560001), Customer.City),Customer.City))", "score": -0.7021712792648032, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,560001), Customer.City),Customer.State))", "score": -0.722760191451016, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,560001), Customer.Fax),Customer.City))", "score": -0.7565962289536401, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,560001), Employee.HireDate),Customer.City))", "score": -0.7694450234139367, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,560001), Invoice.BillingCity),Customer.City))", "score": -0.7712393169658753, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,560001), Customer.City),Customer.City))", "score": -0.7732812961930904, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 248, "beams": [{"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Lethbridge),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1901802067904912, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.City,=,Lethbridge),merge(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23089476936386827, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Lethbridge),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23101958038973366, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Lethbridge),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23421357148208496, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.City,=,Lethbridge),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24038581734471146, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.City,=,Lethbridge),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24426833416881888, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Invoice.BillingCity,=,Lethbridge),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2605755970017055, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,=,Lethbridge),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.26202420946503424, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.City,=,Lethbridge),merge(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.InvoiceId,Invoice.CustomerId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27012041949568455, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.City,=,Lethbridge),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2717464494582263, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Lethbridge),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27505294508132744, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.City,=,Lethbridge),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27562898791762724, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Lethbridge),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28158159548256656, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Lethbridge),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,Customer.SupportRepId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2926386769767678, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Lethbridge),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2955981580428101, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
