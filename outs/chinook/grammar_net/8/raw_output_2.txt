{"index": 0, "beams": [{"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.Company),Customer.Company))", "score": -0.11941607927360175, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1), Customer.Company),Customer.Company))", "score": -0.14526192260168527, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,1), Customer.Company),Customer.Company))", "score": -0.28098707162881953, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))", "score": -0.29501239828121983, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,>=,1), Customer.Company),Customer.Company))", "score": -0.3081317285395926, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,<=,1), Customer.Company),Customer.Company))", "score": -0.323633519218839, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))", "score": -0.3436857673818142, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.Company),Customer.Company))", "score": -0.3617729377427311, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.Company),Customer.City))", "score": -0.384134809090122, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))", "score": -0.39898994889929285, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1), Customer.Address),Customer.Company))", "score": -0.4085320569874735, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,>=,1), Customer.Company),Customer.Company))", "score": -0.41023772386474744, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.Address),Customer.Company))", "score": -0.41086616964925887, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.Company))", "score": -0.41206121497313436, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1), Customer.Company),Customer.Company))", "score": -0.41364697016593166, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 1, "beams": [{"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.15783001880481606, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.18674470137193566, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.3206557298763073, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.3495704124434269, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.3503518218858517, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.3792665044529713, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.49881358097627526, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.5277282635433949, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.5380028240501746, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.5533264362007095, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.5577281198061633, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Playlist.Name))", "score": -0.6168662088675774, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Track.UnitPrice))", "score": -0.6290636735720909, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,11.94), Invoice.BillingState),Playlist.Name))", "score": -0.645780891434697, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "count(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.6503745163136045, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 2, "beams": [{"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.11664551015084014, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.14740606683351634, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2047208265761283, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.2454143891249837, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24564669871112924, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24618831205415248, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Invoice),Track.TrackId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2754349467854123, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.28231480240152496, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.2895772867225113, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2919043038334574, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3021542364731061, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3076736274306593, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Invoice),Track.TrackId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.31936553479679436, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3216925519077405, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3226697585009026, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 3, "beams": [{"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.060998029419828334, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.09460975304049993, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2136393025048822, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),getData(Genre),PlaylistTrack.PlaylistId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2699456346892537, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.TrackId), Genre.Name),Genre.Name))", "score": -0.27797573782827156, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),getData(Genre),PlaylistTrack.TrackId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.3126264706876931, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3135649594791269, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.3181934003347183, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.32531347734336913, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3547421728877129, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),getData(Track),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.35537335317720625, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.3775993866882699, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,Playlist.PlaylistId), Genre.Name),Genre.Name))", "score": -0.39993589159789183, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),getData(Artist),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.4119277627767805, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.42189062516769643, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 4, "beams": [{"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Country),Employee.Country))", "score": -0.2683382315299241, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Country),Employee.Country))", "score": -0.32224622198555153, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,AB), Employee.Country),Employee.Country))", "score": -0.32761409708473366, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.BirthDate),Employee.Country))", "score": -0.36855128237220924, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Country),Employee.BirthDate))", "score": -0.389481095757219, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.BirthDate),Employee.Country))", "score": -0.4224592728278367, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,AB), Employee.BirthDate),Employee.Country))", "score": -0.4278271479270188, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,AB), Employee.Country),Employee.Country))", "score": -0.43225434252235573, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Country),Employee.BirthDate))", "score": -0.44338908621284645, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,AB), Employee.Country),Employee.BirthDate))", "score": -0.4487569613120286, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.BirthDate),Employee.BirthDate))", "score": -0.48969414659950417, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Country),Employee.HireDate))", "score": -0.5283292663953034, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,AB), Employee.BirthDate),Employee.Country))", "score": -0.5324673933646409, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.BirthDate),Employee.BirthDate))", "score": -0.5436021370551316, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,AB), Employee.BirthDate),Employee.BirthDate))", "score": -0.5489700121543137, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 5, "beams": [{"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))", "score": -0.08857651001108025, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Phone))", "score": -0.25036831891429756, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,5827 Bowness Road NW), Employee.Country),Employee.Country))", "score": -0.3684535095680985, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,5827 Bowness Road NW), Employee.Country),Employee.Country))", "score": -0.4122429559220109, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Fax))", "score": -0.43747336363685463, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,5827 Bowness Road NW), Employee.Country),Employee.Country))", "score": -0.5176292130936417, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,5827 Bowness Road NW), Employee.Country),Employee.Phone))", "score": -0.5302453184713158, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Fax),Employee.Country))", "score": -0.5327569967348609, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Address))", "score": -0.541546709298018, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingAddress,=,5827 Bowness Road NW), Employee.Country),Employee.Country))", "score": -0.5511609981049332, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Phone),Employee.Country))", "score": -0.5569556480486426, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,5827 Bowness Road NW), Employee.Country),Employee.Phone))", "score": -0.5740347648252282, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.State),Employee.Country))", "score": -0.6299816196997199, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Milliseconds,=,5827 Bowness Road NW), Employee.Country),Employee.Country))", "score": -0.6335448393811021, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,5827 Bowness Road NW), Employee.Country),Employee.Country))", "score": -0.634325839041594, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 6, "beams": [{"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))", "score": -0.033209792145498795, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),MediaType.Name))", "score": -0.45123462639094214, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), MediaType.Name),Customer.FirstName))", "score": -0.4751701753521047, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.Email))", "score": -0.49260138235331397, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.Email),Customer.FirstName))", "score": -0.5457339387321554, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.LastName),Customer.FirstName))", "score": -0.5851709943199239, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.State),Customer.FirstName))", "score": -0.5871467690849386, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.LastName))", "score": -0.5951076622986875, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),MediaType.MediaTypeId))", "score": -0.6125119205498777, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Track.Name))", "score": -0.6155488368058286, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))", "score": -0.6583110971077986, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Employee.LastName))", "score": -0.6801246877694211, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Employee.FirstName))", "score": -0.6948698636078916, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))", "score": -0.6984827040978416, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Genre.GenreId))", "score": -0.7084390398049436, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 7, "beams": [{"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.14124446123516796, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes),Track.Name))", "score": -0.1475016109036065, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.17526653649392668, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes),Track.Name))", "score": -0.2456662861721064, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Bytes))", "score": -0.2900716990472189, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))", "score": -0.29177543520037186, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Album.Title))", "score": -0.2938621283100222, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),Track.Bytes),Track.Name))", "score": -0.31235530565376757, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes),Track.Bytes))", "score": -0.31812771107135523, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Bytes))", "score": -0.32409377430597763, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))", "score": -0.3257975104591306, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Album.Title))", "score": -0.32788420356878084, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes),Album.Title))", "score": -0.3350566648197203, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.39666271803545944, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Name),Track.Name))", "score": -0.3985436229110578, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 8, "beams": [{"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.034408643506139924, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.3819232691448633, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.41658384691891115, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.Email),Employee.LastName))", "score": -0.45649130329456966, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Artist.Name,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.5065082420032923, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.Email))", "score": -0.5435670163851682, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.FirstName),Employee.LastName))", "score": -0.5731783924993579, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.FirstName))", "score": -0.6038953211527769, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.6386632133644525, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.City),Employee.LastName))", "score": -0.6575743375715319, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.6606349755447809, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Artist.ArtistId))", "score": -0.6648780253153745, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Customer.LastName),Employee.LastName))", "score": -0.7417450962957446, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Album.ArtistId,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.7567722011726801, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.7569768835228388, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 9, "beams": [{"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,10317185), Playlist.Name),Playlist.Name))", "score": -0.11307095079056036, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,10317185),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.16170256821349724, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>,10317185), Playlist.Name),Playlist.Name))", "score": -0.17557325538423446, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>,10317185),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.21726451531237084, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,10317185), Playlist.Name),Playlist.Name))", "score": -0.24777809533485892, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))", "score": -0.2619545156396168, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<,10317185),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.26597243850500846, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,10317185), Playlist.Name),Playlist.Name))", "score": -0.310280399928533, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<,10317185), Playlist.Name),Playlist.Name))", "score": -0.3129017289151602, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,10317185),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.31812691098840806, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,10317185),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.32671444501691527, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,10317185), Playlist.Name),Playlist.Name))", "score": -0.3297467580586228, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,<,10317185), Playlist.Name),Playlist.Name))", "score": -0.3670948375323733, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,10317185),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.37368883995138896, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,10317185), Playlist.Name),Playlist.Name))", "score": -0.380452740493638, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 10, "beams": [{"orig_question": "How many different billing addresses does the company JetBrains s.r.o., that communicates with our employees in Calgary, have ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Employee),Employee.City,=,Calgary),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.11105463430077502, "correct_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Company,=,JetBrains s.r.o.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Calgary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "How many different billing addresses does the company JetBrains s.r.o., that communicates with our employees in Calgary, have ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Employee),Employee.LastName,=,Calgary),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.186948840906024, "correct_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Company,=,JetBrains s.r.o.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Calgary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "How many different billing addresses does the company JetBrains s.r.o., that communicates with our employees in Calgary, have ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Employee),Employee.Fax,=,JetBrains s.r.o.),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.25790242498167176, "correct_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Company,=,JetBrains s.r.o.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Calgary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "How many different billing addresses does the company JetBrains s.r.o., that communicates with our employees in Calgary, have ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Employee),Employee.City,=,Calgary),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Employee.Address),Invoice.BillingAddress))", "score": -0.29338331933073614, "correct_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Company,=,JetBrains s.r.o.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Calgary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "How many different billing addresses does the company JetBrains s.r.o., that communicates with our employees in Calgary, have ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Employee),Artist.Name,=,JetBrains s.r.o.),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3033522413248849, "correct_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Company,=,JetBrains s.r.o.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Calgary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "How many different billing addresses does the company JetBrains s.r.o., that communicates with our employees in Calgary, have ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Employee),Employee.City,=,Calgary),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Customer.Address),Invoice.BillingAddress))", "score": -0.34028331598788464, "correct_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Company,=,JetBrains s.r.o.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Calgary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "How many different billing addresses does the company JetBrains s.r.o., that communicates with our employees in Calgary, have ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Employee),Employee.City,=,Calgary),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.36012747192029537, "correct_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Company,=,JetBrains s.r.o.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Calgary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "How many different billing addresses does the company JetBrains s.r.o., that communicates with our employees in Calgary, have ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Employee),Employee.Title,=,Calgary),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.36514187344885607, "correct_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Company,=,JetBrains s.r.o.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Calgary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "How many different billing addresses does the company JetBrains s.r.o., that communicates with our employees in Calgary, have ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Employee),Employee.City,=,Calgary),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingState),Invoice.BillingAddress))", "score": -0.3666508461736687, "correct_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Company,=,JetBrains s.r.o.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Calgary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "How many different billing addresses does the company JetBrains s.r.o., that communicates with our employees in Calgary, have ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Employee),Employee.LastName,=,Calgary),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Employee.Address),Invoice.BillingAddress))", "score": -0.3692775259359851, "correct_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Company,=,JetBrains s.r.o.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Calgary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "How many different billing addresses does the company JetBrains s.r.o., that communicates with our employees in Calgary, have ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Employee),Employee.City,=,Calgary),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Track.AlbumId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.377781948290597, "correct_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Company,=,JetBrains s.r.o.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Calgary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "How many different billing addresses does the company JetBrains s.r.o., that communicates with our employees in Calgary, have ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Employee),Employee.City,=,Calgary),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.Total),Invoice.BillingAddress))", "score": -0.38118490074480454, "correct_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Company,=,JetBrains s.r.o.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Calgary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "How many different billing addresses does the company JetBrains s.r.o., that communicates with our employees in Calgary, have ", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,JetBrains s.r.o.),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.39828052267361563, "correct_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Company,=,JetBrains s.r.o.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Calgary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "How many different billing addresses does the company JetBrains s.r.o., that communicates with our employees in Calgary, have ", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.City,=,Calgary),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.39956451818996547, "correct_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Company,=,JetBrains s.r.o.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Calgary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "How many different billing addresses does the company JetBrains s.r.o., that communicates with our employees in Calgary, have ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Employee),Employee.City,=,Calgary),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingAddress),Invoice.Total))", "score": -0.4321301863500613, "correct_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Company,=,JetBrains s.r.o.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Calgary), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 11, "beams": [{"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21873891645480248, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),getData(Invoice),Customer.CustomerId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.26193620967320036, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.26615349134738975, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.26787136220753427, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2870000315075956, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceDate),Invoice.Total)", "score": -0.28854638324170395, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.30540651989815354, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceDate),Invoice.Total)", "score": -0.30767505254176536, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3091503184838343, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.32453518919821495, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceDate),Invoice.Total)", "score": -0.3260815409323233, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3282789877838957, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceDate),Invoice.Total)", "score": -0.329825339518004, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3308424630225073, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3326845536533155, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 12, "beams": [{"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.23812249716293138, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.24527340532698508, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.24531178628426042, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.25088968242367893, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.FirstName,=,Fernanda),merge(getData(Customer),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.25109174292303676, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2554453812919251, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.FirstName,=,Fernanda),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.25783121618684995, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.258078971545008, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Customer),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.26796015788876687, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Invoice),Customer.CustomerId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.28007097773819356, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2829725802400853, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Invoice),Customer.CustomerId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2872602668595226, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(InvoiceLine),Customer.CustomerId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.29283816684806063, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.29314454808905255, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Customer),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3056593246858943, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 13, "beams": [{"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.13123891438044666, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Customer.Country))", "score": -0.14959607208766101, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Customer.Country),Invoice.BillingCountry))", "score": -0.3400926956037438, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Customer.Country),Customer.Country))", "score": -0.35844985331095813, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,MA),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.4247276563095501, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,MA),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.427175079247111, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,MA),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.5009902269844432, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,MA),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.5186752176448195, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,MA),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.5211226405823803, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5488550265381491, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,MA), Invoice.BillingCountry),Customer.Country))", "score": -0.5672121842453635, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,MA),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingCountry),Customer.Country))", "score": -0.5710971256955689, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,MA),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingCountry),Customer.Country))", "score": -0.5735445297963749, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,MA),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Invoice.BillingCountry))", "score": -0.6458615492507304, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,MA),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Invoice.BillingCountry))", "score": -0.6483089721882912, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 14, "beams": [{"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,U2), Track.Bytes),Track.Bytes))", "score": -0.006666961274277128, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,U2), Track.Bytes),Track.Bytes))", "score": -0.5698767564344962, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,U2), Track.Bytes),Album.Title))", "score": -0.5812052965948169, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,U2), Track.UnitPrice),Track.Bytes))", "score": -0.666348772038873, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,U2), Track.Bytes),Track.Bytes))", "score": -0.6970916650343497, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,U2), Track.Bytes),Track.Name))", "score": -0.7848998189756458, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,U2), Track.Bytes),Track.UnitPrice))", "score": -0.7930803776571338, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Title,=,U2), Track.Bytes),Track.Bytes))", "score": -0.8403451106596549, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,U2), Track.Composer),Track.Bytes))", "score": -0.8446855711836179, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,U2), Track.Name),Track.Bytes))", "score": -0.8700689840216, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,U2), Track.Bytes),Track.Bytes))", "score": -0.876657809977587, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,U2), Album.Title),Track.Bytes))", "score": -0.8777825403112729, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Artist.Name,=,U2), Track.Bytes),Track.Bytes))", "score": -0.925458874468859, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Playlist.Name,=,U2), Track.Bytes),Track.Bytes))", "score": -0.934924628500994, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Genre.Name,=,U2), Track.Bytes),Track.Bytes))", "score": -0.9534371755171378, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 15, "beams": [{"orig_question": "What is the average amount on an order of tracks by the Scholars Baroque Ensemble?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Scholars Baroque Ensemble), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.10903547578409657, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on an order of tracks by the Scholars Baroque Ensemble?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Scholars Baroque Ensemble), Track.TrackId),Invoice.Total)", "score": -0.12067165677996414, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on an order of tracks by the Scholars Baroque Ensemble?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.1366026888892538, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on an order of tracks by the Scholars Baroque Ensemble?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Scholars Baroque Ensemble), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.1819402992329065, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on an order of tracks by the Scholars Baroque Ensemble?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Scholars Baroque Ensemble), Invoice.InvoiceId),Invoice.Total)", "score": -0.1916685085662047, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on an order of tracks by the Scholars Baroque Ensemble?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Track.TrackId),Invoice.Total)", "score": -0.19283382352270156, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on an order of tracks by the Scholars Baroque Ensemble?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Scholars Baroque Ensemble), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21467955030916186, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on an order of tracks by the Scholars Baroque Ensemble?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Scholars Baroque Ensemble), Track.TrackId),Invoice.Total)", "score": -0.22455331281934968, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on an order of tracks by the Scholars Baroque Ensemble?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Track.TrackId),Invoice.Total)", "score": -0.22943229963238773, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on an order of tracks by the Scholars Baroque Ensemble?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2365858514349628, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on an order of tracks by the Scholars Baroque Ensemble?", "inferred_code": "avg(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Scholars Baroque Ensemble),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2478800253410092, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on an order of tracks by the Scholars Baroque Ensemble?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Scholars Baroque Ensemble), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.25352006403901733, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on an order of tracks by the Scholars Baroque Ensemble?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Scholars Baroque Ensemble), Invoice.InvoiceId),Invoice.Total)", "score": -0.2602411292987228, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on an order of tracks by the Scholars Baroque Ensemble?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId),Artist.Name,=,Scholars Baroque Ensemble), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2652662212274804, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on an order of tracks by the Scholars Baroque Ensemble?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.26625441982706427, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 16, "beams": [{"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.1203926917830288, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.16192862104497419, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.19783328333400535, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.21915489609063935, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.21995149928422175, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.22333073410666193, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2315364573894248, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.23625385347639669, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.23794409136023706, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.25769138055684065, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(Track),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2597316565754166, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2656217748661495, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.26677254454503674, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.26744112745147386, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.26808477308943796, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 17, "beams": [{"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.Country),Customer.Country))", "score": -0.029570259698630252, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.PostalCode,=,21000), Customer.Country),Customer.Country))", "score": -0.4209573637554058, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingPostalCode,=,21000), Customer.Country),Customer.Country))", "score": -0.47989688029974786, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.Country),Invoice.BillingCountry))", "score": -0.5054792338842162, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.Country),Customer.Fax))", "score": -0.5380287939542541, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.PostalCode,=,21000), Customer.Country),Customer.Country))", "score": -0.5568919168645152, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.PostalCode,=,21000), Customer.Country),Customer.Country))", "score": -0.6229140149289378, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,21000), Customer.Country),Customer.Country))", "score": -0.6400782536575207, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.Country),Customer.Phone))", "score": -0.6443686658376464, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Artist.Name,=,21000), Customer.Country),Customer.Country))", "score": -0.6681936453887829, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.Country),Employee.Country))", "score": -0.6885200315946349, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Invoice.BillingCountry),Customer.Country))", "score": -0.7062233975948402, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.Fax),Customer.Country))", "score": -0.7657039454998085, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,21000), Customer.Country),Customer.Country))", "score": -0.7952397536346325, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,21000), Customer.Country),Customer.Country))", "score": -0.8077232908317455, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 18, "beams": [{"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.13056839705030257, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.14555709236752323, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),MediaType.MediaTypeId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.16667466431256078, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Genre.GenreId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.19692495128813634, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.20056913500982296, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Artist.ArtistId,Track.AlbumId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.22416341312172183, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2391521084389425, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.24678493350885383, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.24763925079736743, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,The Black Crowes),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2557500328292501, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),MediaType.MediaTypeId,Track.AlbumId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.26026968038398, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Album.AlbumId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2617736288260745, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),MediaType.MediaTypeId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.28289120071255824, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Artist.ArtistId,Album.ArtistId),Genre.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.28627940668086993, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.31843436350911325, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 19, "beams": [{"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Invoice),Track.MediaTypeId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.23465980007662135, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.MediaTypeId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.23957344818427004, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2562710452577092, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),InvoiceLine.InvoiceId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.26118469336535793, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.292095703372358, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),Track.MediaTypeId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.2944562027360558, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Invoice),Track.MediaTypeId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3055849378112494, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.MediaTypeId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.31049858591889806, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Invoice),Track.MediaTypeId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3116282153313215, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.31193025326929397, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),InvoiceLine.InvoiceId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3137069485534459, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.MediaTypeId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.31654186343897023, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Invoice),Track.MediaTypeId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Playlist.Name),MediaType.Name))", "score": -0.31916045714007263, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Invoice),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.32320506937749854, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.MediaTypeId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Playlist.Name),MediaType.Name))", "score": -0.3240741221112177, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 20, "beams": [{"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,Fort Worth), Employee.State),Employee.State))", "score": -0.31323248268381576, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.HireDate,=,Fort Worth), Employee.State),Employee.State))", "score": -0.32154423118845443, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Country,=,Fort Worth), Employee.State),Employee.State))", "score": -0.39661817373053054, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Fort Worth), Employee.State),Employee.State))", "score": -0.4049299222351692, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.State,=,Fort Worth), Employee.State),Employee.State))", "score": -0.4341766846300743, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Fort Worth), Employee.State),Employee.State))", "score": -0.44207018734232406, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Fort Worth), Employee.State),Employee.State))", "score": -0.442488433134713, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,Fort Worth), Customer.State),Employee.State))", "score": -0.4487062071384571, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Country,=,Fort Worth), Employee.State),Employee.State))", "score": -0.45038193584696273, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.HireDate,=,Fort Worth), Customer.State),Employee.State))", "score": -0.4570179556430958, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Fort Worth), Employee.State),Employee.State))", "score": -0.4616199743868492, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,Fort Worth), Employee.State),Employee.State))", "score": -0.4699317228914879, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,Fort Worth), Employee.State),Employee.State))", "score": -0.49737838589862804, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.State,=,Fort Worth), Employee.State),Employee.State))", "score": -0.5056901344032667, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Country,=,Fort Worth), Customer.State),Employee.State))", "score": -0.5320919335754297, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 21, "beams": [{"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.0404719463244507, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.Milliseconds)", "score": -0.20624301110991383, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.22204971429626905, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2308815584303082, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada), Track.TrackId),Track.Milliseconds)", "score": -0.23232897155936286, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.255660945853031, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2580291055276893, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.26494928864251444, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2660522848571804, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.BirthDate,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.27872272149998595, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Album.ArtistId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2788324529070458, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Fax,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.280296783012428, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.State,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.28449310269952555, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Customer),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.28683597369609576, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Customer.CustomerId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2871353133913068, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 22, "beams": [{"orig_question": "Are there no billing countries of sold tracks whose media types is Protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.08750438121036905, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there no billing countries of sold tracks whose media types is Protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.12835352674890246, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there no billing countries of sold tracks whose media types is Protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.22018534642961027, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there no billing countries of sold tracks whose media types is Protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.22071903633149176, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there no billing countries of sold tracks whose media types is Protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.25804143866723034, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there no billing countries of sold tracks whose media types is Protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2585697405628447, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there no billing countries of sold tracks whose media types is Protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2698382136654568, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there no billing countries of sold tracks whose media types is Protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),Track.TrackId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.27764290961699195, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there no billing countries of sold tracks whose media types is Protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.28283945004164723, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there no billing countries of sold tracks whose media types is Protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.28550487179854067, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there no billing countries of sold tracks whose media types is Protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),Track.TrackId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2889113827196041, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there no billing countries of sold tracks whose media types is Protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3063279615528312, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there no billing countries of sold tracks whose media types is Protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(Invoice),Track.TrackId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.31446057758982066, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there no billing countries of sold tracks whose media types is Protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.32574318615136, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there no billing countries of sold tracks whose media types is Protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3262303565257342, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 23, "beams": [{"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,>,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.3063690459686037, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.30902515915242823, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),MediaType.Name))", "score": -0.3199336566153243, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,>,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),MediaType.Name))", "score": -0.33712683424728057, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,>,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),MediaType.Name))", "score": -0.34080419320147476, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),MediaType.Name))", "score": -0.34722254995721025, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),MediaType.Name))", "score": -0.36415536678916244, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.369915500892732, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,>,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),MediaType.Name))", "score": -0.37207556113684553, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,>,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.3750739863572211, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,1.99), Invoice.Total),Invoice.BillingAddress))", "score": -0.41336265967654745, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<=,1.99), Invoice.Total),Invoice.BillingAddress))", "score": -0.4135981265505529, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,1.99), Invoice.Total),Invoice.Total))", "score": -0.4157182727724009, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<=,1.99), Invoice.Total),Invoice.Total))", "score": -0.4159537396464064, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,>,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), MediaType.Name),InvoiceLine.Quantity))", "score": -0.4272616379233904, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 24, "beams": [{"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197), Playlist.Name),Playlist.Name))", "score": -0.05622343035166696, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.15419285149089867, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197),Track.Name,=,254197), Playlist.Name),Playlist.Name))", "score": -0.3895399851415323, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197), Playlist.Name),Playlist.Name))", "score": -0.39627414960035606, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.Name),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197), Playlist.Name),Playlist.Name))", "score": -0.4103542088540655, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,254197),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.42112328192614773, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197), Track.UnitPrice),Playlist.Name))", "score": -0.4223520457033382, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197),getData(PlaylistTrack),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.4278450533359315, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197), Playlist.Name),Track.UnitPrice))", "score": -0.43415456203394825, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,254197),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.4390985374258967, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(PlaylistTrack),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197), Playlist.Name),Playlist.Name))", "score": -0.4421508067764925, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,PlaylistTrack.TrackId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197), Playlist.Name),Playlist.Name))", "score": -0.4522903557485309, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,254197), Playlist.Name),Playlist.Name))", "score": -0.45330847496511517, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Track.UnitPrice),Playlist.Name))", "score": -0.45699956768558964, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197),getData(Playlist),PlaylistTrack.TrackId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.46285470229555165, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 25, "beams": [{"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.04614915090678551, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.38867083971717875, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)", "score": -0.46925393136732724, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.5713817283703975, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.TrackId),Track.Bytes)", "score": -0.6115215596331234, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.UnitPrice),Track.Bytes))", "score": -0.6817791816738463, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.689329902847021, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.UnitPrice))", "score": -0.7285929817899159, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Track.Composer,=,Ralph Vaughan Williams),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.7303333726803201, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Track.Composer,=,Ralph Vaughan Williams),getData(Track),Track.TrackId,Track.TrackId),getData(Track),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.7340376576092311, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Track.Composer,=,Ralph Vaughan Williams),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.7458687438808884, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(getData(Track), Track.Bytes),Track.Bytes))", "score": -0.7817144417472721, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Track.Composer,=,Ralph Vaughan Williams),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.7888458014508337, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Track.Composer,=,Ralph Vaughan Williams),getData(Track),Track.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.7925500863797448, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Track.Composer,=,Ralph Vaughan Williams),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.7950296396087417, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 26, "beams": [{"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.0829647145180808, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.11228109017433704, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.14956692260635862, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected MPEG-4 video file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.17522064184983646, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2511614768334779, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2638549919768353, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.2890062194923236, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.29943151680475383, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3194424159456469, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected MPEG-4 video file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.32239095130725115, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.33660587824570654, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.35087674587650536, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.353991865778668, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "avg(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.41337828567270857, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.4143254649218878, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 27, "beams": [{"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.12204233073452997, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Customer.State))", "score": -0.20582059287289667, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.3537530664430051, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.41518304385999727, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Employee.State))", "score": -0.4206294145510583, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,25.86), Invoice.BillingState),Customer.State))", "score": -0.4375313285813718, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Customer.Country))", "score": -0.46622565650204706, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,25.86), Invoice.BillingState),Customer.State))", "score": -0.49896130599836397, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Playlist.Name))", "score": -0.5079682197497277, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Customer.State),Invoice.BillingState))", "score": -0.5376368917600303, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.5999614371062307, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Track.UnitPrice))", "score": -0.6140872564242272, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.6168550614343076, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Customer.State),Customer.State))", "score": -0.621415153898397, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,25.86), Invoice.BillingState),Employee.State))", "score": -0.6523401502595334, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 28, "beams": [{"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.07127223522365966, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.26461706296504417, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3595304711252538, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3684151990801183, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.HireDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5080530567556707, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5245485304385511, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5483225125494632, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.5496476429218687, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5534618656993223, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Customer.Country))", "score": -0.555888859415063, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.5580523073450409, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.5728077859374384, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.InvoiceDate,>=,2012-10-06 00:00:00),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.5808927901615929, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.5812125457470997, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Employee.Country))", "score": -0.6566888371944515, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 29, "beams": [{"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.10246971829474205, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.233030831652286, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.26265743954718346, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-10-01 00:00:00), Invoice.BillingState),Playlist.Name))", "score": -0.41802489219844574, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-10-01 00:00:00), Invoice.BillingState),Customer.State))", "score": -0.45754339753329987, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-10-01 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.488620603668096, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.4895169941955828, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.5282002885141992, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,2013-10-01 00:00:00), Invoice.BillingState),Playlist.Name))", "score": -0.5485860055559897, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,2013-10-01 00:00:00), Invoice.BillingState),Playlist.Name))", "score": -0.5782126134508871, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,2013-10-01 00:00:00), Invoice.BillingState),Customer.State))", "score": -0.5881045108908438, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.HireDate,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.6140416769558215, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,2013-10-01 00:00:00), Invoice.BillingState),Customer.State))", "score": -0.6177311187857413, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,2013-10-01 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.61918171702564, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,2013-10-01 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.6488083249205374, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 30, "beams": [{"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.014877796248731784, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.7372755509121853, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Customer.PostalCode))", "score": -0.812503826653978, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Employee.PostalCode))", "score": -0.8519559660274385, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Genre.Name))", "score": -0.9447557792848751, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Genre), Artist.Name),Artist.Name))", "score": -0.9507219892179714, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Employee.LastName))", "score": -0.9625909147309831, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Employee.Fax))", "score": -0.9627827514997843, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Customer.Fax))", "score": -0.970401118521537, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Employee.LastName),Artist.Name))", "score": -1.090457296513076, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -1.1057909123958831, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -1.1219758569044387, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Customer.LastName))", "score": -1.1791448643776277, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.ArtistId),Artist.Name))", "score": -1.2065933816612207, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -1.2169269186301044, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 31, "beams": [{"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Aisha Duo), Invoice.InvoiceId),Invoice.Total)", "score": -0.09831642667987288, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Aisha Duo),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.13980167241800268, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.15168974599269963, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Aisha Duo), Invoice.InvoiceId),Invoice.Total)", "score": -0.17301124883791913, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Aisha Duo),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1745256457023349, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Aisha Duo),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.19770565767077286, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2072017213412943, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Aisha Duo), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.20735347882691518, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Aisha Duo),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21981080834653294, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Aisha Duo),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23602389428456103, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Aisha Duo),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.AlbumId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2365164393300336, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Aisha Duo),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2545347816308651, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2558641188832929, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Aisha Duo),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2707478708894179, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Aisha Duo),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.AlbumId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2712404159348905, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 32, "beams": [{"orig_question": "Can I find information about the genre of tracks associated to the billing address 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingAddress,=,3 Chatham Street), Track.Name),Track.Name))", "score": -0.21106330434483747, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Genre.Name))"}, {"orig_question": "Can I find information about the genre of tracks associated to the billing address 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Track.Name))", "score": -0.22049617475971037, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Genre.Name))"}, {"orig_question": "Can I find information about the genre of tracks associated to the billing address 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Track.Name),Track.Name))", "score": -0.2608258437249923, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Genre.Name))"}, {"orig_question": "Can I find information about the genre of tracks associated to the billing address 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Track.Name))", "score": -0.27025871413986513, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Genre.Name))"}, {"orig_question": "Can I find information about the genre of tracks associated to the billing address 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,3 Chatham Street), Track.Name),Track.Name))", "score": -0.28524032156403983, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Genre.Name))"}, {"orig_question": "Can I find information about the genre of tracks associated to the billing address 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingAddress,=,3 Chatham Street), Track.Name),Track.Name))", "score": -0.2855420097856009, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Genre.Name))"}, {"orig_question": "Can I find information about the genre of tracks associated to the billing address 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Track.Name))", "score": -0.29467319197891273, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Genre.Name))"}, {"orig_question": "Can I find information about the genre of tracks associated to the billing address 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Track.Name))", "score": -0.2949748802004738, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Genre.Name))"}, {"orig_question": "Can I find information about the genre of tracks associated to the billing address 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingAddress,=,3 Chatham Street), Track.Name),Track.Name))", "score": -0.30137656790223694, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Genre.Name))"}, {"orig_question": "Can I find information about the genre of tracks associated to the billing address 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingAddress,=,3 Chatham Street), Track.Name),Track.Name))", "score": -0.30628770783863574, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Genre.Name))"}, {"orig_question": "Can I find information about the genre of tracks associated to the billing address 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Track.Name))", "score": -0.31080943831710983, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Genre.Name))"}, {"orig_question": "Can I find information about the genre of tracks associated to the billing address 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Track.Name))", "score": -0.31572064027549285, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Genre.Name))"}, {"orig_question": "Can I find information about the genre of tracks associated to the billing address 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Track.Name))", "score": -0.31794704756736164, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Genre.Name))"}, {"orig_question": "Can I find information about the genre of tracks associated to the billing address 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingAddress,=,3 Chatham Street), Track.Name),Genre.Name))", "score": -0.33358975427131327, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Genre.Name))"}, {"orig_question": "Can I find information about the genre of tracks associated to the billing address 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Track.Name),Track.Name))", "score": -0.33500292296617884, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 33, "beams": [{"orig_question": "From which Genre is the artist Os Mutantes?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,!=,Os Mutantes), Genre.Name),Genre.Name))", "score": -0.16537463807253516, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Os Mutantes), Genre.Name),Genre.Name))"}, {"orig_question": "From which Genre is the artist Os Mutantes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Track.AlbumId),Artist.Name,!=,Os Mutantes), Genre.Name),Genre.Name))", "score": -0.23799126163928455, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Os Mutantes), Genre.Name),Genre.Name))"}, {"orig_question": "From which Genre is the artist Os Mutantes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Os Mutantes), Genre.Name),Genre.Name))", "score": -0.24517532123056335, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Os Mutantes), Genre.Name),Genre.Name))"}, {"orig_question": "From which Genre is the artist Os Mutantes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Artist.ArtistId),Artist.Name,!=,Os Mutantes), Genre.Name),Genre.Name))", "score": -0.26648331059233127, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Os Mutantes), Genre.Name),Genre.Name))"}, {"orig_question": "From which Genre is the artist Os Mutantes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Genre),Track.GenreId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Os Mutantes), Genre.Name),Genre.Name))", "score": -0.2692705728995604, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Os Mutantes), Genre.Name),Genre.Name))"}, {"orig_question": "From which Genre is the artist Os Mutantes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Track.GenreId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Os Mutantes), Genre.Name),Genre.Name))", "score": -0.3145766798752466, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Os Mutantes), Genre.Name),Genre.Name))"}, {"orig_question": "From which Genre is the artist Os Mutantes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Genre),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Os Mutantes), Genre.Name),Genre.Name))", "score": -0.3190791170864936, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Os Mutantes), Genre.Name),Genre.Name))"}, {"orig_question": "From which Genre is the artist Os Mutantes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Os Mutantes),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.32363100873067324, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Os Mutantes), Genre.Name),Genre.Name))"}, {"orig_question": "From which Genre is the artist Os Mutantes?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,!=,Os Mutantes), Employee.FirstName),Genre.Name))", "score": -0.33012259148745215, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Os Mutantes), Genre.Name),Genre.Name))"}, {"orig_question": "From which Genre is the artist Os Mutantes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Genre),Track.GenreId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Os Mutantes), Genre.Name),Genre.Name))", "score": -0.3457051859134043, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Os Mutantes), Genre.Name),Genre.Name))"}, {"orig_question": "From which Genre is the artist Os Mutantes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Os Mutantes), Genre.Name),Genre.Name))", "score": -0.3569250780383883, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Os Mutantes), Genre.Name),Genre.Name))"}, {"orig_question": "From which Genre is the artist Os Mutantes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Track.AlbumId),Artist.Name,!=,Os Mutantes), Genre.Name),Genre.Name))", "score": -0.3598006322125731, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Os Mutantes), Genre.Name),Genre.Name))"}, {"orig_question": "From which Genre is the artist Os Mutantes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Os Mutantes), Genre.Name),Genre.Name))", "score": -0.36438520094237764, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Os Mutantes), Genre.Name),Genre.Name))"}, {"orig_question": "From which Genre is the artist Os Mutantes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Os Mutantes), Genre.Name),Genre.Name))", "score": -0.3669847171387248, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Os Mutantes), Genre.Name),Genre.Name))"}, {"orig_question": "From which Genre is the artist Os Mutantes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Album.ArtistId,Track.AlbumId),Artist.Name,!=,Os Mutantes), Genre.Name),Genre.Name))", "score": -0.3845804293679199, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Os Mutantes), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 34, "beams": [{"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.15178665661233026, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2238238170089062, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2568837120475109, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3603475257100399, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.HireDate,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.43215651952641565, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4424976869763668, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,>,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4674704880731042, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Address,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4883075519742306, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.49229963266270715, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5309217139424618, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,>,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5395076484696801, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Title,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.569601492518359, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5725675593407686, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.PostalCode,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.6060102307515081, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.BillingCity),Invoice.InvoiceDate))", "score": -0.61910927019062, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 35, "beams": [{"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.City),Customer.Company))", "score": -0.4223364836167788, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Album.Title),Customer.Company))", "score": -0.4287143062002833, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.City),InvoiceLine.Quantity))", "score": -0.5840210122373019, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Album.Title),InvoiceLine.Quantity))", "score": -0.5903988348208064, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.City),Customer.PostalCode))", "score": -0.5927927682270324, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Album.Title),Customer.PostalCode))", "score": -0.5991705908105369, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))", "score": -0.6062474531588739, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -0.6385072333968549, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Invoice.BillingCity),Customer.Company))", "score": -0.6415678785198377, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Album.Title),Customer.City))", "score": -0.6448850559803594, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Company))", "score": -0.6459886897534661, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.Company))", "score": -0.646713130127501, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Customer.City),Customer.Company))", "score": -0.6528375189714811, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Customer.Company))", "score": -0.6592153415549856, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), InvoiceLine.Quantity),Customer.Company))", "score": -0.7093249015685448, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 36, "beams": [{"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,When It's Love), Track.Name),Track.Name))", "score": -0.07104979607902351, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Name),Track.Name))", "score": -0.25344739634238067, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,When It's Love), Track.Name),Track.Name))", "score": -0.3784366824074823, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Playlist.Name,=,When It's Love), Track.Name),Track.Name))", "score": -0.4170724429532129, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,When It's Love), Track.Name),Track.UnitPrice))", "score": -0.42121753994069877, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,When It's Love), Track.UnitPrice),Track.Name))", "score": -0.5153294761075813, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,When It's Love), Track.Name),Track.Name))", "score": -0.578828988258465, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,When It's Love), Track.Name),Track.Name))", "score": -0.5944654919549066, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,When It's Love), Track.Composer),Track.Name))", "score": -0.5944714803590614, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Name),Track.UnitPrice))", "score": -0.6036151402040559, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,When It's Love), Track.Name),Track.Bytes))", "score": -0.6136994451626379, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,When It's Love), Track.Name),Track.Milliseconds))", "score": -0.6188839763744909, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,When It's Love), Track.Bytes),Track.Name))", "score": -0.6246089596643287, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,When It's Love), Track.Milliseconds),Track.Name))", "score": -0.6622385640039283, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.InvoiceDate,=,When It's Love), Track.Name),Track.Name))", "score": -0.6884766795083124, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 37, "beams": [{"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,robert@chinookcorp.com), Employee.Title),Employee.Title))", "score": -0.2642882531599753, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,robert@chinookcorp.com), Employee.Title),Employee.LastName))", "score": -0.30507581588790345, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,robert@chinookcorp.com), Employee.Title),Employee.Title))", "score": -0.3781393310146086, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,robert@chinookcorp.com), Employee.Title),Employee.City))", "score": -0.40023689624831604, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,robert@chinookcorp.com), Employee.Title),Employee.Title))", "score": -0.4177931090907805, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,robert@chinookcorp.com), Employee.Title),Employee.LastName))", "score": -0.4189268937425368, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,robert@chinookcorp.com), Employee.Title),Track.Milliseconds))", "score": -0.44751196262404846, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,robert@chinookcorp.com), Employee.Title),Employee.LastName))", "score": -0.45858067181870865, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,robert@chinookcorp.com), Employee.Title),Employee.City))", "score": -0.5140879741029494, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Milliseconds,=,robert@chinookcorp.com), Employee.Title),Employee.Title))", "score": -0.5208943029956572, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,robert@chinookcorp.com), Employee.City),Employee.Title))", "score": -0.5277406526820414, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,robert@chinookcorp.com), Employee.LastName),Employee.Title))", "score": -0.530266280295109, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,robert@chinookcorp.com), Employee.Title),Employee.PostalCode))", "score": -0.5408364748673193, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,robert@chinookcorp.com), Employee.Title),Employee.City))", "score": -0.5537417521791212, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,robert@chinookcorp.com), Employee.Title),Track.Milliseconds))", "score": -0.5613630404786818, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 38, "beams": [{"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), MediaType.Name),InvoiceLine.Quantity))", "score": -0.21218012979721199, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),InvoiceLine.Quantity))", "score": -0.24642307064551833, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.24742366433090496, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova), MediaType.Name),InvoiceLine.Quantity))", "score": -0.27124619048567317, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),InvoiceLine.Quantity))", "score": -0.2797425814205373, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),MediaType.Name))", "score": -0.28166660517921127, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),InvoiceLine.Quantity))", "score": -0.28364779797944367, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,!=,Bossa Nova),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova), MediaType.Name),InvoiceLine.Quantity))", "score": -0.2877910671641906, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),InvoiceLine.Quantity))", "score": -0.2917491715494858, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),InvoiceLine.Quantity))", "score": -0.29724985866285597, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,!=,Bossa Nova),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova), Track.UnitPrice),InvoiceLine.Quantity))", "score": -0.3000522648633098, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),MediaType.Name))", "score": -0.30178371638813994, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova), Track.UnitPrice),InvoiceLine.Quantity))", "score": -0.30219522205589794, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,!=,Bossa Nova),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova), MediaType.Name),InvoiceLine.Quantity))", "score": -0.3074188534422326, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),MediaType.Name))", "score": -0.3098850899581821, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 39, "beams": [{"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))", "score": -0.11208937861686787, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.FirstName))", "score": -0.49694103476259704, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Employee.LastName))", "score": -0.562181404134666, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Artist.ArtistId))", "score": -0.5745785198014648, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.LastName))", "score": -0.6042222173852742, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.PostalCode))", "score": -0.6156712977466239, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Company))", "score": -0.6716028865940773, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Album.Title))", "score": -0.6954462233267649, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.LastName))", "score": -0.7024385378625556, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),MediaType.MediaTypeId))", "score": -0.7073479580370912, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Album.Title),Customer.LastName))", "score": -0.7485088878693148, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Fax))", "score": -0.7598950884008908, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Employee.LastName),Customer.LastName))", "score": -0.7732286739053899, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Email))", "score": -0.787870336509006, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))", "score": -0.7939793295699387, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 40, "beams": [{"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Hermeto Pascoal),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),Invoice.Total))", "score": -0.22191521945062387, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Hermeto Pascoal),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),InvoiceLine.Quantity))", "score": -0.22422193590179418, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Hermeto Pascoal), Track.UnitPrice),InvoiceLine.Quantity))", "score": -0.23037363276599776, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Hermeto Pascoal), Track.UnitPrice),Invoice.Total))", "score": -0.2310323019275216, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId),Artist.Name,=,Hermeto Pascoal), Track.UnitPrice),InvoiceLine.Quantity))", "score": -0.23305982432205136, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId),Artist.Name,=,Hermeto Pascoal), Track.UnitPrice),Invoice.Total))", "score": -0.2337184934835752, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Hermeto Pascoal),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),Invoice.Total))", "score": -0.23600761757617533, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Hermeto Pascoal),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),InvoiceLine.Quantity))", "score": -0.23947069032017612, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Hermeto Pascoal),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),Customer.City))", "score": -0.240599560098207, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Hermeto Pascoal),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),Customer.City))", "score": -0.2421431707589415, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Hermeto Pascoal), Invoice.Total),InvoiceLine.Quantity))", "score": -0.2476117584403686, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Hermeto Pascoal), Invoice.Total),Invoice.Total))", "score": -0.24827042760189244, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId),Artist.Name,=,Hermeto Pascoal), Invoice.Total),InvoiceLine.Quantity))", "score": -0.2502979499964222, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId),Artist.Name,=,Hermeto Pascoal), Invoice.Total),Invoice.Total))", "score": -0.25095661915794604, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Hermeto Pascoal), Invoice.Total),InvoiceLine.Quantity))", "score": -0.2704066291873777, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 41, "beams": [{"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,QC), Customer.Country),Customer.Country))", "score": -0.04013207777279604, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.State,=,QC), Customer.Country),Customer.Country))", "score": -0.4245195578678249, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,QC), Customer.Country),Customer.Country))", "score": -0.4530015181644558, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.State,=,QC), Customer.Country),Customer.Country))", "score": -0.46192127083304513, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,QC), Customer.Country),Customer.Country))", "score": -0.4716130088909267, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,QC), Invoice.BillingCountry),Customer.Country))", "score": -0.5323697285621165, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,=,QC), Customer.Country),Customer.Country))", "score": -0.5468170604563056, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,QC), Customer.Country),Invoice.BillingCountry))", "score": -0.5553040666400193, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,QC), Customer.Company),Customer.Country))", "score": -0.5904019432036876, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,QC), Customer.Country),Customer.Country))", "score": -0.5906124304874538, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,QC), Customer.State),Customer.Country))", "score": -0.5955756859748362, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),InvoiceLine.UnitPrice,=,QC), Customer.Country),Customer.Country))", "score": -0.6132445525272487, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,QC), Customer.Country),Customer.Company))", "score": -0.6654700798808335, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,QC), Customer.Country),Customer.Fax))", "score": -0.6729877157031297, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,QC), Customer.Country),Customer.Phone))", "score": -0.6855040354548692, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 42, "beams": [{"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.14153742416328896, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Artist.Name))", "score": -0.18948829545206536, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Customer.City))", "score": -0.3274470604819726, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Album.Title))", "score": -0.3418786562842797, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.4483447205138873, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Calle Lira, 198), Invoice.BillingCity),Artist.Name))", "score": -0.4962955918026637, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5081961583209704, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Employee.City))", "score": -0.5085812844199609, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5184107255054187, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Track.Composer))", "score": -0.5216333307189416, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Calle Lira, 198), Invoice.BillingCity),Artist.Name))", "score": -0.5561470296097468, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,Calle Lira, 198), Invoice.BillingCity),Artist.Name))", "score": -0.5663615967941951, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5795101951671313, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.5963116623324822, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Customer.Fax))", "score": -0.6033849455279778, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 43, "beams": [{"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.Milliseconds),Artist.Name))", "score": -0.21229073291830278, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.Milliseconds),Artist.Name))", "score": -0.2394132124163038, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.Milliseconds),Artist.Name))", "score": -0.2630450592025447, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.Milliseconds),Album.Title))", "score": -0.2644968033565101, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes),Artist.Name))", "score": -0.28499888587550515, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.Bytes),Artist.Name))", "score": -0.2885244722308275, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.Milliseconds),Album.Title))", "score": -0.2916192828545111, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes),Artist.Name))", "score": -0.3064058977651859, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(merge(filter(getData(Artist),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes),Artist.Name))", "score": -0.30763749488624287, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Artist.Name))", "score": -0.31354395476475716, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.Milliseconds),Album.Title))", "score": -0.31525112964075197, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.Bytes),Artist.Name))", "score": -0.31564695172882856, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Artist.Name))", "score": -0.3349509666544379, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(merge(filter(getData(Artist),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Artist.Name))", "score": -0.33618250839872327, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.Bytes),Artist.Name))", "score": -0.33927879851506937, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 44, "beams": [{"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.03009268710728624, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.1459876123991972, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.1753799147725838, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.21789011218163587, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.29584051395629085, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.30135118478937895, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli), MediaType.Name),MediaType.Name))", "score": -0.30346397258083524, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.30826755538855094, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.31847155681575834, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.33412029769382645, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.MediaTypeId))", "score": -0.3410223590247753, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),Customer.Company))", "score": -0.36457267395077286, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.36717568315496857, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Album.Title,=,Cl\u00c3\u00a1udio Zoli),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.3682544452856441, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Track.AlbumId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.37258146112873225, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 45, "beams": [{"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.095574864972702, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Album.Title,=,Rotten Apples: Greatest Hits),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.1758460205945998, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Rotten Apples: Greatest Hits),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.17964082943240567, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Rotten Apples: Greatest Hits),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.23618924948036318, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,Rotten Apples: Greatest Hits), Genre.Name),Genre.Name))", "score": -0.24116999995415225, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,Rotten Apples: Greatest Hits), Genre.Name),Genre.Name))", "score": -0.3058500381775303, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Rotten Apples: Greatest Hits),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.31233072444618176, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,=,Rotten Apples: Greatest Hits), Genre.Name),Genre.Name))", "score": -0.33186648849162365, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),merge(getData(Album),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3330331869817659, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Album.Title,=,Rotten Apples: Greatest Hits), Genre.Name),Genre.Name))", "score": -0.3333911513507558, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,Rotten Apples: Greatest Hits),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.34108989949235463, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,Rotten Apples: Greatest Hits), Genre.Name),Genre.Name))", "score": -0.3415430610051379, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Album.Title,=,Rotten Apples: Greatest Hits), Genre.Name),Genre.Name))", "score": -0.3429376092994882, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Album.Title,=,Rotten Apples: Greatest Hits), Genre.Name),Genre.Name))", "score": -0.3479143886925473, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name)", "score": -0.3634346131699674, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 46, "beams": [{"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,235598), Track.Name),Album.Title))", "score": -0.08174984510696959, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Album.Title))", "score": -0.18800955246842932, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,235598), Album.Title),Album.Title))", "score": -0.3792472265631659, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,235598), Track.Name),Track.Name))", "score": -0.3872267406404717, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,235598), Track.Name),Album.Title))", "score": -0.39991383980668616, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Album.Title),Album.Title))", "score": -0.4855069339246256, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))", "score": -0.4934864480019314, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,235598), Track.Bytes),Album.Title))", "score": -0.6611861668498022, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Track.Milliseconds,!=,235598), Track.Name),Album.Title))", "score": -0.6819818418443901, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,235598), Track.Name),Album.Title))", "score": -0.6840956134692533, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,235598), Album.Title),Track.Name))", "score": -0.684724122096668, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,235598), Album.Title),Album.Title))", "score": -0.6974112212628825, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,235598), Track.Name),Track.Bytes))", "score": -0.6974943082750542, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,235598), Track.Name),Track.Name))", "score": -0.7053907353401883, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Genre),Track.Milliseconds,!=,235598), Track.Name),Album.Title))", "score": -0.7550816338480217, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 47, "beams": [{"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Argentina), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.07111129108943715, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Argentina),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.42289473739016054, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Argentina),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.43260316705068047, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4442874252808906, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Argentina),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.45700307193851253, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Argentina), Invoice.Total),Invoice.BillingAddress))", "score": -0.4574886741129376, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Argentina),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4667115015990325, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingCity,=,Argentina),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.47832630541796783, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Argentina), Invoice.BillingState),Invoice.BillingAddress))", "score": -0.48691769261040463, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingCity,=,Argentina),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4880347350784878, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Argentina),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Customer.Address))", "score": -0.4961966775740391, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Argentina),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingAddress),Customer.Address))", "score": -0.5059051072345591, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingCity,=,Argentina),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5124346399663199, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingCity,=,Argentina),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5221430696268399, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Argentina),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Customer.Address))", "score": -0.5303050121223912, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 48, "beams": [{"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jamiroquai),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.23034577146802354, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jamiroquai),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2388753886515503, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jamiroquai),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.26134271558727346, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jamiroquai),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2650956110244846, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.2782439674248438, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jamiroquai),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3017827957582982, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.31078183002090976, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Jamiroquai),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.32071486066943033, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Album.AlbumId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.32351944440061997, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),InvoiceLine.TrackId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.3269922590823486, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jamiroquai),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.32800301813123245, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Track.Composer,=,Jamiroquai),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.34154809832301797, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Album.AlbumId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.3560571962431427, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.36106103468013706, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId),Genre.Name,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.36542507818491365, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 49, "beams": [{"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))", "score": -0.025813472529989667, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.Country),Customer.State))", "score": -0.44647920977149624, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.Country))", "score": -0.47564914550457615, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Employee.State))", "score": -0.5878942283598008, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.Address))", "score": -0.594882694145781, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))", "score": -0.6153904130478622, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.FirstName))", "score": -0.6177008422819199, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), InvoiceLine.UnitPrice),Customer.State))", "score": -0.6178068901208462, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.State))", "score": -0.623388745894772, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),InvoiceLine.UnitPrice))", "score": -0.6302352818456711, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.Address),Customer.State))", "score": -0.6399137164262356, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,+55 (11) 3033-4564), Customer.State),Customer.State))", "score": -0.6491115024109604, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Invoice.BillingState))", "score": -0.6607694896665635, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Employee.State),Customer.State))", "score": -0.6660336042550625, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,+55 (11) 3033-4564), Customer.State),Customer.State))", "score": -0.7097641160507919, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 50, "beams": [{"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.10791814524413733, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,>,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.11451083850651964, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,!=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.1638734926850805, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Smith, Toby), Invoice.BillingCity),Track.Composer))", "score": -0.2529221773898076, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,>,Smith, Toby), Invoice.BillingCity),Track.Composer))", "score": -0.2595148706521899, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.27788886507653293, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.31024455648813853, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Smith, Toby), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.3339216483118514, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,!=,Smith, Toby), Invoice.BillingCity),Track.Composer))", "score": -0.33725066545720145, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,>,Smith, Toby), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.34051434157423366, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Smith, Toby), Invoice.BillingCity),Artist.Name))", "score": -0.34830745262018864, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,>,Smith, Toby), Invoice.BillingCity),Artist.Name))", "score": -0.35490014588257096, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,!=,Smith, Toby), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.37596787137182486, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,!=,Smith, Toby), Invoice.BillingCity),Artist.Name))", "score": -0.40786957004583696, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Smith, Toby), Invoice.BillingCity),Customer.City))", "score": -0.41224173407543613, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 51, "beams": [{"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))", "score": -0.21927053609329264, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))", "score": -0.22000147403734177, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,The Final Concerts (Disc 2)),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2229768210622389, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))", "score": -0.25383698273749317, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))", "score": -0.25456792068154227, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))", "score": -0.2622776431697439, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))", "score": -0.2968440898139444, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Genre.Name,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))", "score": -0.31948451518279075, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Genre.Name,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))", "score": -0.32021545312683986, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,The Final Concerts (Disc 2)),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3400940302821562, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Track.AlbumId),Artist.Name,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))", "score": -0.35352672986584666, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Track.AlbumId),Artist.Name,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))", "score": -0.35425765867272846, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))", "score": -0.3578778209758785, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Genre.Name,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))", "score": -0.3624916452406022, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,The Final Concerts (Disc 2)),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3641127389179441, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 52, "beams": [{"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Hungary), Invoice.Total),Invoice.Total))", "score": -0.19987457245770202, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Hungary), Invoice.Total),Invoice.BillingAddress))", "score": -0.22696082294169173, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Hungary), Invoice.BillingAddress),Invoice.Total))", "score": -0.25534527749005065, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.28243152797404036, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,Hungary), Invoice.Total),Invoice.Total))", "score": -0.4583429731446813, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,Hungary), Invoice.Total),Invoice.BillingAddress))", "score": -0.485429223628671, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,>=,Hungary), Invoice.Total),Invoice.Total))", "score": -0.48734985944065556, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.Total),Invoice.Total))", "score": -0.499458584936292, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,Hungary), Invoice.BillingAddress),Invoice.Total))", "score": -0.5138136781770299, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,>=,Hungary), Invoice.Total),Invoice.BillingAddress))", "score": -0.5144361099246453, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.Total),Invoice.BillingAddress))", "score": -0.5265448354202817, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5408999286610197, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,>=,Hungary), Invoice.BillingAddress),Invoice.Total))", "score": -0.5428205644730042, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.Total))", "score": -0.5549292899686407, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,>=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5699068149569939, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 53, "beams": [{"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Tribute),getData(Track),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.16141031112230178, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,Tribute),getData(Track),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.2029481494360874, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Tribute),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.20753618591284417, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,Tribute),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.24907402422662983, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Tribute),getData(Track),Album.AlbumId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.2505393946101183, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Tribute),getData(Track),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Customer.State))", "score": -0.25947192120112716, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Tribute),getData(Track),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.2763524403675, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,Tribute),getData(Track),Album.AlbumId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.2920772329239039, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Tribute),getData(Album),Album.AlbumId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.2966652694006607, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Tribute),getData(Track),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.30077858205858976, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,Tribute),getData(Track),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Customer.State))", "score": -0.3010097595149128, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Tribute),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Customer.State))", "score": -0.3055977959916696, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Album.ArtistId),Album.Title,=,Tribute),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3154117687676032, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Tribute),getData(Track),Artist.ArtistId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.31749919499403717, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,Tribute),getData(Track),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.31789027868128567, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 54, "beams": [{"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.10377014975256316, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Finland), Invoice.Total),Invoice.Total))", "score": -0.16802330489463202, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.4462566542179047, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.4775833057910859, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,Finland), Invoice.Total),Invoice.Total))", "score": -0.5105098093599736, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Finland), Invoice.Total),Invoice.Total))", "score": -0.5418364609331547, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.6498626338989197, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,>,Finland), Invoice.Total),Invoice.Total))", "score": -0.6674187126309334, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))", "score": -0.7141157890409886, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.7406238185913026, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Finland), Invoice.Total),InvoiceLine.Quantity))", "score": -0.7485688911956458, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "sum(distinct(filter(getData(Invoice),Invoice.BillingAddress,>,Finland), Invoice.InvoiceId),Invoice.Total)", "score": -0.7710137989481868, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Finland), Invoice.Total),Track.UnitPrice))", "score": -0.782895027307859, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.7872442026828139, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "sum(distinct(filter(getData(Invoice),Invoice.BillingAddress,>,Finland), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.8039857938677645, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 55, "beams": [{"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,=,Pop),Track.Bytes),Album.Title))", "score": -0.07306893444612488, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Pop),Track.Bytes),Album.Title))", "score": -0.26323949752218695, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,=,Pop),Track.Bytes),Album.Title))", "score": -0.2657762675581259, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Album.ArtistId,Album.AlbumId),Track.Name,=,Pop),Track.Bytes),Album.Title))", "score": -0.2708050161282912, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Track.AlbumId,Album.AlbumId),Track.Name,=,Pop),Track.Bytes),Album.Title))", "score": -0.28636720636262775, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.GenreId),Track.Name,=,Pop),Track.Bytes),Album.Title))", "score": -0.2940462279681109, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Artist.ArtistId),Track.Name,=,Pop),Track.Bytes),Album.Title))", "score": -0.3109123232666843, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Name,=,Pop),Track.Bytes),Album.Title))", "score": -0.3340155381298519, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Name,=,Pop),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.3401826125121303, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,=,Pop),Track.Bytes),Album.Title))", "score": -0.34896550714364644, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,=,Pop),Track.Bytes),Album.Title))", "score": -0.35193565081025485, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.GenreId),Track.Name,=,Pop),Track.Bytes),Album.Title))", "score": -0.3532950897073833, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.GenreId),Track.Name,=,Pop),Track.Bytes),Album.Title))", "score": -0.3573446025187458, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,PlaylistTrack.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,=,Pop),Track.Bytes),Album.Title))", "score": -0.3806899674070071, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.38549140301859836, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 56, "beams": [{"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))", "score": -0.31471531455099466, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.PostalCode))", "score": -0.3463478720623243, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.Fax))", "score": -0.35364656512319925, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.Company))", "score": -0.3575991875368345, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,=,1), Customer.PostalCode),Customer.LastName))", "score": -0.40760892246544245, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))", "score": -0.4252096263452986, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,=,1), Customer.Fax),Customer.LastName))", "score": -0.42771391187488916, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))", "score": -0.4299291803725118, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,=,1), Customer.PostalCode),Customer.PostalCode))", "score": -0.4392414799767721, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.Fax))", "score": -0.4453455419702721, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.Fax))", "score": -0.45006509599748534, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.PostalCode))", "score": -0.45110678180293007, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.Company))", "score": -0.45348332247283685, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.PostalCode))", "score": -0.45582633583014326, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.Company))", "score": -0.4582028765000501, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 57, "beams": [{"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))", "score": -0.08266214046989262, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,AB), Invoice.Total),Invoice.Total))", "score": -0.19384221498285115, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.BillingAddress),Invoice.Total))", "score": -0.43954578180228054, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.BillingState),Invoice.Total))", "score": -0.4593947245589334, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,AB), Invoice.BillingAddress),Invoice.Total))", "score": -0.5507258563152391, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.BillingAddress))", "score": -0.5548410615733701, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.InvoiceDate),Invoice.Total))", "score": -0.5585912181845742, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,AB), Invoice.BillingState),Invoice.Total))", "score": -0.5705747990718919, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.BillingCountry),Invoice.Total))", "score": -0.5800348534098703, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),InvoiceLine.Quantity))", "score": -0.5953958234599668, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Customer.Address))", "score": -0.5995394787601072, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.BillingCity))", "score": -0.6111642322352964, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.BillingCountry))", "score": -0.628494878750189, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,AB), Invoice.Total),Invoice.BillingAddress))", "score": -0.6660211360863286, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,AB), Invoice.InvoiceDate),Invoice.Total))", "score": -0.6697712926975328, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 58, "beams": [{"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))", "score": -0.06052440214625676, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Phone))", "score": -0.20440321597925504, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.PostalCode))", "score": -0.519752571319259, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Phone),Employee.Address))", "score": -0.5273732058303722, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Title))", "score": -0.5465984437214502, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Invoice.BillingAddress))", "score": -0.5563154313313134, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.FirstName),Employee.Address))", "score": -0.5742796174781688, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,T2P 5M5), Employee.Address),Employee.Address))", "score": -0.5979332010792859, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Title),Employee.Address))", "score": -0.607722591568745, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Artist.Name,=,T2P 5M5), Employee.Address),Employee.Address))", "score": -0.6309383790539869, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.FirstName))", "score": -0.6422279569851526, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.PostalCode),Employee.Address))", "score": -0.6513512841956981, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Phone),Employee.Phone))", "score": -0.6712520196633704, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.State),Employee.Address))", "score": -0.6868078223960765, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.FirstName),Employee.Phone))", "score": -0.7181584313111671, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 59, "beams": [{"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.15532933599561252, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))", "score": -0.17230953762349147, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.22373962443655548, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))", "score": -0.24071982606443443, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.2683277228368268, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId), Customer.PostalCode),Customer.PostalCode))", "score": -0.28530792446470576, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.2896911012125761, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,0.99),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.294552961300437, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))", "score": -0.3092686596574487, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,0.99),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))", "score": -0.31153316292831595, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))", "score": -0.3270957447359146, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.3367380112777698, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.33991234699179473, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Customer.PostalCode),Customer.PostalCode))", "score": -0.35371821290564875, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.35831602663816603, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 60, "beams": [{"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.0075060647868582615, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -0.9035470312381033, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.LastName))", "score": -0.9294284165400803, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.Fax))", "score": -0.9302109210883758, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.9375596114013939, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.9961598493632314, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.PostalCode))", "score": -1.0266651853188902, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.City))", "score": -1.0954430878637922, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Track.Composer))", "score": -1.1615156972427347, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -1.2227420803229698, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.AlbumId))", "score": -1.292148168608122, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -1.2954659973663156, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Employee.City),Artist.Name))", "score": -1.3117619197832981, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Customer.Fax))", "score": -1.342840284784717, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -1.3475528070937033, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 61, "beams": [{"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,IT Manager),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2187011893421789, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,IT Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22224283698200417, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,IT Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23824962536361297, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Employee.Title,!=,IT Manager), Invoice.InvoiceId),Invoice.Total)", "score": -0.24628373263847797, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,IT Manager),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25535399065447945, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Employee.Title,!=,IT Manager), Track.TrackId),Invoice.Total)", "score": -0.2623612349133636, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,!=,IT Manager), Invoice.InvoiceId),Invoice.Total)", "score": -0.2659531327776956, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,IT Manager),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27033893405762044, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.BirthDate,!=,IT Manager),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2779521001897332, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,IT Manager),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.28127257338711875, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,!=,IT Manager), Track.TrackId),Invoice.Total)", "score": -0.28203063505258125, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Employee.Title,!=,IT Manager), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2884659778805882, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,!=,IT Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.29648721765826286, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Employee.Title,!=,IT Manager), Invoice.InvoiceId),Invoice.Total)", "score": -0.2965066483850541, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,!=,IT Manager),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2984188180705857, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 62, "beams": [{"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Christopher O'Riley), Track.TrackId),Track.UnitPrice)", "score": -0.023942062761419573, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Christopher O'Riley), Track.TrackId),Track.Milliseconds)", "score": -0.22433713048389117, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Christopher O'Riley), Track.TrackId),Track.UnitPrice)", "score": -0.2946578668540094, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Christopher O'Riley), Track.TrackId),Track.Bytes)", "score": -0.31374352794984783, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.3447809768778113, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Christopher O'Riley),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.3577055530585805, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Christopher O'Riley), Track.TrackId),Track.UnitPrice)", "score": -0.378898288831311, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Album.ArtistId),Artist.Name,!=,Christopher O'Riley), Track.TrackId),Track.UnitPrice)", "score": -0.38835969977294715, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Christopher O'Riley), Track.TrackId),Track.UnitPrice)", "score": -0.4174975382803485, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Christopher O'Riley), Track.TrackId),Track.Milliseconds)", "score": -0.42893293045910835, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Artist.ArtistId),Artist.Name,!=,Christopher O'Riley), Track.TrackId),Track.UnitPrice)", "score": -0.4489662074434253, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Christopher O'Riley), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.4511763823955097, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Artist),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Christopher O'Riley), Track.TrackId),Track.UnitPrice)", "score": -0.46326547902428517, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.4636231622933085, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Christopher O'Riley), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.4684715485682791, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 63, "beams": [{"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.14199006271498768, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.1465976787631236, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.2587009629551176, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.2835812687280733, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Artist.Name,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.28593379802981234, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.31337845135177106, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.32656847297585045, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.32928312089140044, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.3306795015641863, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.3425335684775881, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Employee.Title,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.34481179924535577, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.35004773100775494, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId),Track.Composer,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.35219732437720025, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Employee.Title,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.3686027230802885, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.37767134963905846, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 64, "beams": [{"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.09887091245921584, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.13187133573134072, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1436940505208184, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.16540092849840046, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1865350847583066, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,<=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.22071701039318878, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2284959953767092, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,<=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23253972518266647, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2554155648141533, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2587876014409261, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.26038688219329464, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2691435769806103, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2699496583490746, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27061031623040377, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(InvoiceLine),Track.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2713151529623949, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 65, "beams": [{"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.03562920447984652, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.22922246438065486, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.3871876476387115, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Playlist.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.5818601427654357, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Genre.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.6274385033229919, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.6419044314006896, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.BillingAddress,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.7822075067142578, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),PlaylistTrack.TrackId,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.8153690872768493, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),MediaType.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.8580472646335693, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Title,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.928685980854425, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.9386319618552079, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.Bytes),Track.UnitPrice))", "score": -0.9855448534272, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.Bytes))", "score": -0.9871440630286088, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.GenreId,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.9882283983806701, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -1.0050002513507934, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 66, "beams": [{"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,>=,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.21296610744502686, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.22944685878064774, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.Total,>=,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.31863643290307664, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.3351171842386975, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,>,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.3561363040080323, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.3726170553436532, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.39120628001001023, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.HireDate,>=,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.4076870313456311, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.Total,>,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.4618066294660821, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.4621102965047612, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.47828738080170297, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.BirthDate,>=,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.4785910478403821, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.InvoiceDate,>=,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.49657783811744594, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.5343764924054994, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.HireDate,>,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.5508572437411203, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 67, "beams": [{"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.10914849452589741, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,0.99),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.1759350221416526, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.19475085742482817, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2276650714416609, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,0.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.24334821203375498, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<,0.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.25563607842519986, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.26796713417317597, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2867829694563515, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3002853504375276, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3125732168289725, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<,0.99),getData(Invoice),Track.TrackId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3193032745225069, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,0.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.32582202010738115, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<,0.99),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3337982868083582, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.33922691192452253, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,<,0.99),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.34071432536461405, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 68, "beams": [{"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)", "score": -0.09221951570779074, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),Track.Milliseconds)", "score": -0.28370277005037375, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),Track.Bytes,>=,8557447),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.45515968688491576, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(filter(getData(InvoiceLine),Track.Bytes,>=,8557447),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.45989267204497714, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Bytes,>=,8557447),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.46137249653296053, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(filter(getData(InvoiceLine),Track.Bytes,>=,8557447),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.46903238278666587, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Bytes,>=,8557447),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.47021538298201476, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(filter(getData(InvoiceLine),Track.Bytes,>=,8557447),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.529619440783557, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Bytes,>=,8557447),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.5308024409789059, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Bytes,>=,8557447),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.5330160905509725, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),Track.Bytes,>=,8557447),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.5371480096957179, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(filter(getData(InvoiceLine),Track.Bytes,>=,8557447),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.547602281418117, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Bytes,>=,8557447),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.5487853557633615, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),Track.Bytes,>=,8557447),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5488711949673944, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(filter(getData(InvoiceLine),Track.Bytes,>=,8557447),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.5503231820659087, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 69, "beams": [{"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))", "score": -0.2386894664296051, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Track.Name))", "score": -0.35213402570570906, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Track.Name),Employee.LastName))", "score": -0.3566200053819557, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.FirstName),Employee.LastName))", "score": -0.3766817218192955, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Composer,=,IT Manager), Employee.LastName),Employee.LastName))", "score": -0.38021948845471343, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.Email),Employee.LastName))", "score": -0.3965989864000221, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Track.Name),Track.Name))", "score": -0.4700645646580597, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))", "score": -0.4700665185728212, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.FirstName),Track.Name))", "score": -0.49012628109539946, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Composer,=,IT Manager), Employee.LastName),Track.Name))", "score": -0.4936640477308174, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Composer,=,IT Manager), Track.Name),Employee.LastName))", "score": -0.49815002740706404, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.Email),Track.Name))", "score": -0.5100435456761261, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Composer,=,IT Manager), Employee.FirstName),Employee.LastName))", "score": -0.5182117438444038, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Composer,=,IT Manager), Employee.Email),Employee.LastName))", "score": -0.5381290084251305, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.Email))", "score": -0.5717336452134987, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 70, "beams": [{"orig_question": "How much revenue did the album Bach: Goldberg Variations generate?", "inferred_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Bach: Goldberg Variations), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.22405745251188763, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the album Bach: Goldberg Variations generate?", "inferred_code": "sum(distinct(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2291543084745937, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the album Bach: Goldberg Variations generate?", "inferred_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,=,Bach: Goldberg Variations), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.26282853255913063, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the album Bach: Goldberg Variations generate?", "inferred_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Bach: Goldberg Variations), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.281305246092606, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the album Bach: Goldberg Variations generate?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations), Track.UnitPrice),Track.UnitPrice))", "score": -0.30917659798797104, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the album Bach: Goldberg Variations generate?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3134000790339501, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the album Bach: Goldberg Variations generate?", "inferred_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,=,Bach: Goldberg Variations), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.320076326139849, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the album Bach: Goldberg Variations generate?", "inferred_code": "sum(distinct(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.34033998266918586, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the album Bach: Goldberg Variations generate?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Album.Title,=,Bach: Goldberg Variations),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3501272312738612, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the album Bach: Goldberg Variations generate?", "inferred_code": "sum(distinct(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3529815559395424, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the album Bach: Goldberg Variations generate?", "inferred_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Bach: Goldberg Variations), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.35341313925815304, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the album Bach: Goldberg Variations generate?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3785342955912717, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the album Bach: Goldberg Variations generate?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Bach: Goldberg Variations), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.38577250533277657, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the album Bach: Goldberg Variations generate?", "inferred_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,=,Bach: Goldberg Variations), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.39218421930539604, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the album Bach: Goldberg Variations generate?", "inferred_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Bach: Goldberg Variations), Track.UnitPrice),InvoiceLine.UnitPrice)", "score": -0.39963875245762187, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 71, "beams": [{"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.1547433585728817, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,=,Electronica/Dance), MediaType.Name),MediaType.Name))", "score": -0.17829876265250802, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,<=,Electronica/Dance),Genre.GenreId,Track.GenreId),Genre.Name,=,Electronica/Dance), MediaType.Name),MediaType.Name))", "score": -0.21640497708411668, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,=,Electronica/Dance),Genre.GenreId,Track.GenreId),Genre.Name,=,Electronica/Dance), MediaType.Name),MediaType.Name))", "score": -0.2626147430089311, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice,<=,Electronica/Dance),Genre.GenreId,Track.GenreId),Genre.Name,=,Electronica/Dance), MediaType.Name),MediaType.Name))", "score": -0.2709815539620139, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.Title,=,Electronica/Dance), MediaType.Name),MediaType.Name))", "score": -0.3031173236078311, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice,=,Electronica/Dance),Genre.GenreId,Track.GenreId),Genre.Name,=,Electronica/Dance), MediaType.Name),MediaType.Name))", "score": -0.3171913198868283, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,<=,Electronica/Dance),Genre.GenreId,Track.GenreId),Track.Name,=,Electronica/Dance), MediaType.Name),MediaType.Name))", "score": -0.3220720390713346, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice,=,Electronica/Dance), MediaType.Name),MediaType.Name))", "score": -0.33271182219026907, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,!=,Electronica/Dance),Genre.GenreId,Track.GenreId),Genre.Name,=,Electronica/Dance), MediaType.Name),MediaType.Name))", "score": -0.33459293108938976, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Genre.Name,=,Electronica/Dance),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.3351058763752872, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.UnitPrice,=,Electronica/Dance), MediaType.Name),MediaType.Name))", "score": -0.33897042517448894, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,<=,Electronica/Dance),Genre.GenreId,Track.GenreId),Genre.Name,=,Electronica/Dance), Track.UnitPrice),MediaType.Name))", "score": -0.3527423741350481, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.353114607203233, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,<=,Electronica/Dance),Genre.GenreId,Track.GenreId),Album.Title,=,Electronica/Dance), MediaType.Name),MediaType.Name))", "score": -0.35488116846342455, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 72, "beams": [{"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.24323300324594244, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2527489122373721, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(MediaType),Track.MediaTypeId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2575549071899895, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.MediaTypeId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2670708161814192, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.28463281946220303, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),Track.MediaTypeId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2989547234062501, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3274353507263175, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.33021367053745826, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.33972957952888794, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(MediaType),Track.MediaTypeId,Invoice.InvoiceId), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.34453557448150535, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.MediaTypeId,Invoice.InvoiceId), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.354051483472935, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.37161348675371886, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Employee.Country))", "score": -0.380466788307118, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Customer.Country))", "score": -0.3814066517350776, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(MediaType),Track.TrackId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.38380894924899317, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 73, "beams": [{"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.19700947721357984, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.20209102698170256, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2232807138387558, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.22539726792855663, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.22836226360687856, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Soundtrack),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.26904395392159985, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Genre.GenreId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.27069372976833433, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.28189453684275245, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.28697608661087515, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Genre.GenreId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.29696496639351033, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Genre.Name,!=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3026265734462324, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Genre.Name,!=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.30770812321435514, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3081657734679284, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3132473426179212, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),getData(Invoice),Track.TrackId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.32802132258971184, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 74, "beams": [{"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,SCRIABIN: Vers la flamme),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.AlbumId,MediaType.MediaTypeId), MediaType.Name),Album.Title))", "score": -0.338216427993394, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,SCRIABIN: Vers la flamme),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.AlbumId,Album.AlbumId), MediaType.Name),Album.Title))", "score": -0.38252965160491537, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,=,SCRIABIN: Vers la flamme),getData(MediaType),Track.AlbumId,Album.AlbumId), MediaType.Name),Album.Title))", "score": -0.3975856778704496, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,SCRIABIN: Vers la flamme),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,MediaType.MediaTypeId), MediaType.Name),Album.Title))", "score": -0.4002013496250357, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.Name,=,SCRIABIN: Vers la flamme),getData(MediaType),Track.AlbumId,Album.AlbumId), MediaType.Name),Album.Title))", "score": -0.40951668748538994, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,SCRIABIN: Vers la flamme),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.AlbumId,MediaType.MediaTypeId), MediaType.Name),Album.Title))", "score": -0.40997111902792677, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,=,SCRIABIN: Vers la flamme),getData(Album),Track.AlbumId,Album.AlbumId), MediaType.Name),Album.Title))", "score": -0.41083323700423036, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,SCRIABIN: Vers la flamme),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.AlbumId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.4192296855164965, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,SCRIABIN: Vers la flamme),getData(MediaType),Track.AlbumId,Album.AlbumId), MediaType.Name),Album.Title))", "score": -0.4222064917755674, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.Name,=,SCRIABIN: Vers la flamme),getData(Album),Track.AlbumId,Album.AlbumId), MediaType.Name),Album.Title))", "score": -0.42276424661917067, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,SCRIABIN: Vers la flamme),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.AlbumId,MediaType.MediaTypeId), Track.Name),Album.Title))", "score": -0.423147623118526, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,SCRIABIN: Vers la flamme),getData(Album),Track.AlbumId,Album.AlbumId), MediaType.Name),Album.Title))", "score": -0.4354540509093482, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,SCRIABIN: Vers la flamme),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), MediaType.Name),Album.Title))", "score": -0.44451457323655696, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,SCRIABIN: Vers la flamme),getData(MediaType),Track.AlbumId,Album.AlbumId), MediaType.Name),Album.Title))", "score": -0.44672627629856954, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,=,SCRIABIN: Vers la flamme),getData(MediaType),Track.AlbumId,MediaType.MediaTypeId), MediaType.Name),Album.Title))", "score": -0.447358776493414, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 75, "beams": [{"orig_question": "What is the total invoice amount for tracks larger than 7142127?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,<,7142127), Invoice.InvoiceId),Invoice.Total)", "score": -0.20821807642543871, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,7142127),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total invoice amount for tracks larger than 7142127?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Bytes,<,7142127),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21872638679165587, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,7142127),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total invoice amount for tracks larger than 7142127?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Composer,<,7142127),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2469695495296295, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,7142127),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total invoice amount for tracks larger than 7142127?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,7142127),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27675868683554844, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,7142127),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total invoice amount for tracks larger than 7142127?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,7142127), Invoice.InvoiceId),Invoice.Total)", "score": -0.2792030061417473, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,7142127),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total invoice amount for tracks larger than 7142127?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Composer,>,7142127),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.30500184957352205, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,7142127),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total invoice amount for tracks larger than 7142127?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,7142127), Invoice.InvoiceId),Invoice.Total)", "score": -0.3057723014791238, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,7142127),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total invoice amount for tracks larger than 7142127?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,7142127),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3101040312228344, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,7142127),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total invoice amount for tracks larger than 7142127?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Bytes,!=,7142127),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.310490808784964, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,7142127),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total invoice amount for tracks larger than 7142127?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,<,7142127),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3122557540106608, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,7142127),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total invoice amount for tracks larger than 7142127?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),InvoiceLine.Quantity,<,7142127),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3218540140354711, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,7142127),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total invoice amount for tracks larger than 7142127?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,7142127), Invoice.InvoiceId),Invoice.Total)", "score": -0.32408286586690693, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,7142127),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total invoice amount for tracks larger than 7142127?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,7142127), Invoice.InvoiceId),Invoice.Total)", "score": -0.3352738703852007, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,7142127),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total invoice amount for tracks larger than 7142127?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,7142127),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.33873387396194915, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,7142127),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total invoice amount for tracks larger than 7142127?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,7142127), Invoice.InvoiceId),Invoice.Total)", "score": -0.3616265247675372, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,7142127),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 76, "beams": [{"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.1827541555704114, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Bytes),Track.Bytes))", "score": -0.20429682596866366, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Bytes),Track.Bytes)", "score": -0.29886965509555874, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Employee.Email),Track.Bytes)", "score": -0.3264635018003891, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.33559971599040117, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.3513538803479224, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Bytes),Track.Bytes))", "score": -0.358791027932268, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Bytes),Track.Name))", "score": -0.37057934671214426, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3925854607766837, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Bytes),Employee.Email))", "score": -0.4042593264329817, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Employee.Email),Track.Bytes))", "score": -0.4083301384121085, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Track.Bytes)", "score": -0.43665431290926965, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.44947020372430074, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Bytes)", "score": -0.4784363443513137, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Bytes))", "score": -0.504598990079295, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 77, "beams": [{"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -0.04151333126161479, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -0.4422771456809489, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.Company))", "score": -0.8288525728835692, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.City))", "score": -0.8625744124709488, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.Fax))", "score": -0.883505447301945, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.City,!=,None), Customer.City),Customer.City))", "score": -0.8911318545651739, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Album.Title))", "score": -0.903327474845662, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Album.Title),Customer.City))", "score": -0.9711882068720862, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Invoice.BillingCity))", "score": -0.9841057540937369, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.City))", "score": -1.018823487030264, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Invoice.BillingCity),Customer.City))", "score": -1.054209871082723, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -1.0706743098048472, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),InvoiceLine.Quantity))", "score": -1.083063764465211, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.PostalCode))", "score": -1.1918757112489373, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Album), Customer.City),Customer.City))", "score": -1.243722702243419, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 78, "beams": [{"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.0883738030901742, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.16884942630881508, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice),Playlist.Name))", "score": -0.1963906830122513, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.259812894625762, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),Track.UnitPrice),Playlist.Name))", "score": -0.2820441816021697, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.2903473347174075, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.2923986397978783, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,>=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.3040398068935247, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Milliseconds,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.3108839455293056, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,>,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.3549356141840042, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice),Playlist.Name))", "score": -0.3599518069059156, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.36665687812799336, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),Track.UnitPrice),Playlist.Name))", "score": -0.3785136794052311, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.3806692586827287, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),Track.UnitPrice),Playlist.Name))", "score": -0.39673707515767653, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 79, "beams": [{"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))", "score": -0.03564266662215232, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))", "score": -0.33471134292994975, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))", "score": -0.45680537807857036, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))", "score": -0.5485713778725767, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.Fax))", "score": -0.5689732622086012, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))", "score": -0.5752490459672117, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))", "score": -0.5987152158013487, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Employee.PostalCode),Customer.PostalCode))", "score": -0.600932402881881, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Employee.PostalCode))", "score": -0.6236975382744276, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.Fax),Customer.PostalCode))", "score": -0.634491129192611, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))", "score": -0.6370551286927366, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))", "score": -0.6828884183159971, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.Phone),Customer.PostalCode))", "score": -0.694115026268264, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Genre.GenreId))", "score": -0.716963667768141, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.LastName),Customer.PostalCode))", "score": -0.7318725421755516, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 80, "beams": [{"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.10641763453913959, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra), Track.TrackId),Track.Milliseconds)", "score": -0.13140775629000767, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Milliseconds)", "score": -0.19382628132828758, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra), Track.TrackId),Track.Milliseconds)", "score": -0.26784962057193584, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.31665545970369186, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)", "score": -0.32584844674735824, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Composer,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)", "score": -0.327310633918102, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.35123079628394793, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra), Track.TrackId),Track.Milliseconds)", "score": -0.35148569003899727, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.3538670170225744, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.3838296364470177, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra), Track.TrackId),Track.Milliseconds)", "score": -0.3846545697496282, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.3918865997828854, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra), Track.TrackId),Track.Milliseconds)", "score": -0.40393070245584095, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Track),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.40938184014734214, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 81, "beams": [{"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,11774865), Track.UnitPrice),Track.UnitPrice))", "score": -0.24383455303905066, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,11774865), Track.Bytes),Track.UnitPrice))", "score": -0.24428039578197058, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,11774865), Track.UnitPrice),Track.UnitPrice))", "score": -0.30346324828860816, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,11774865), Track.Bytes),Track.UnitPrice))", "score": -0.3039090910315281, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,11774865), Track.UnitPrice),Track.UnitPrice))", "score": -0.3910771438240772, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,11774865), Track.Bytes),Track.UnitPrice))", "score": -0.39152298656699713, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,11774865), Track.Milliseconds),Track.UnitPrice))", "score": -0.4476235338806873, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>,11774865), Track.UnitPrice),Track.UnitPrice))", "score": -0.4538691525667673, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>,11774865), Track.Bytes),Track.UnitPrice))", "score": -0.4543149953096872, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,11774865), Track.Milliseconds),Track.UnitPrice))", "score": -0.5072522291302448, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,<,11774865), Track.UnitPrice),Track.UnitPrice))", "score": -0.5134978478163248, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,<,11774865), Track.Bytes),Track.UnitPrice))", "score": -0.5139436905592447, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,11774865), Track.UnitPrice),Track.Bytes))", "score": -0.5246611188485986, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,11774865), Track.Bytes),Track.Bytes))", "score": -0.5251069615915185, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,11774865), Track.UnitPrice),Track.UnitPrice))", "score": -0.5281623795017367, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 82, "beams": [{"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(filter(getData(Album),Album.Title,!=,0.99),Track.Bytes),Track.Bytes))", "score": -0.3343390809095581, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(filter(getData(Track),Album.Title,!=,0.99),Track.Bytes),Track.Bytes))", "score": -0.397730691889592, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Album.Title,!=,0.99), Track.Bytes),Track.Bytes))", "score": -0.43077649818587815, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(filter(getData(Album),Album.Title,!=,0.99),Customer.Email),Track.Bytes))", "score": -0.43339877442485886, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(merge(filter(getData(Album),Album.Title,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.4719752866315715, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Album.Title,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.4743393564525129, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(filter(getData(Album),Album.Title,!=,0.99),Track.UnitPrice),Track.Bytes))", "score": -0.49671479181415634, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(filter(getData(Track),Album.Title,!=,0.99),Customer.Email),Track.Bytes))", "score": -0.49679038540489273, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,!=,0.99), Track.Bytes),Track.Bytes))", "score": -0.5038779479436926, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Album.AlbumId),Album.Title,!=,0.99),InvoiceLine.UnitPrice),Track.Bytes))", "score": -0.5070233717376926, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(merge(filter(getData(Album),Album.Title,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Track.UnitPrice),Track.Bytes))", "score": -0.5171465046519119, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Album.Title,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Track.UnitPrice),Track.Bytes))", "score": -0.5195105744728533, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Album.AlbumId),Album.Title,!=,0.99),InvoiceLine.UnitPrice),Album.Title))", "score": -0.5419031135747825, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Album.Title,!=,0.99),InvoiceLine.UnitPrice),Track.Bytes))", "score": -0.5438812959004733, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Album.AlbumId),Album.Title,!=,0.99),InvoiceLine.UnitPrice),Track.Bytes))", "score": -0.5477566421199261, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 83, "beams": [{"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.05543424348130552, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.14505792861610306, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Album),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.23325875863655368, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.2835280957161141, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.AlbumId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.2967890644009385, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2971622189160195, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.301233225595886, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Album),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3228824437713512, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3281833177876906, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.34606208794756205, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.3480019664622226, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.3542085064235709, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total)", "score": -0.36282345768881996, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.AlbumId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.3767393109996833, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.456617562476314, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 84, "beams": [{"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Rogers Canada), Customer.Country),Customer.Country))", "score": -0.030909935738236527, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Rogers Canada), Customer.Country),Customer.Country))", "score": -0.3219783648655721, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,Rogers Canada), Customer.Country),Customer.Country))", "score": -0.4020934447453328, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Country,!=,Rogers Canada), Customer.Country),Customer.Country))", "score": -0.5974844929569372, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Rogers Canada), Customer.Country),Customer.City))", "score": -0.6366769662399747, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))", "score": -0.6571000560925313, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Country,!=,Rogers Canada), Customer.Country),Customer.Country))", "score": -0.695147418677152, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.HireDate,!=,Rogers Canada), Customer.Country),Customer.Country))", "score": -0.6964373931095906, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Rogers Canada), Customer.Company),Customer.Country))", "score": -0.7126148951047071, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Rogers Canada), Customer.Country),Customer.Fax))", "score": -0.7148318281670072, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Rogers Canada), Customer.Country),Customer.Address))", "score": -0.7236780515213468, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Rogers Canada), Customer.Country),Invoice.BillingCountry))", "score": -0.7376460423965909, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Rogers Canada), Invoice.BillingCountry),Customer.Country))", "score": -0.7423971903317579, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Rogers Canada), Customer.City),Customer.Country))", "score": -0.7462080132954725, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Rogers Canada), Customer.Address),Customer.Country))", "score": -0.749249280690492, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 85, "beams": [{"orig_question": "Whats the total sum of invoices for Brazilian Music tracks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Composer,=,Brazilian Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2373259224424591, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for Brazilian Music tracks?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Brazilian Music),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24335831519943102, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for Brazilian Music tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Track.Composer,=,Brazilian Music),getData(InvoiceLine),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2502311403273445, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for Brazilian Music tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Track.Composer,=,Brazilian Music),getData(InvoiceLine),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2522972400825422, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for Brazilian Music tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Brazilian Music),getData(InvoiceLine),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.26916086427060076, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for Brazilian Music tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Brazilian Music),getData(InvoiceLine),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2702633150785133, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for Brazilian Music tracks?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Brazilian Music),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.285731438749026, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for Brazilian Music tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Artist.Name,=,Brazilian Music),getData(InvoiceLine),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.28974875918863485, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for Brazilian Music tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Track.Composer,=,Brazilian Music),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.29272499636451194, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for Brazilian Music tracks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Composer,=,Brazilian Music),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.29303848312453673, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for Brazilian Music tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Artist.Name,=,Brazilian Music),getData(InvoiceLine),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2947195442512958, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for Brazilian Music tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Track.Composer,=,Brazilian Music),getData(InvoiceLine),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.29733254687644484, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for Brazilian Music tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Brazilian Music),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3095886438859924, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for Brazilian Music tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Track.Composer,=,Brazilian Music),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.31123460136385295, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for Brazilian Music tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Brazilian Music),getData(InvoiceLine),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.31736472162761364, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 86, "beams": [{"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.05175456019787816, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.21651419239788083, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Playlist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.3762959017112735, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.4677195026233676, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),MediaType.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.51029286521225, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.5177280678108218, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Milliseconds))", "score": -0.6184465339101735, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Genre.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.6547115220382693, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Bytes))", "score": -0.6588260581411305, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),PlaylistTrack.TrackId,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.756072439129639, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Album.Title,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.7804240359619143, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Milliseconds))", "score": -0.7832061661101761, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,!=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.7974971391013241, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Title,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.7978895677879336, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.InvoiceDate,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.8235317839935306, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 87, "beams": [{"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))", "score": -0.10812277331515958, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.FirstName))", "score": -0.39624928954183475, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.LastName))", "score": -0.461213905893935, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.LastName))", "score": -0.47977817895183245, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.PostalCode))", "score": -0.5206259086149924, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Artist.ArtistId))", "score": -0.6113943046976167, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Employee.LastName))", "score": -0.6537964672713098, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Genre.GenreId))", "score": -0.6816420874064325, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.FirstName))", "score": -0.7493404221206101, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))", "score": -0.7679046951785076, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Fax))", "score": -0.7685306835215169, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Phone))", "score": -0.77274825040894, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Email))", "score": -0.8075670976174023, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.LastName),Customer.LastName))", "score": -0.8240787197161629, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Genre.Name))", "score": -0.8415190478883309, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 88, "beams": [{"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(PlaylistTrack),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3229776292063041, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(InvoiceLine),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.33097568934005134, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(PlaylistTrack),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.33360599019263115, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,James Levine), Track.TrackId),Invoice.Total)", "score": -0.3348865633682099, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(InvoiceLine),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3416040503263784, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,James Levine), Track.TrackId),Invoice.Total)", "score": -0.3530911130414554, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(PlaylistTrack),Genre.GenreId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.35809925136114124, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(PlaylistTrack),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3591716406281408, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(InvoiceLine),Genre.GenreId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3660973114948885, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(InvoiceLine),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.36716970076188804, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(PlaylistTrack),Genre.GenreId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3687276123474683, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(PlaylistTrack),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.36980000161446785, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(InvoiceLine),Genre.GenreId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.37672557389601646, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.37691602235906063, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(InvoiceLine),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.377797963163016, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 89, "beams": [{"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.17078188747306766, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2328644955338915, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.26434832814558606, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>,0.99),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.26574152978068233, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.27565377697169996, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2760034480583211, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Track.Milliseconds,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2880825880788783, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Invoice.BillingAddress,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2893932012078027, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>,0.99),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3085308112184908, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.30888048230511195, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3187927294961295, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.32723239662051856, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.329084080838289, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3516697958614479, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3595977748195754, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 90, "beams": [{"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.039887126912810184, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.13324196021085657, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.1373209847081863, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.19791255783337494, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.20486781505846835, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.2692802719137297, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.329701946623594, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.3384264676724904, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3434150914108589, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.MediaTypeId))", "score": -0.3553760268340332, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),Customer.Company))", "score": -0.37060129077369103, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Customer.CustomerId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3774625955781783, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.3785569194095741, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.3862668868365528, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),Track.MediaTypeId))", "score": -0.39829666810547154, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 91, "beams": [{"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(getData(Playlist), Employee.State),Playlist.Name))", "score": -0.38127361391813797, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(getData(Playlist), Playlist.Name),Playlist.Name))", "score": -0.3996951541044335, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,=,Music), Employee.FirstName),Playlist.Name))", "score": -0.4791592478241, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(getData(Playlist), Employee.State),Employee.State))", "score": -0.48949701457387684, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.5008959365157705, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,=,Music), Employee.FirstName),Employee.FirstName))", "score": -0.5049947618927035, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(getData(Playlist), Playlist.Name),Employee.State))", "score": -0.5079185547601723, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),MediaType.Name))", "score": -0.540272950018852, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,=,Music), Playlist.Name),Playlist.Name))", "score": -0.5426287173713717, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Employee.FirstName))", "score": -0.5602029880974242, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(getData(Playlist), Employee.State),Employee.FirstName))", "score": -0.5637500806016769, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,=,Music), Playlist.Name),Employee.FirstName))", "score": -0.5684642314399753, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Track.Name))", "score": -0.572915572176369, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(getData(Playlist), Playlist.Name),Employee.FirstName))", "score": -0.5821716207879725, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.5932935130891767, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 92, "beams": [{"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),Album.Title))", "score": -0.16921757298628634, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),Album.Title))", "score": -0.1702563081530943, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(MediaType),InvoiceLine.InvoiceId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),Album.Title))", "score": -0.17669087500138497, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),Album.Title))", "score": -0.17772961016819294, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.22313753096796057, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.22417626613476854, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(MediaType),InvoiceLine.InvoiceId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2306108329830592, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.23164956814986715, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),Album.Title))", "score": -0.25432271208350105, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),Album.Title))", "score": -0.26302284855713454, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),Album.Title))", "score": -0.28030306093066254, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))", "score": -0.2875462336508576, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))", "score": -0.29624637012449107, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(InvoiceLine),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),Album.Title))", "score": -0.29704836198317947, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(InvoiceLine),Track.MediaTypeId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),Album.Title))", "score": -0.29808709714998743, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 93, "beams": [{"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))", "score": -0.03307176466205419, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.State),Customer.Address))", "score": -0.3594619733385116, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.FirstName),Customer.Address))", "score": -0.4329087835840255, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Country),Customer.Address))", "score": -0.5987504822305709, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Company),Customer.Address))", "score": -0.6144085032037765, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.State))", "score": -0.6426191445543736, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))", "score": -0.6444450974568099, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Employee.Address),Customer.Address))", "score": -0.6493847471765548, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Company))", "score": -0.6676008816912145, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Email),Customer.Address))", "score": -0.6798442107728988, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.FirstName))", "score": -0.6800287481501073, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Phone),Customer.Address))", "score": -0.687522659926799, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), InvoiceLine.UnitPrice),Customer.Address))", "score": -0.7011275393060714, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Employee.Address))", "score": -0.7258363481714696, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Invoice.CustomerId))", "score": -0.729063403244254, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 94, "beams": [{"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.EmployeeId),Employee.Phone,=,7727B 41 Ave), Employee.Phone),Employee.Phone))", "score": -0.3100228753523641, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,7727B 41 Ave), Employee.Phone),Employee.Phone))", "score": -0.3121970471481184, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.Phone,=,7727B 41 Ave), Employee.Phone),Customer.Phone))", "score": -0.3809189880251335, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Playlist.Name,=,7727B 41 Ave),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.EmployeeId),Employee.Phone,=,7727B 41 Ave), Employee.Phone),Employee.Phone))", "score": -0.3846417425107179, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.Phone,=,7727B 41 Ave), Employee.Phone),Customer.Phone))", "score": -0.39123944407670186, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Playlist.Name,=,+91 0124 39883988),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,7727B 41 Ave), Employee.Phone),Employee.Phone))", "score": -0.39190535942609206, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Playlist.Name,=,+91 0124 39883988),merge(getData(Employee),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.EmployeeId),Employee.Phone,=,+91 0124 39883988), Employee.Phone),Employee.Phone))", "score": -0.3999640162359789, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Invoice.CustomerId,Employee.EmployeeId),Employee.Phone,=,7727B 41 Ave), Employee.Phone),Customer.Phone))", "score": -0.42491745404804343, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),getData(Employee),Invoice.CustomerId,Employee.EmployeeId),Employee.Phone,=,7727B 41 Ave), Employee.Phone),Customer.Phone))", "score": -0.43523791009961177, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.FirstName,=,7727B 41 Ave), Employee.Phone),Customer.Phone))", "score": -0.4366012638247457, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.Address,=,7727B 41 Ave), Employee.Phone),Customer.Phone))", "score": -0.4396976416008425, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Employee),Invoice.CustomerId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.Phone,=,7727B 41 Ave), Employee.Phone),Customer.Phone))", "score": -0.4420293010369156, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.Phone,=,+91 0124 39883988), Employee.Phone),Employee.Phone))", "score": -0.44678621044037997, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.FirstName,=,7727B 41 Ave), Employee.Phone),Customer.Phone))", "score": -0.4469217329923667, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.Address,=,7727B 41 Ave), Employee.Phone),Customer.Phone))", "score": -0.4500181107684636, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 95, "beams": [{"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Cupertino), Track.Name),Track.Name))", "score": -0.11967027426908317, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Cupertino), Track.Name),Track.Name))", "score": -0.2269453336294811, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Cupertino),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.24097171055697458, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Cupertino),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId), Track.Name),Track.Name))", "score": -0.26202084084890415, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Cupertino),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.26238496305784326, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingAddress,=,Cupertino), Track.Name),Track.Name))", "score": -0.3416371642970779, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,Cupertino), Track.Name),Track.Name))", "score": -0.3445845195765287, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Cupertino), Track.Name),Track.Name))", "score": -0.3537974307055265, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Cupertino),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.3934036801375637, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Playlist.Name,=,Cupertino), Track.Name),Track.Name))", "score": -0.40557985992381873, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Cupertino),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId), Track.Name),Track.Name))", "score": -0.4214153854360335, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Cupertino),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.42177950764497263, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,Cupertino),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId), Track.Name),Track.Name))", "score": -0.4272988207561237, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,Cupertino),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.4276629429650628, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Cupertino), Track.Name),Track.Name))", "score": -0.44402813405940833, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 96, "beams": [{"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.014445939950415753, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Track.TrackId),Track.Milliseconds)", "score": -0.2826892539166626, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3600374021721111, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.40765035902658375, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.4528235698990447, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.4528405292597282, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Invoice.InvoiceId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.47691003635071677, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Track.TrackId),Track.Milliseconds)", "score": -0.4928270296304705, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.49928308169596647, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.507901919426233, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(Playlist),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.5083768465560604, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.5158779941004473, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.5176670791498236, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(filter(getData(PlaylistTrack),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.5178149030809943, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Employee.State,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.5226035378921188, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 97, "beams": [{"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.04602072109154669, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5759862524051739, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(Invoice), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.6156877449477665, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), Track.TrackId),InvoiceLine.Quantity)", "score": -0.7026473768793472, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.761525278394328, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),Customer.City)", "score": -0.9143492178134692, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.9856095486137015, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), Invoice.BillingCity),InvoiceLine.Quantity)", "score": -0.9977998430962195, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -1.0423706284966685, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), Customer.City),InvoiceLine.Quantity)", "score": -1.145267962617858, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(Invoice), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -1.1456532762613936, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -1.1588043845367875, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.UnitPrice),InvoiceLine.Quantity)", "score": -1.1649289483455818, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(Customer), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -1.2094006296247994, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),Album.Title)", "score": -1.2105606036161687, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 98, "beams": [{"orig_question": "What are the dates of invoices billed to 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.06366972922887726, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of invoices billed to 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.Total),Invoice.InvoiceDate))", "score": -0.23753420561160965, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of invoices billed to 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.35399812860784824, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of invoices billed to 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3595718848425611, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of invoices billed to 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4338065271302954, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of invoices billed to 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.43938028336500823, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of invoices billed to 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.InvoiceDate))", "score": -0.4400693729480736, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of invoices billed to 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,4, Rue Milton), Invoice.Total),Invoice.InvoiceDate))", "score": -0.47496927981745773, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of invoices billed to 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,4, Rue Milton), Invoice.Total),Invoice.InvoiceDate))", "score": -0.4805430360521705, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of invoices billed to 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,4, Rue Milton),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4954878616253654, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of invoices billed to 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5080247275699935, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of invoices billed to 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.Total))", "score": -0.5116351174151532, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of invoices billed to 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.5352261589800946, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of invoices billed to 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,4, Rue Milton), Invoice.Total),Invoice.InvoiceDate))", "score": -0.554777687753956, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of invoices billed to 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,>=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5732906823473058, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 99, "beams": [{"orig_question": "What is the sum of the tracks sizes ? ", "inferred_code": "sum(distinct(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.3450354697846511, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the tracks sizes ? ", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Track.Name,=,None),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.34638882611993477, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the tracks sizes ? ", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)", "score": -0.35187566129713216, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the tracks sizes ? ", "inferred_code": "sum(distinct(filter(merge(getData(Genre),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.3613563701882486, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the tracks sizes ? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,=,None),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3653373189111552, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the tracks sizes ? ", "inferred_code": "sum(distinct(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,None), Track.TrackId),Track.Bytes)", "score": -0.37657673373911976, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the tracks sizes ? ", "inferred_code": "sum(distinct(filter(merge(getData(Genre),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,None), Track.TrackId),Track.Bytes)", "score": -0.3928976341427173, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the tracks sizes ? ", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Track.Name,=,None),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4220665759829069, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the tracks sizes ? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,=,None),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.42242432035714206, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the tracks sizes ? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,=,None),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.4626479285233288, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the tracks sizes ? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,=,None),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.4671094656463087, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the tracks sizes ? ", "inferred_code": "sum(distinct(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Track.Composer,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.48023730662822534, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the tracks sizes ? ", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Track.Name,=,None),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.48610314950813227, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the tracks sizes ? ", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Track.Name,=,None),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.48640135742043245, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the tracks sizes ? ", "inferred_code": "sum(distinct(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.49301181770005825, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 100, "beams": [{"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.31028133548691794, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<=,213831),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3315498153837375, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,=,213831),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.35704991695917376, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3652746913851537, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.UnitPrice),InvoiceLine.UnitPrice)", "score": -0.36783354941528534, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<=,213831),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice)", "score": -0.38075414560995224, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,=,213831),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice)", "score": -0.40625424718538855, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.UnitPrice),Track.UnitPrice)", "score": -0.42282690531352113, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,213831),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.42805388801533695, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.4608712206804797, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,213831),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice)", "score": -0.4772582466177514, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<=,213831),merge(filter(getData(InvoiceLine),Track.Milliseconds,>=,213831),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.48608757012148296, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<=,213831),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4925010841187605, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<=,213831),merge(filter(getData(InvoiceLine),Track.Milliseconds,>=,213831),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5037511299627329, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<=,213831),filter(getData(InvoiceLine),Invoice.Total,>=,213831),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice)", "score": -0.5072037157911642, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 101, "beams": [{"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.201947762132418, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2099685558724697, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2193629311277582, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.22738372486780992, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27051733363183766, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Invoice),getData(InvoiceLine),Customer.CustomerId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27759978030666066, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2785381273718894, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Invoice),getData(InvoiceLine),Customer.CustomerId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.28562057404671237, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28793250262717784, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2928490042679302, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.29498815795922567, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.29595329636722956, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Invoice),Customer.CustomerId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.30087066106620913, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3039519364042271, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.30695389152209973, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 102, "beams": [{"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))", "score": -0.23371567061091977, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.PostalCode))", "score": -0.39143896731862776, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Fax))", "score": -0.43374979032791633, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Phone))", "score": -0.4738319911218718, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.FirstName))", "score": -0.48593215452289035, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Employee.LastName))", "score": -0.49106998528435314, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Artist.ArtistId))", "score": -0.5865716970653384, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.LastName),Customer.LastName))", "score": -0.5959467273917722, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.LastName))", "score": -0.6201317783029603, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.LastName))", "score": -0.6329304485888979, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.LastName))", "score": -0.6609916285171119, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Genre.GenreId))", "score": -0.6729726883234264, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Company))", "score": -0.7448778065078921, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.LastName),Customer.PostalCode))", "score": -0.7536700240994801, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))", "score": -0.7778550750106682, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 103, "beams": [{"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Mot\u00f6rhead), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.10513603220996148, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Mot\u00f6rhead), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.13634726727772534, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Mot\u00f6rhead), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.19463033815997183, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Mot\u00f6rhead), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.215010886082378, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Mot\u00f6rhead), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2156356996829724, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Mot\u00f6rhead), Invoice.InvoiceId),Invoice.Total)", "score": -0.23110127765686664, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Mot\u00f6rhead), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.24998065998067073, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Mot\u00f6rhead), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.26231251272463046, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Mot\u00f6rhead), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.27034264862774027, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Mot\u00f6rhead), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2963178644546448, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Mot\u00f6rhead), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.30708599426048827, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Mot\u00f6rhead), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.32059558360687695, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Mot\u00f6rhead), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.32138422246272674, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Mot\u00f6rhead), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.32309579822040246, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Mot\u00f6rhead), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.33747494632852876, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 104, "beams": [{"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.1655579982908727, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.16740795247250478, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.1840391777148671, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18870000512346155, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19693132310992145, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2145372888954378, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2431872228769637, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2491471080238178, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2683540847299289, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Invoice.Total)", "score": -0.27246516246033115, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.277806456766909, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2827246013223364, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2832138766639518, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.29531829678612637, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2960130081461979, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 105, "beams": [{"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.030913855809103552, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.FirstName),Employee.LastName))", "score": -0.35252154797626645, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.FirstName))", "score": -0.38714517552716643, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Email),Employee.LastName))", "score": -0.5084433051974884, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.Email))", "score": -0.5248801847205868, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.6508728602652809, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.FirstName,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.6569645741706154, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Title),Employee.LastName))", "score": -0.6974757406146637, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Artist.ArtistId))", "score": -0.6988450427757016, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.FirstName),Employee.FirstName))", "score": -0.7087528676943293, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.7333712914710304, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.Phone))", "score": -0.7586679597602597, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Track.Name))", "score": -0.7770316143737546, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Fax),Employee.LastName))", "score": -0.7883336636455169, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.Title))", "score": -0.8019482632385007, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 106, "beams": [{"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,=,Walking Into Clarksdale),getData(Track),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.268018629376647, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Album.ArtistId),Artist.Name,!=,Walking Into Clarksdale),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.AlbumId),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.27422540511345295, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,=,1.99),getData(Track),Album.AlbumId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.29654897014455195, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Album.ArtistId),Artist.Name,!=,Walking Into Clarksdale),merge(getData(Track),getData(InvoiceLine),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.29875561885650465, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Artist),getData(Track),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Walking Into Clarksdale),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.AlbumId),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3053271120261963, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,=,Walking Into Clarksdale),getData(Track),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.AlbumId),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.31236681025670443, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Album.ArtistId),Artist.Name,!=,1.99),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3255199231197865, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Artist),getData(Track),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Walking Into Clarksdale),merge(getData(Track),getData(InvoiceLine),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.329857325769248, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,=,1.99),getData(Track),Album.AlbumId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.AlbumId),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.33691075288684963, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3391460728342693, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,1.99),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.AlbumId),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3544413087198619, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Artist),getData(Track),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,1.99),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3616731324902413, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,=,1.99),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3689697923021215, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Album.ArtistId),Artist.Name,!=,1.99),getData(Track),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3779617264598731, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Album.ArtistId),Artist.Name,!=,1.99),getData(InvoiceLine),Album.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.378321608702106, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 107, "beams": [{"orig_question": "What are the email addresses of the Canadian employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,Canada), Employee.Email),Employee.Email))", "score": -0.12308097225650272, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the Canadian employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Canada), Employee.Email),Employee.Email))", "score": -0.25457382542117557, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the Canadian employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Canada), Employee.Email),Employee.Email))", "score": -0.3339344148062082, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the Canadian employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Canada), Employee.Email),Employee.Email))", "score": -0.36409877580626926, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the Canadian employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,Canada), Employee.Email),Employee.Email))", "score": -0.3947514180563303, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the Canadian employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Canada), Employee.Email),Employee.Email))", "score": -0.39708535713180027, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the Canadian employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Canada), Employee.Email),Employee.Email))", "score": -0.40031205457671604, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the Canadian employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Canada), Employee.Email),Employee.Email))", "score": -0.4847862605474802, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the Canadian employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Email))", "score": -0.5240421180151316, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the Canadian employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,Canada), Employee.Email),Track.UnitPrice))", "score": -0.5528903004251333, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the Canadian employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,Canada), Employee.Email),Track.Bytes))", "score": -0.5608729120813223, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the Canadian employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,Canada), Employee.BirthDate),Employee.Email))", "score": -0.6250459567181679, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the Canadian employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.TrackId,=,Canada), Employee.Email),Employee.Email))", "score": -0.6495039348028513, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the Canadian employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,Canada), Customer.Email),Employee.Email))", "score": -0.6590874210469337, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the Canadian employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,Canada), Employee.Email),Customer.Email))", "score": -0.6741483208261343, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 108, "beams": [{"orig_question": "On which album is the largest track on the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Bytes),Album.Title))", "score": -0.04589753185362127, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the largest track on the comedy genre?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.13099701507110467, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the largest track on the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Comedy),Track.Bytes),Album.Title))", "score": -0.22615562058033656, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the largest track on the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),getData(Album),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Bytes),Album.Title))", "score": -0.3542131429599657, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the largest track on the comedy genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.4005793339345558, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the largest track on the comedy genre?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.41196122009076214, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the largest track on the comedy genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.4143126315280032, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the largest track on the comedy genre?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.41660172891616615, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the largest track on the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Album.Title,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Bytes),Album.Title))", "score": -0.4321778836278087, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the largest track on the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Track.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Bytes),Album.Title))", "score": -0.44647688180093303, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the largest track on the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),Track.Bytes),Album.Title))", "score": -0.45090821897537153, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the largest track on the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Bytes),Track.Bytes))", "score": -0.4593807424405731, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the largest track on the comedy genre?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Album),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.4605828335933732, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the largest track on the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Artist.ArtistId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Bytes),Album.Title))", "score": -0.47204815592919325, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the largest track on the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Comedy),Track.Bytes),Album.Title))", "score": -0.47449823451932327, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 109, "beams": [{"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.054622278545139125, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Playlist.Name))", "score": -0.2994147511162737, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Customer.State))", "score": -0.37971996981286793, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Employee.State))", "score": -0.40390824991845875, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.5055680172481516, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Customer.FirstName))", "score": -0.5561559172310808, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Customer.Country))", "score": -0.5704581113495806, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),MediaType.Name))", "score": -0.5827531786599138, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.6030337661468366, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Employee.State),Invoice.BillingState))", "score": -0.6067263330296555, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Playlist.PlaylistId))", "score": -0.6069537373223284, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Track.UnitPrice))", "score": -0.6173795433678606, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.6652303189002851, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Customer.Phone))", "score": -0.6762754293122271, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Customer.State),Invoice.BillingState))", "score": -0.6786207999066391, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 110, "beams": [{"orig_question": "How many media types are there in playlists with name equal to Heavy Metal Classic", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.1379235839303119, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in playlists with name equal to Heavy Metal Classic", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.13941812979979795, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in playlists with name equal to Heavy Metal Classic", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(PlaylistTrack),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.1695599228971806, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in playlists with name equal to Heavy Metal Classic", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Heavy Metal Classic), MediaType.Name),MediaType.Name))", "score": -0.17923450171701438, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in playlists with name equal to Heavy Metal Classic", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.1902525716912781, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in playlists with name equal to Heavy Metal Classic", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), MediaType.Name),MediaType.Name))", "score": -0.21891814874425708, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in playlists with name equal to Heavy Metal Classic", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.22016248883802766, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in playlists with name equal to Heavy Metal Classic", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.22142071489918652, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in playlists with name equal to Heavy Metal Classic", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.23865539324067297, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in playlists with name equal to Heavy Metal Classic", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), MediaType.Name),MediaType.Name))", "score": -0.2514644906938322, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in playlists with name equal to Heavy Metal Classic", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.28150491604261724, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in playlists with name equal to Heavy Metal Classic", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.3017494353921478, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in playlists with name equal to Heavy Metal Classic", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.31596024064861283, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in playlists with name equal to Heavy Metal Classic", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,Playlist.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.3215979478334152, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in playlists with name equal to Heavy Metal Classic", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(PlaylistTrack),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3284988331015449, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 111, "beams": [{"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Callahan),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.04411368879531226, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Album.ArtistId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Callahan),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.14170831754150695, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Album),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Callahan),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.203978810168553, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Customer.SupportRepId),Employee.City,!=,Callahan),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.23152048382811585, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Callahan),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.24448267362678988, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Callahan),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2522771162330942, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Album.ArtistId,!=,Callahan),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.25478389638327903, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Callahan),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.25786231962387246, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.City,!=,Callahan),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.26090171178971205, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Employee),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Callahan),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2621777522378739, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,!=,Callahan),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.2672655469917711, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Callahan),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2734404750698074, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Artist),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Callahan),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2748018026038317, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Artist.Name,!=,Callahan),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.27528950424901405, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Artist.ArtistId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Callahan),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2835952931214882, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 112, "beams": [{"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.04518692887092635, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.1818195813557652, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Album.Title),Album.Title))", "score": -0.2954960996171129, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Album.Title))", "score": -0.3039063527292405, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Album),Track.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.33761315394538366, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Album.Title),Album.Title))", "score": -0.3455465627684786, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.MediaTypeId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.36241592965290076, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Album),Track.AlbumId,MediaType.MediaTypeId), Album.Title),Album.Title))", "score": -0.3633153477258325, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.3776278586226728, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Album),Track.MediaTypeId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.38681685974242436, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,MediaType.MediaTypeId), Album.Title),Album.Title))", "score": -0.39213652086739886, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.40535130197334307, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,MediaType.MediaTypeId), Album.Title),Album.Title))", "score": -0.40779691741307883, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Album),Track.MediaTypeId,MediaType.MediaTypeId), Album.Title),Album.Title))", "score": -0.41251904465393713, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.41507568384497323, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 113, "beams": [{"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,J. Kay/Jay Kay),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.29336787053098307, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Track.Composer,=,J. Kay/Jay Kay),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3195973131990935, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))", "score": -0.35296646681844057, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Track.Composer,=,J. Kay/Jay Kay),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.36277275537798026, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.TrackId),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))", "score": -0.36484211356329266, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))", "score": -0.3660932566892155, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))", "score": -0.3684308032516291, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))", "score": -0.3685692449610808, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.TrackId),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))", "score": -0.372787147459539, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))", "score": -0.3765142788573271, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Track.Composer,=,J. Kay/Jay Kay),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.38547574794306483, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,J. Kay/Jay Kay),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.40877235982408994, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name)", "score": -0.41143060610300264, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))", "score": -0.4161169648183669, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.TrackId),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name)", "score": -0.4416128864392566, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 114, "beams": [{"orig_question": "What album in easy listening has the heaviest song?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Artist.ArtistId),Track.AlbumId,PlaylistTrack.TrackId),Track.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.2040680945051119, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What album in easy listening has the heaviest song?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,PlaylistTrack.TrackId),Track.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.22738616321301494, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What album in easy listening has the heaviest song?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Artist.ArtistId),Track.AlbumId,Track.TrackId),Track.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.3056148108513259, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What album in easy listening has the heaviest song?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Track.AlbumId,Artist.ArtistId),Track.AlbumId,PlaylistTrack.TrackId),Track.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.3180858359148536, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What album in easy listening has the heaviest song?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Artist.ArtistId),Track.AlbumId,PlaylistTrack.TrackId),Track.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.32342483783184406, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What album in easy listening has the heaviest song?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Track.TrackId),Track.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.32893287955922895, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What album in easy listening has the heaviest song?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Track.AlbumId,Album.AlbumId),Track.AlbumId,PlaylistTrack.TrackId),Track.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.34140390462275666, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What album in easy listening has the heaviest song?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,PlaylistTrack.TrackId),Track.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.3467429065397471, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What album in easy listening has the heaviest song?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Artist.ArtistId),Track.AlbumId,InvoiceLine.TrackId),Track.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.3502682294763114, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What album in easy listening has the heaviest song?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.35735801565161024, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What album in easy listening has the heaviest song?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Artist.ArtistId),Artist.ArtistId,PlaylistTrack.TrackId),Track.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.3637327811052061, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What album in easy listening has the heaviest song?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Artist.ArtistId),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.36462813628364, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What album in easy listening has the heaviest song?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Artist.ArtistId),Track.AlbumId,PlaylistTrack.TrackId),Playlist.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.3657311472950533, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What album in easy listening has the heaviest song?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.3704150947378366, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What album in easy listening has the heaviest song?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Easy Listening), Employee.LastName),Album.Title))", "score": -0.40065897578460863, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 115, "beams": [{"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Company))", "score": -0.45812679999130307, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.Company))", "score": -0.4715535580684271, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.Company))", "score": -0.5074638222845754, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Company),Customer.Company))", "score": -0.54959049900026, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))", "score": -0.5775862400597055, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.City))", "score": -0.6033336455360645, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Company),Customer.Company))", "score": -0.603802473144242, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -0.6167604036131885, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.City),Customer.Company))", "score": -0.6330232926175086, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Company))", "score": -0.6403873614966217, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Email),Customer.Company))", "score": -0.6409749694630591, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.City))", "score": -0.6526706678293369, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.LastName),Customer.Company))", "score": -0.6706906751260249, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.City),Customer.Company))", "score": -0.6872352332338778, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Company),Customer.City))", "score": -0.6904242232903925, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 116, "beams": [{"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Australia), Invoice.BillingCity),Customer.City))", "score": -0.1977583758844048, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Australia), Invoice.BillingCity),Album.Title))", "score": -0.22490746456514898, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Customer.City))", "score": -0.3007918514622361, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Album.Title))", "score": -0.32794094014298025, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Australia), Invoice.BillingCity),Customer.City))", "score": -0.472130290449968, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Australia), Invoice.BillingCity),Customer.City))", "score": -0.4803419851077706, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Australia), Invoice.BillingCity),Album.Title))", "score": -0.4992793791307122, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Australia), Invoice.BillingCity),Customer.City))", "score": -0.5031281031979233, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Company,=,Australia), Invoice.BillingCity),Customer.City))", "score": -0.5036698498142869, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Australia), Invoice.BillingCity),Album.Title))", "score": -0.5074910737885148, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Australia), Customer.City),Customer.City))", "score": -0.5279522568298489, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Australia), Invoice.BillingCity),Album.Title))", "score": -0.5302771918786675, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Company,=,Australia), Invoice.BillingCity),Album.Title))", "score": -0.530818938495031, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.PostalCode,=,Australia), Invoice.BillingCity),Customer.City))", "score": -0.5480784096134812, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Australia), Customer.City),Album.Title))", "score": -0.5551013455105931, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 117, "beams": [{"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.0157510488123035, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.6395543969422892, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -0.9884952378457459, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Album.Title)", "score": -1.1383345740378334, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.AlbumId))", "score": -1.1543720372466197, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -1.3218129662069764, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Track.Bytes))", "score": -1.3435977734176985, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Album.Title),Album.Title))", "score": -1.3913136902487635, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.AlbumId),Album.Title))", "score": -1.4477491809755814, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Album.Title))", "score": -1.4745576983815922, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Artist.Name))", "score": -1.4751703238953844, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Customer.City))", "score": -1.4882948009075947, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -1.5012607896656556, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Track.Composer))", "score": -1.5250824617691987, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "sum(distinct(getData(Genre), Album.Title),Album.Title)", "score": -1.533823502684538, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 118, "beams": [{"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.043240422504473894, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.14581614904073845, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),Track.Milliseconds),Album.Title))", "score": -0.21495554138220627, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.21533454702380378, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3402902012263348, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3912819807537051, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Bossa Nova),Track.Milliseconds),Album.Title))", "score": -0.3996342718921067, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,MediaType.MediaTypeId),Track.Milliseconds),Album.Title))", "score": -0.40420673816421504, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name),Album.Title))", "score": -0.4204204051054896, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Genre.GenreId),Track.Milliseconds),Album.Title))", "score": -0.42348912496323166, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.4511644797697902, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.47388073323555197, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Bossa Nova),Track.Milliseconds),Album.Title))", "score": -0.4794974579600035, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Track.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.48740012159355484, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Artist.ArtistId),Track.Milliseconds),Album.Title))", "score": -0.4917676033973301, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 119, "beams": [{"orig_question": "How many different customer emails are there for customers that bought a track for the unit price of 0.99", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,0.99), Customer.LastName),Customer.Email))", "score": -0.2330768650463226, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails are there for customers that bought a track for the unit price of 0.99", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,0.99), Customer.LastName),MediaType.Name))", "score": -0.2408468374620302, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails are there for customers that bought a track for the unit price of 0.99", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,0.99), MediaType.Name),Customer.Email))", "score": -0.2922583797018192, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails are there for customers that bought a track for the unit price of 0.99", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,0.99), MediaType.Name),MediaType.Name))", "score": -0.3000283521175268, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails are there for customers that bought a track for the unit price of 0.99", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,0.99), Customer.LastName),MediaType.MediaTypeId))", "score": -0.30003792565380183, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails are there for customers that bought a track for the unit price of 0.99", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,0.99), Customer.Company),Customer.Email))", "score": -0.3366007049143543, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails are there for customers that bought a track for the unit price of 0.99", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,0.99), Customer.LastName),Customer.Email))", "score": -0.3371652013261327, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails are there for customers that bought a track for the unit price of 0.99", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,0.99), Customer.LastName),Customer.Email))", "score": -0.3429044765161013, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails are there for customers that bought a track for the unit price of 0.99", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,0.99), Customer.Company),MediaType.Name))", "score": -0.3443706773300619, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails are there for customers that bought a track for the unit price of 0.99", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,0.99), Customer.LastName),MediaType.Name))", "score": -0.3449351737418403, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails are there for customers that bought a track for the unit price of 0.99", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,0.99), Customer.LastName),Album.Title))", "score": -0.3504277753177663, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails are there for customers that bought a track for the unit price of 0.99", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,0.99), Customer.LastName),MediaType.Name))", "score": -0.35067444893180894, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails are there for customers that bought a track for the unit price of 0.99", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,0.99), MediaType.Name),MediaType.MediaTypeId))", "score": -0.3592194403092985, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails are there for customers that bought a track for the unit price of 0.99", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,0.99), Customer.LastName),Customer.Company))", "score": -0.3741175506372475, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails are there for customers that bought a track for the unit price of 0.99", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,0.99), Customer.FirstName),Customer.Email))", "score": -0.37972455508563185, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 120, "beams": [{"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.021530298679863336, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Genre.GenreId),Album.AlbumId,InvoiceLine.TrackId),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.3697855298618371, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Genre.GenreId),Album.AlbumId,Album.AlbumId),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.3985766311021165, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.4094703894834822, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Genre.GenreId),InvoiceLine.TrackId,Album.AlbumId),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.4382614907237616, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.MediaTypeId,Genre.GenreId),Album.AlbumId,InvoiceLine.TrackId),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.4556195324944416, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.GenreId,Genre.GenreId),Album.AlbumId,InvoiceLine.TrackId),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.4592446244377999, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,InvoiceLine.TrackId),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.4710725380095082, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.47122733159163954, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.MediaTypeId,Genre.GenreId),Album.AlbumId,Album.AlbumId),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.484410633734721, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.GenreId,Genre.GenreId),Album.AlbumId,Album.AlbumId),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.4880357256780793, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.49476561221765747, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.MediaTypeId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.4953043921160867, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.498929484059445, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),getData(Track),Track.AlbumId,PlaylistTrack.TrackId),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.5745313462714157, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 121, "beams": [{"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.City),Employee.LastName))", "score": -0.13745124116758234, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.City),Employee.City))", "score": -0.19778866544584162, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.LastName),Employee.LastName))", "score": -0.348637296261586, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.LastName),Employee.City))", "score": -0.4089747205398453, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.City),Employee.Email))", "score": -0.4456791229567898, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Title),Employee.LastName))", "score": -0.45298452526549227, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Country),Employee.LastName))", "score": -0.4724660649917496, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Title),Employee.City))", "score": -0.5133219495437515, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.LastName))", "score": -0.516692830624379, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.City),Employee.Fax))", "score": -0.5320203252158535, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Country),Employee.City))", "score": -0.5328034892700089, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.LastName))", "score": -0.5509211555145157, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.City),Employee.Title))", "score": -0.5759676344714535, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.City))", "score": -0.5770302549026383, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Fax),Employee.LastName))", "score": -0.5948006346843613, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 122, "beams": [{"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.13852973534345625, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.17413268723236916, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)", "score": -0.19454220211753148, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.24165195201856238, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Track.UnitPrice)", "score": -0.24530480669326737, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.2538874734079474, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice)", "score": -0.2590559210057462, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.2636958750852284, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),Track.UnitPrice)", "score": -0.28220966175055595, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.UnitPrice)", "score": -0.2866804110964518, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.28949042529686025, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3028514616139653, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.30356103670112805, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), PlaylistTrack.TrackId),Track.UnitPrice)", "score": -0.3271021397888867, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Track.UnitPrice)", "score": -0.33622501472236627, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 123, "beams": [{"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))", "score": -0.1874619976615577, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Employee.LastName))", "score": -0.2549035728907256, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.FirstName),Customer.LastName))", "score": -0.3656308942472606, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.FirstName))", "score": -0.42732398519274284, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Artist.ArtistId))", "score": -0.4325152219271331, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.FirstName),Employee.LastName))", "score": -0.4330724694764285, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))", "score": -0.48097119415160705, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))", "score": -0.5152560838496356, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))", "score": -0.5160475143229633, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))", "score": -0.5381279357707172, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,+32 02 219 03 03), Customer.LastName),Employee.LastName))", "score": -0.548412769380775, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Employee.LastName),Customer.LastName))", "score": -0.556488707009521, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.Email),Customer.LastName))", "score": -0.5609693073665767, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))", "score": -0.5796094902789264, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,+32 02 219 03 03), Customer.LastName),Employee.LastName))", "score": -0.5826976590788036, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 124, "beams": [{"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.21131025983686413, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Composer,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.2766501827418324, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(getData(Track), Track.Milliseconds),Track.Milliseconds))", "score": -0.3530928343714848, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.4311656591133553, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(InvoiceLine),Track.AlbumId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.4320407760199546, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.4625168993871908, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),Track.AlbumId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.4633921791014986, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Bytes),Track.Milliseconds))", "score": -0.4644605944185969, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Genre.Name,=,Respectable),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.4677405780492289, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Respectable),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.4784538701771473, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.4864284916102406, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Genre.Name,=,Respectable),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.4949183429471616, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Album.Title,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.5006626768290516, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Genre.Name,=,Respectable),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.TrackId,Track.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.5035011832751181, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Respectable),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.5056316251418715, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 125, "beams": [{"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.1847336773960008, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Customer.SupportRepId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.18580219566916711, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(Album),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.18884926848743025, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(Album),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Customer.SupportRepId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.1899177867605966, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Invoice.CustomerId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.2254560157828824, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.22652453405604875, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(Album),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Invoice.CustomerId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.22957160687431188, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(Album),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.2306401251474782, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.2659560483639323, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Customer.SupportRepId),Employee.FirstName,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.2670245666370986, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(Album),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.2700716394553618, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(Album),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Customer.SupportRepId),Employee.FirstName,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.27114015772852806, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Customer.SupportRepId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.27355256216861384, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Customer.SupportRepId),Customer.CustomerId,Customer.SupportRepId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.2746210804417802, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(Album),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Customer.SupportRepId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.2776681532600433, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 126, "beams": [{"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.0065288257810429485, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.9193850291761909, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.AlbumId))", "score": -1.0589364881598584, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -1.1574323317709312, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Customer.Email))", "score": -1.1688512200560888, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Track.Bytes))", "score": -1.1988821215069265, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Customer.City))", "score": -1.296969603462939, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Customer.LastName))", "score": -1.33647155724015, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Track.Name))", "score": -1.3704113499545372, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Track.Bytes),Album.Title))", "score": -1.373354019092022, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -1.4064775091645827, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Artist.Name),Album.Title))", "score": -1.410300833421076, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.AlbumId),Album.Title))", "score": -1.410664770665592, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Track.AlbumId))", "score": -1.42122251545103, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Artist.ArtistId))", "score": -1.4297116477237612, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 127, "beams": [{"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (403) 246-9887), Track.TrackId),Track.UnitPrice)", "score": -0.12131082819472276, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)", "score": -0.1448516004947323, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.15051986661602232, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Phone,=,+1 (403) 246-9887),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.19154441528216293, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,+1 (403) 246-9887),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)", "score": -0.195828985828893, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Phone,=,+1 (403) 246-9887), Track.TrackId),Track.UnitPrice)", "score": -0.2040658038381078, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+1 (403) 246-9887),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.20660126132641105, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.Phone,=,+1 (403) 246-9887), Track.TrackId),Track.UnitPrice)", "score": -0.21427629595360595, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Invoice.BillingCountry,=,+1 (403) 246-9887),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.22270612472454057, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (403) 246-9887), Track.TrackId),Track.Bytes)", "score": -0.2387772853951879, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Employee),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (403) 246-9887), Track.TrackId),Track.UnitPrice)", "score": -0.25850866935327116, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (403) 246-9887), Track.TrackId),Track.UnitPrice)", "score": -0.2707030623871037, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,=,+1 (403) 246-9887),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.2719251992736189, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Employee),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)", "score": -0.28394885450220037, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,+1 (403) 246-9887), Track.TrackId),Track.UnitPrice)", "score": -0.28559947101886246, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 128, "beams": [{"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,7.96), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.25655796064887876, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)", "score": -0.25873225903170594, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,7.96), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.29860344547657885, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,7.96), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.304126618953238, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,7.96), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3049729678745681, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,7.96), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3104961413512273, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)", "score": -0.3144614681700886, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)", "score": -0.3199846416467477, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)", "score": -0.32083091961299204, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)", "score": -0.3263540930896512, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(merge(filter(getData(Invoice),InvoiceLine.Quantity,>=,7.96),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,7.96), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.33540225504341004, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(merge(filter(getData(Invoice),InvoiceLine.Quantity,>=,7.96),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,7.96), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3457879505390881, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,7.96), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3463007372024851, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(merge(filter(getData(Invoice),InvoiceLine.Quantity,>=,7.96),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)", "score": -0.346986147446349, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(merge(filter(getData(Invoice),InvoiceLine.Quantity,>=,7.96),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,7.96), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.35127442551381094, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 129, "beams": [{"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.04478828099211103, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),getData(Genre),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.1948298410178158, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))", "score": -0.22434191954032678, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))", "score": -0.23377831703454469, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2615815566536971, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))", "score": -0.27255017163590345, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))", "score": -0.28431694512051164, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.29468303629746956, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.30305225563904803, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Genre),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))", "score": -0.30350639321894113, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3077055993209177, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))", "score": -0.33253436181935014, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))", "score": -0.3354638083077907, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name)", "score": -0.33951490902475673, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Track.GenreId))", "score": -0.36667899779764035, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 130, "beams": [{"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.TrackId),Track.Bytes)", "score": -0.11674039287060337, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.11834020716505915, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)", "score": -0.14564992621464018, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.TrackId),Track.UnitPrice)", "score": -0.17928407804916643, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.2687205328322697, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.27106919910591576, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.2960302518818507, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.30413727109765354, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.37958289325239775, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3830879937396332, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.TrackId),Track.Bytes)", "score": -0.3919307153453883, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.4082971488216068, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.UnitPrice,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.4128183994368499, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Invoice.InvoiceDate,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.42217620133569844, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.TrackId),Track.UnitPrice)", "score": -0.43448434958803167, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 131, "beams": [{"orig_question": "How many different media types do the tracks from the playlist Brazilian Music have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.03779104798263913, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks from the playlist Brazilian Music have?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Brazilian Music),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.13545896763695453, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks from the playlist Brazilian Music have?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.20101261004521137, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks from the playlist Brazilian Music have?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.20230905421253847, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks from the playlist Brazilian Music have?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.24116261201500147, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks from the playlist Brazilian Music have?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2519119629867364, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks from the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.30725542956492097, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks from the playlist Brazilian Music have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.30766526718178944, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks from the playlist Brazilian Music have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.TrackId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.3205173825547227, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks from the playlist Brazilian Music have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.3297754272249147, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks from the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.34960035597073397, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks from the playlist Brazilian Music have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.35140282784860943, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks from the playlist Brazilian Music have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Brazilian Music), MediaType.Name),Customer.Company))", "score": -0.3633112105674211, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks from the playlist Brazilian Music have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.36910169909439117, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks from the playlist Brazilian Music have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.MediaTypeId))", "score": -0.3727331832780485, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 132, "beams": [{"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8271418), Track.Composer),Track.Composer))", "score": -0.01558682875111117, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8271418), Track.Composer),Track.Bytes))", "score": -0.4970180764175893, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8271418), Track.Composer),Track.Name))", "score": -0.503523446557665, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8271418), Track.Composer),Track.Composer))", "score": -0.585834835012065, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,8271418),merge(getData(Track),getData(Artist),Album.ArtistId,Invoice.InvoiceId),Track.TrackId,Album.AlbumId), Track.Composer),Track.Composer))", "score": -0.6412426082317971, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,8271418),merge(getData(Track),getData(Artist),Album.ArtistId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.643895979598027, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>,8271418), Track.Composer),Track.Composer))", "score": -0.6463142174143286, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,8271418),merge(getData(Track),getData(Artist),Album.ArtistId,Album.AlbumId),Track.TrackId,Album.AlbumId), Track.Composer),Track.Composer))", "score": -0.6510227308759075, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,8271418),merge(getData(InvoiceLine),getData(Artist),Album.ArtistId,Invoice.InvoiceId),Track.TrackId,Album.AlbumId), Track.Composer),Track.Composer))", "score": -0.6532883053558018, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,8271418),merge(getData(Track),getData(Artist),Album.ArtistId,Album.AlbumId),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.6536761022421375, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,8271418),merge(getData(InvoiceLine),getData(Artist),Album.ArtistId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.6559416822597088, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,8271418),merge(getData(InvoiceLine),getData(Artist),Album.ArtistId,Album.AlbumId),Track.TrackId,Album.AlbumId), Track.Composer),Track.Composer))", "score": -0.6630684335375894, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,8271418),merge(getData(InvoiceLine),getData(Artist),Album.ArtistId,Album.AlbumId),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.6657217999199098, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8271418), Track.Bytes),Track.Composer))", "score": -0.694574092685798, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,8271418), Track.Composer),Track.Composer))", "score": -0.6949646013636084, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 133, "beams": [{"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Playlist),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))", "score": -0.21011019165598555, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Playlist),Track.Name,>,7045314), Playlist.Name),Playlist.Name))", "score": -0.2656503957041423, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Playlist),Track.UnitPrice,>,7045314), Playlist.Name),Playlist.Name))", "score": -0.3023363542088191, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,7045314),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3446281333123109, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))", "score": -0.346093005023455, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,7045314), Playlist.Name),Playlist.Name))", "score": -0.3920367467282489, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Playlist),Employee.Email,>,7045314), Playlist.Name),Playlist.Name))", "score": -0.39454998488508863, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Playlist),Employee.Title,>,7045314), Playlist.Name),Playlist.Name))", "score": -0.40186690206610365, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Playlist),Track.Bytes,=,7045314), Playlist.Name),Playlist.Name))", "score": -0.4150898199804942, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Playlist),Track.Composer,>,7045314), Playlist.Name),Playlist.Name))", "score": -0.41784264559828443, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Playlist),Track.Milliseconds,>,7045314), Playlist.Name),Playlist.Name))", "score": -0.4238466512688319, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,7045314), Playlist.Name),Playlist.Name))", "score": -0.4340346406612406, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Playlist),Playlist.Name,>,7045314), Playlist.Name),Playlist.Name))", "score": -0.4634854387768428, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Playlist),Track.Name,=,7045314), Playlist.Name),Playlist.Name))", "score": -0.47063002402865095, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Playlist),Track.TrackId,>,7045314), Playlist.Name),Playlist.Name))", "score": -0.47886319871031446, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 134, "beams": [{"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.08685593132916639, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.10186289718958262, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.22355848969238568, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.2418462413597962, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u2019s Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.2617278536861578, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.28838461406515703, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u2019s Music),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3017135135143555, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u2019s Music),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.3077229846237034, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Invoice.InvoiceDate,=,Maquinarama),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.30938238102747434, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.33144261071831227, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.33940918528257763, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,>,90\u2019s Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3547660183337399, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.3659551180851908, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u2019s Music),getData(InvoiceLine),Track.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.37447064316268097, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u2019s Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.38342344618896085, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 135, "beams": [{"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.03519537133171529, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.588926631440783, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.6465079656172966, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.LastName))", "score": -0.6672689389783576, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Artist.Name))", "score": -0.78417771511144, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.8051607662727527, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -0.8294171915412422, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Genre.Name))", "score": -0.8358863536891512, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Employee.LastName),Artist.Name))", "score": -0.8617820826505085, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -1.0358777397059218, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Track.Composer))", "score": -1.06988734431465, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "sum(distinct(getData(Artist), Artist.Name),Artist.Name)", "score": -1.0824601573962878, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.Fax))", "score": -1.1152844498916406, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.ArtistId),Artist.Name))", "score": -1.1230242891716473, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Genre), Artist.Name),Artist.Name))", "score": -1.127840944451362, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 136, "beams": [{"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.05910601834818378, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),Track.Bytes),Album.Title))", "score": -0.18430832958714755, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.2022046339360985, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Album.Title,!=,Protected AAC audio file),Track.Bytes),Album.Title))", "score": -0.2496237941139817, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.29311650345217366, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),Album.Title,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.30856914713249434, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,!=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.30986858786146865, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),Album.Title,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.3169676291566058, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.3440436929521831, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.AlbumId),Track.Bytes),Album.Title))", "score": -0.3613465034537258, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Employee.Email,!=,Protected AAC audio file),Track.Bytes),Album.Title))", "score": -0.38582547133612927, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),Track.MediaTypeId,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.3883627300171875, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.3883953747624905, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.39187261072566404, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),Customer.LastName,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.3933393830279076, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 137, "beams": [{"orig_question": "Do there exist no media type names of the songs in the album of the artists named Leonard Bernstein & New York Philharmonic.", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Leonard Bernstein & New York Philharmonic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.04255195064846558, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do there exist no media type names of the songs in the album of the artists named Leonard Bernstein & New York Philharmonic.", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.12081175864980621, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do there exist no media type names of the songs in the album of the artists named Leonard Bernstein & New York Philharmonic.", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Leonard Bernstein & New York Philharmonic), MediaType.Name),MediaType.Name))", "score": -0.22121453155095785, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do there exist no media type names of the songs in the album of the artists named Leonard Bernstein & New York Philharmonic.", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),merge(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.2419957875276897, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do there exist no media type names of the songs in the album of the artists named Leonard Bernstein & New York Philharmonic.", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),merge(merge(getData(Track),getData(Track),Album.AlbumId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.2964424262290416, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do there exist no media type names of the songs in the album of the artists named Leonard Bernstein & New York Philharmonic.", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Leonard Bernstein & New York Philharmonic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),Customer.Company))", "score": -0.29729074968729785, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do there exist no media type names of the songs in the album of the artists named Leonard Bernstein & New York Philharmonic.", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Leonard Bernstein & New York Philharmonic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),Album.Title))", "score": -0.2983891404094945, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do there exist no media type names of the songs in the album of the artists named Leonard Bernstein & New York Philharmonic.", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),merge(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.30467811005305123, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do there exist no media type names of the songs in the album of the artists named Leonard Bernstein & New York Philharmonic.", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.30594335757727437, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do there exist no media type names of the songs in the album of the artists named Leonard Bernstein & New York Philharmonic.", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Leonard Bernstein & New York Philharmonic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),Customer.LastName))", "score": -0.31604601560213147, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do there exist no media type names of the songs in the album of the artists named Leonard Bernstein & New York Philharmonic.", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.31686302531310073, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do there exist no media type names of the songs in the album of the artists named Leonard Bernstein & New York Philharmonic.", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),merge(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.3349891758802481, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do there exist no media type names of the songs in the album of the artists named Leonard Bernstein & New York Philharmonic.", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Leonard Bernstein & New York Philharmonic),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.34704529522998373, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do there exist no media type names of the songs in the album of the artists named Leonard Bernstein & New York Philharmonic.", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Leonard Bernstein & New York Philharmonic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.MediaTypeId))", "score": -0.34967311655155237, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do there exist no media type names of the songs in the album of the artists named Leonard Bernstein & New York Philharmonic.", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Leonard Bernstein & New York Philharmonic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), Genre.Name),MediaType.Name))", "score": -0.3561852355750053, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 138, "beams": [{"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))", "score": -0.034544187741630594, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.FirstName))", "score": -0.4769119621760183, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.State),Employee.Email))", "score": -0.4906732506624394, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.BirthDate),Employee.Email))", "score": -0.49206549595510296, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.FirstName),Employee.Email))", "score": -0.5122727818361454, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.State))", "score": -0.5310062171465688, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.LastName))", "score": -0.557447672033959, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,+1 (403) 467-3351), Employee.Email),Employee.Email))", "score": -0.5693796502000623, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.BirthDate))", "score": -0.6024240852839284, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.LastName),Employee.Email))", "score": -0.6063918537965947, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Title))", "score": -0.6520785094744497, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Title),Employee.Email))", "score": -0.6569037504068547, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Track.UnitPrice))", "score": -0.6634073854929738, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Country))", "score": -0.6637299062258535, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Country),Employee.Email))", "score": -0.7162091202608281, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 139, "beams": [{"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Quiet Songs),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.19024049296152426, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Quiet Songs),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.20357827071804932, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.24168384969492399, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.24877065536222637, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Quiet Songs),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2501065647444366, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Quiet Songs),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2624864351025973, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Quiet Songs),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.26344434250096166, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,Quiet Songs),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.26957324076989964, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Artist.Name,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2744478993830698, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Quiet Songs),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.BillingCountry))", "score": -0.2776820819649457, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Track),Artist.ArtistId,Track.AlbumId),Artist.Name,=,Quiet Songs),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2791811793412414, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.28153470505037215, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Quiet Songs),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.BillingCountry))", "score": -0.2910198634689144, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Album.ArtistId),Artist.Name,=,Quiet Songs),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2915812099160324, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Track),Artist.ArtistId,Track.AlbumId),Album.Title,=,Quiet Songs),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.29251892524449546, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 140, "beams": [{"orig_question": "What are the different unit prices for tracks with a length greater than 412000 milliseconds that are in the playlist Classical?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,=,Classical), Track.UnitPrice),Track.UnitPrice))", "score": -0.3509677239708253, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds,>,412000),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the different unit prices for tracks with a length greater than 412000 milliseconds that are in the playlist Classical?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Playlist.Name,=,Classical), Track.UnitPrice),Track.UnitPrice))", "score": -0.3843382635168382, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds,>,412000),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the different unit prices for tracks with a length greater than 412000 milliseconds that are in the playlist Classical?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))", "score": -0.3885674197161551, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds,>,412000),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the different unit prices for tracks with a length greater than 412000 milliseconds that are in the playlist Classical?", "inferred_code": "done(extractValues(distinct(getData(Playlist), Employee.Email),Track.UnitPrice))", "score": -0.40268944689420627, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds,>,412000),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the different unit prices for tracks with a length greater than 412000 milliseconds that are in the playlist Classical?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))", "score": -0.4091577216877835, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds,>,412000),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the different unit prices for tracks with a length greater than 412000 milliseconds that are in the playlist Classical?", "inferred_code": "done(extractValues(distinct(getData(Playlist), Playlist.Name),Track.UnitPrice))", "score": -0.43857650122968483, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds,>,412000),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the different unit prices for tracks with a length greater than 412000 milliseconds that are in the playlist Classical?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.4469996423504219, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds,>,412000),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the different unit prices for tracks with a length greater than 412000 milliseconds that are in the playlist Classical?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Playlist.Name,=,Classical), Track.UnitPrice),Track.UnitPrice))", "score": -0.4480669685653993, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds,>,412000),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the different unit prices for tracks with a length greater than 412000 milliseconds that are in the playlist Classical?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.4675899443220503, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds,>,412000),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the different unit prices for tracks with a length greater than 412000 milliseconds that are in the playlist Classical?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))", "score": -0.4692293030400257, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds,>,412000),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the different unit prices for tracks with a length greater than 412000 milliseconds that are in the playlist Classical?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))", "score": -0.4898195385595282, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds,>,412000),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the different unit prices for tracks with a length greater than 412000 milliseconds that are in the playlist Classical?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,Track.GenreId), Track.UnitPrice),Track.UnitPrice))", "score": -0.49402995605665245, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds,>,412000),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the different unit prices for tracks with a length greater than 412000 milliseconds that are in the playlist Classical?", "inferred_code": "done(extractValues(distinct(getData(Employee), Employee.Email),Track.UnitPrice))", "score": -0.522267067885611, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds,>,412000),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the different unit prices for tracks with a length greater than 412000 milliseconds that are in the playlist Classical?", "inferred_code": "done(extractValues(distinct(getData(Playlist), Track.UnitPrice),Track.UnitPrice))", "score": -0.5518484555251094, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds,>,412000),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the different unit prices for tracks with a length greater than 412000 milliseconds that are in the playlist Classical?", "inferred_code": "done(extractValues(distinct(getData(Employee), Playlist.Name),Track.UnitPrice))", "score": -0.5581541222210895, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds,>,412000),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 141, "beams": [{"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))", "score": -0.054746257063015946, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Country))", "score": -0.3207607082240429, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Country),Customer.Phone))", "score": -0.4005348681621399, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Fax))", "score": -0.4797146133296337, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Address),Customer.Phone))", "score": -0.534250140111908, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Telus), Customer.Phone),Customer.Phone))", "score": -0.5372466770149913, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,Telus), Customer.Phone),Customer.Phone))", "score": -0.5766521719433513, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Telus), Customer.Phone),Customer.Phone))", "score": -0.577818277213737, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Company))", "score": -0.5949295870177593, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.PostalCode),Customer.Phone))", "score": -0.5974783896617737, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Invoice.CustomerId))", "score": -0.5977848879210796, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Employee.Phone))", "score": -0.611091267239317, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Fax),Customer.Phone))", "score": -0.6133416890315857, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.PostalCode))", "score": -0.6168899051062908, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Company),Customer.Phone))", "score": -0.6170743703059998, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 142, "beams": [{"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Playlist),Track.Composer,>,9640349), Playlist.Name),Playlist.Name))", "score": -0.24396630466799252, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Playlist),Track.UnitPrice,>,9640349), Playlist.Name),Playlist.Name))", "score": -0.2455808752856683, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Playlist),Employee.Title,>,9640349), Playlist.Name),Playlist.Name))", "score": -0.2759220981679391, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Playlist),Invoice.InvoiceDate,>,9640349), Playlist.Name),Playlist.Name))", "score": -0.29558547676424496, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Playlist),Track.TrackId,>,9640349), Playlist.Name),Playlist.Name))", "score": -0.3003880763135385, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>,9640349), Playlist.Name),Playlist.Name))", "score": -0.3014025211482944, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Playlist),Track.Bytes,>,9640349), Playlist.Name),Playlist.Name))", "score": -0.3703453922353219, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,>,9640349), Playlist.Name),Playlist.Name))", "score": -0.4175616191864729, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Playlist),Track.Composer,!=,9640349), Playlist.Name),Playlist.Name))", "score": -0.41908562273602, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Playlist),Track.UnitPrice,!=,9640349), Playlist.Name),Playlist.Name))", "score": -0.4207001933536958, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,9640349), Playlist.Name),Playlist.Name))", "score": -0.4290581459740085, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Playlist),Employee.Title,!=,9640349), Playlist.Name),Playlist.Name))", "score": -0.4510414162359666, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Playlist),Invoice.InvoiceDate,!=,9640349), Playlist.Name),Playlist.Name))", "score": -0.47070479483227246, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Playlist),Track.TrackId,!=,9640349), Playlist.Name),Playlist.Name))", "score": -0.475507394381566, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Playlist),Playlist.Name,>,9640349), Playlist.Name),Playlist.Name))", "score": -0.5045337462506723, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 143, "beams": [{"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.1846111678552846, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Album.Title,=,Protected MPEG-4 video file),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.201032184463312, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Genre.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.24662440492872723, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Protected MPEG-4 video file),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.2519603893802511, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Protected MPEG-4 video file),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.2557826793986476, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Artist),Album.ArtistId,Album.AlbumId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.2713539373151839, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2913776042280682, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Genre),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.2948400285519892, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Genre.Name,=,Protected MPEG-4 video file),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.31779591647209027, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.3196773374176832, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.3328738918235762, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Protected MPEG-4 video file),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.34020781803495154, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Album.Title,=,Protected MPEG-4 video file),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.34146846138809206, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.3478794346669179, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Album.Title,=,Protected MPEG-4 video file),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.35551445610529553, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 144, "beams": [{"orig_question": "Whats the different postal codes we have sent a higher invoice than 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.25060130139172543, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Whats the different postal codes we have sent a higher invoice than 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2628319360810565, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Whats the different postal codes we have sent a higher invoice than 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,>,10.91), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.2951167919236468, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Whats the different postal codes we have sent a higher invoice than 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.30734742661297787, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Whats the different postal codes we have sent a higher invoice than 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.47127407272637356, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Whats the different postal codes we have sent a higher invoice than 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5098360427218722, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Whats the different postal codes we have sent a higher invoice than 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,>,10.91), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.515789563258295, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Whats the different postal codes we have sent a higher invoice than 10.91?", "inferred_code": "count(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5255160264932783, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Whats the different postal codes we have sent a higher invoice than 10.91?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>,10.91), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.5255833431502758, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Whats the different postal codes we have sent a higher invoice than 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,>,10.91), Invoice.BillingPostalCode),Artist.Name))", "score": -0.5417813011008548, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Whats the different postal codes we have sent a higher invoice than 10.91?", "inferred_code": "count(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5427860029303702, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Whats the different postal codes we have sent a higher invoice than 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Artist.Name))", "score": -0.5540119357901858, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Whats the different postal codes we have sent a higher invoice than 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,>,10.91), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.5543515332537936, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Whats the different postal codes we have sent a higher invoice than 10.91?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.5712866533107224, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Whats the different postal codes we have sent a higher invoice than 10.91?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.Quantity,>,10.91), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.571563193118921, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 145, "beams": [{"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Email),Customer.Email))", "score": -0.153495832133558, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Email),Customer.Email))", "score": -0.19997291897561809, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.3779838684642957, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Email),Album.Title))", "score": -0.4320120762768056, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), MediaType.Name),Customer.Email))", "score": -0.4554924133899476, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Album.Title),Customer.Email))", "score": -0.4578219417217042, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Email),Album.Title))", "score": -0.4784891631188657, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), MediaType.Name),Customer.Email))", "score": -0.5019695002320077, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Album.Title),Customer.Email))", "score": -0.5042990285637643, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Email),MediaType.Name))", "score": -0.5569718133392598, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,None), Customer.Email),Customer.Email))", "score": -0.5599005136373307, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,None), Customer.Email),Customer.Email))", "score": -0.5619744572522904, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Email),MediaType.Name))", "score": -0.6034489001813199, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.LastName),Customer.Email))", "score": -0.6059531334522035, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.LastName),Customer.Email))", "score": -0.6524302202942636, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 146, "beams": [{"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,Milton Nascimento, Caetano Veloso), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.14549648323297576, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,14234427), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2709673211223886, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(filter(getData(Track),Track.Composer,>,Milton Nascimento, Caetano Veloso),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,Milton Nascimento, Caetano Veloso), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2851623478352194, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)", "score": -0.3083379600206045, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,Milton Nascimento, Caetano Veloso),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.30887168954069477, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,14234427), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.31177833483751827, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,>,Milton Nascimento, Caetano Veloso), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.31627095083301704, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(filter(getData(Track),Track.Composer,!=,Milton Nascimento, Caetano Veloso),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,Milton Nascimento, Caetano Veloso), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.31672111769595246, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,!=,Milton Nascimento, Caetano Veloso), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.32078900407073263, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Milton Nascimento, Caetano Veloso), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.335875018396933, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.33981923706509276, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(filter(getData(Track),Track.Composer,=,Milton Nascimento, Caetano Veloso),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,Milton Nascimento, Caetano Veloso), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.34303125421856123, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(filter(getData(Genre),Track.Composer,>,Milton Nascimento, Caetano Veloso),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,Milton Nascimento, Caetano Veloso), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.36340208970234994, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(filter(getData(Track),Track.Name,>,14234427),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,Milton Nascimento, Caetano Veloso), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3743272084073517, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(filter(getData(Track),Track.Composer,>,Milton Nascimento, Caetano Veloso),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,Milton Nascimento, Caetano Veloso), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4127416252284236, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 147, "beams": [{"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))", "score": -0.05571205864559338, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.PostalCode))", "score": -0.5548789122700457, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.FirstName))", "score": -0.5817239023456804, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Fax))", "score": -0.59215919100709, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.LastName))", "score": -0.6363631278838686, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Artist.ArtistId))", "score": -0.6786276014423617, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.LastName))", "score": -0.6788447882461144, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Album.Title))", "score": -0.7220159471090035, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Employee.LastName))", "score": -0.7564860145460403, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.LastName))", "score": -0.7732539777870006, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Company))", "score": -0.7866068345481803, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Phone))", "score": -0.8333237455164548, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Email))", "score": -0.8691331178023447, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.LastName))", "score": -0.8775534974645905, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Genre.GenreId))", "score": -0.889473973018721, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 148, "beams": [{"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,cole porter), Track.Bytes),Track.Bytes))", "score": -0.06115222263724718, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))", "score": -0.31690120983512315, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,cole porter), Track.Bytes),Track.Bytes))", "score": -0.3829863109403959, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,cole porter), Track.Bytes),Track.Bytes))", "score": -0.41738301802070055, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,cole porter), Track.UnitPrice),Track.Bytes))", "score": -0.45062577731550846, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,cole porter), Track.Bytes),Track.Bytes))", "score": -0.46461570549399767, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,cole porter), Track.Composer),Track.Bytes))", "score": -0.48035013682783756, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,cole porter), Track.Milliseconds),Track.Bytes))", "score": -0.5252180696243158, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Playlist.Name,=,cole porter), Track.Bytes),Track.Bytes))", "score": -0.5975458352604619, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,cole porter), Track.Name),Track.Bytes))", "score": -0.6043947637790552, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>=,cole porter), Track.Bytes),Track.Bytes))", "score": -0.6387352981382719, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,cole porter), Track.Bytes),Track.UnitPrice))", "score": -0.6689111970608792, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,cole porter), Track.Bytes),Track.Bytes))", "score": -0.6761744468262805, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,cole porter), Track.Bytes),Track.Bytes))", "score": -0.6901535131746641, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.UnitPrice),Track.Bytes))", "score": -0.7063747645133844, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 149, "beams": [{"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))", "score": -0.44394481417572124, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.Company))", "score": -0.4664912396171055, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Company))", "score": -0.5057978633016388, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.PostalCode))", "score": -0.5787780469749685, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Company))", "score": -0.5844051700464864, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.Company))", "score": -0.5901114849940142, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.PostalCode))", "score": -0.6013244724163528, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Joakim), Customer.Company),Customer.Company))", "score": -0.6331443628714624, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Company))", "score": -0.6351721262464655, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.PostalCode))", "score": -0.6406310961008861, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Joakim), Customer.LastName),Customer.Company))", "score": -0.685983403627688, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Address),Customer.Company))", "score": -0.6938935980120473, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.LastName))", "score": -0.7176762160390541, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.PostalCode))", "score": -0.7192384028457337, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.Company))", "score": -0.7196409344113804, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 150, "beams": [{"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.11099932106427703, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.1815027590711311, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.18532166414314913, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCountry,=,Norway), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.21204626079798286, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.2896665060171503, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCountry,=,Norway), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3017865034951166, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCountry,=,Norway), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3125221040287739, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCountry,=,Norway), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.317658088186627, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Customer.Email),Track.Milliseconds)", "score": -0.35772458991782013, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3601699440240044, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.Company,=,Norway), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3622248919824268, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3639888490960224, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Norway), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3686002835648581, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Norway), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.36864988289793116, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Milliseconds)", "score": -0.37383303914944305, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 151, "beams": [{"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))", "score": -0.13030552271916856, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))", "score": -0.25866739477829487, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))", "score": -0.7110808986962394, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Fax))", "score": -0.8076018936368895, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.Fax))", "score": -0.8115699937796986, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.PostalCode))", "score": -0.8473230288169731, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Company))", "score": -0.8813530558633521, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Fax))", "score": -0.8935075047094541, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.Fax))", "score": -0.8981766379826975, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Phone))", "score": -0.9165058411508387, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.Fax))", "score": -0.9538460886144264, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.PostalCode))", "score": -0.9816643402160603, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Company))", "score": -1.0142356183678263, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.Fax))", "score": -1.0213116863303666, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Country))", "score": -1.023071639890971, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 152, "beams": [{"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.10212568056788622, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,=,CA),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.17690918815338305, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.19674365787894968, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA), MediaType.Name),MediaType.Name))", "score": -0.20062103581681207, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Customer.State,=,CA),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.22404791050928463, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.23088424105152971, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,CA),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.23866834453948682, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,=,CA), MediaType.Name),MediaType.Name))", "score": -0.24567211721643215, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),InvoiceLine.UnitPrice,=,CA),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2476956589700586, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2593476761640524, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,=,CA),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2715271654644465, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Customer.State,=,CA),merge(getData(InvoiceLine),getData(MediaType),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.30121956860430005, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,CA),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.30261013288095867, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,CA), MediaType.Name),MediaType.Name))", "score": -0.303111700033398, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,=,CA), MediaType.Name),MediaType.Name))", "score": -0.312410801561785, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 153, "beams": [{"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.4109405807738329, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.Name))", "score": -0.4186205681507536, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Tucson), MediaType.Name),Track.Name))", "score": -0.4300783714893639, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.UnitPrice))", "score": -0.4408629009838876, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Tucson), MediaType.Name),Track.Name))", "score": -0.44469851700470736, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Tucson), MediaType.Name),Track.Name))", "score": -0.45015233828956147, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),Playlist.PlaylistId,Track.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.459671430963353, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(MediaType),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Tucson), MediaType.Name),Track.Name))", "score": -0.46701016383532357, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),Playlist.PlaylistId,Track.MediaTypeId), MediaType.Name),Track.Name))", "score": -0.46735141834027377, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Tucson), MediaType.Name),Track.Name))", "score": -0.47160888150208624, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.4717143946899113, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,PlaylistTrack.PlaylistId),MediaType.Name,=,Tucson), MediaType.Name),Track.Name))", "score": -0.4944410625600141, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Tucson), MediaType.Name),Track.UnitPrice))", "score": -0.499307076911488, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Tucson), Track.UnitPrice),Track.Name))", "score": -0.5004267568610333, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Tucson), MediaType.Name),MediaType.Name))", "score": -0.5034172731015956, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 154, "beams": [{"orig_question": "What postal codes in Argentina did we send invoices to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.09591208207189084, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal codes in Argentina did we send invoices to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.20042995917378903, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal codes in Argentina did we send invoices to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.3269905801373625, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal codes in Argentina did we send invoices to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Argentina), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.4315084572392607, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal codes in Argentina did we send invoices to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.47058808053611756, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal codes in Argentina did we send invoices to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.492382978971591, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal codes in Argentina did we send invoices to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Artist.Name))", "score": -0.5727417822438383, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal codes in Argentina did we send invoices to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5751059576380158, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal codes in Argentina did we send invoices to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Genre.Name))", "score": -0.5885041113454008, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal codes in Argentina did we send invoices to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Argentina), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.5969008560734892, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal codes in Argentina did we send invoices to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingAddress),Invoice.BillingPostalCode))", "score": -0.6225466322596276, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal codes in Argentina did we send invoices to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingAddress))", "score": -0.6343111749249601, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal codes in Argentina did we send invoices to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6375818177568817, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal codes in Argentina did we send invoices to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6540818139421845, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal codes in Argentina did we send invoices to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6608226224291229, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 155, "beams": [{"orig_question": "What are the email addresses of all customers that work at Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Telus), Customer.Email),Customer.Email))", "score": -0.1617748345597647, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of all customers that work at Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Email),Customer.Email))", "score": -0.21024485485395417, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of all customers that work at Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Telus), Customer.Email),Customer.Email))", "score": -0.2572982515557669, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of all customers that work at Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),InvoiceLine.Quantity,=,Telus), Customer.Email),Customer.Email))", "score": -0.35707898990949616, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of all customers that work at Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,Telus), Customer.Email),Customer.Email))", "score": -0.39865221636136994, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of all customers that work at Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,Telus), Customer.Email),Customer.Email))", "score": -0.4461032356484793, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of all customers that work at Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Telus), Customer.Email),Customer.Email))", "score": -0.4654092396958731, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of all customers that work at Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Telus), Customer.Email),Customer.Email))", "score": -0.48521163122495636, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of all customers that work at Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Telus), Customer.Email),Customer.Email))", "score": -0.5027181710465811, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of all customers that work at Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.Total,=,Telus), Customer.Email),Customer.Email))", "score": -0.5542237962945364, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of all customers that work at Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),InvoiceLine.InvoiceLineId,=,Telus), Customer.Email),Customer.Email))", "score": -0.5618300642236136, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of all customers that work at Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingAddress,=,Telus), Customer.Email),Customer.Email))", "score": -0.5619436110719107, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of all customers that work at Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),InvoiceLine.UnitPrice,=,Telus), Customer.Email),Customer.Email))", "score": -0.5757718970417045, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of all customers that work at Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Telus), Customer.Email),InvoiceLine.UnitPrice))", "score": -0.6282571115880273, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of all customers that work at Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Telus), Customer.Email),Customer.Email))", "score": -0.668665676319506, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 156, "beams": [{"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Jailbait), Track.Composer),Track.Composer))", "score": -0.18387826678826968, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Jailbait), Invoice.BillingCity),Track.Composer))", "score": -0.33651158360316913, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Artist.Name,=,Jailbait), Track.Composer),Track.Composer))", "score": -0.383426872617747, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,Jailbait), Track.Composer),Track.Composer))", "score": -0.3918865412242667, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Jailbait), Track.Composer),InvoiceLine.Quantity))", "score": -0.4109688658036248, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Composer,=,Jailbait), Track.Composer),Track.Composer))", "score": -0.45586166677549045, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(InvoiceLine),Track.Composer,=,Jailbait), Track.Composer),Track.Composer))", "score": -0.46593392787053745, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Track.Composer,=,Jailbait), Track.Composer),Track.Composer))", "score": -0.5075772791869895, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Track.Composer,=,Jailbait), Track.Composer),Track.Composer))", "score": -0.5119793504245536, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Artist.Name,=,Jailbait), Invoice.BillingCity),Track.Composer))", "score": -0.5360601894326464, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,Jailbait), Invoice.BillingCity),Track.Composer))", "score": -0.5445198580391661, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.BillingCity,=,Jailbait), Track.Composer),Track.Composer))", "score": -0.5522014625139491, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Jailbait), Employee.City),Track.Composer))", "score": -0.5605575009949462, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Jailbait), InvoiceLine.Quantity),Track.Composer))", "score": -0.5607732735343234, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Jailbait), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.5636021826185242, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 157, "beams": [{"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith), Track.TrackId),Track.UnitPrice)", "score": -0.09411592195565864, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.186640546267479, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Aerosmith), Track.TrackId),Track.UnitPrice)", "score": -0.2030917307704363, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.TrackId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.2510503815772108, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.2871000158402399, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.TrackId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.35150985114997174, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.36115517798193575, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.TrackId),Artist.Name,!=,Aerosmith), Track.TrackId),Track.UnitPrice)", "score": -0.37221641380683296, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Composer,!=,Aerosmith), Track.TrackId),Track.UnitPrice)", "score": -0.3726363357246288, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith), Track.TrackId),Track.UnitPrice)", "score": -0.37620488650346096, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,Aerosmith), Track.TrackId),Track.UnitPrice)", "score": -0.3865779068567331, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Aerosmith),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.3939363623077604, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(filter(getData(Track),Artist.Name,!=,Aerosmith), Track.TrackId),Track.UnitPrice)", "score": -0.42379477085509637, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.48176309672135936, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5139958431423423, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 158, "beams": [{"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.05690072815741587, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.28719899769748736, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4743775626357092, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5414602529617696, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingAddress))", "score": -0.5825991780857294, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.5872640760044305, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.6057930739025323, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6192238383355289, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6212780528130679, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "count(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6262527060171124, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingAddress),Invoice.BillingPostalCode))", "score": -0.6564538368384092, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Genre.Name))", "score": -0.6926986129383295, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.7026871921207203, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.7121229061285703, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.7673847131791263, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 159, "beams": [{"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.056023714557461024, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.1387244303264979, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.1686208148883768, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Genre),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.18501738699116804, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.20512682536725615, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.20728151169146394, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.21382276038044826, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.31006831109521565, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),Track.GenreId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.3323324357955115, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.33621158715314403, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.3443002187464555, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Genre),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.35424730584250874, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.3765114305428046, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.4092769348332231, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.GenreId))", "score": -0.41869104131930823, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 160, "beams": [{"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Track),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Title,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.3103381207104861, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Track),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Employee.Title,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.32155272147862857, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Track),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Title,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.3239967592922754, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Track),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.32520040593154753, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Track),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,InvoiceLine.InvoiceId),Employee.Title,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.33337872882356073, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Title,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.3346199730777843, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Track),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Employee.Title,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.3352113600604179, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Track),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Employee.FirstName,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.33641500669969004, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Track),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId),Employee.Title,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.33712231775512913, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Track),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.3388590445133368, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.3405818441506739, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Track),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.Title,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.3448660471259392, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Employee.Title,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.3458345672067757, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Track),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,InvoiceLine.InvoiceId),Employee.Title,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.3470373607661989, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Title,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.3473753345475467, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 161, "beams": [{"orig_question": "Which playlists contain tracks shorter than or as long as 2907615 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615), Playlist.Name),Playlist.Name))", "score": -0.05860527603193045, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks shorter than or as long as 2907615 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,2907615), Playlist.Name),Playlist.Name))", "score": -0.18025679401022413, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks shorter than or as long as 2907615 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,<=,2907615),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.27584059049448495, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks shorter than or as long as 2907615 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,<=,2907615), Playlist.Name),Playlist.Name))", "score": -0.27851812371850426, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks shorter than or as long as 2907615 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,2907615), Playlist.Name),Playlist.Name))", "score": -0.30119836959365487, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks shorter than or as long as 2907615 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,2907615), Playlist.Name),Playlist.Name))", "score": -0.33106760988321227, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks shorter than or as long as 2907615 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615), Playlist.Name),Playlist.Name))", "score": -0.34563645037931684, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks shorter than or as long as 2907615 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,2907615),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3499260987061459, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks shorter than or as long as 2907615 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615), Playlist.Name),Employee.FirstName))", "score": -0.4086540691994233, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks shorter than or as long as 2907615 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,2907615),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.4109563015230167, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks shorter than or as long as 2907615 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.Name),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615), Playlist.Name),Playlist.Name))", "score": -0.4169012320471117, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks shorter than or as long as 2907615 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Playlist),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615), Playlist.Name),Playlist.Name))", "score": -0.42139218999970984, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks shorter than or as long as 2907615 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,null,2907615), Playlist.Name),Playlist.Name))", "score": -0.4304691078023165, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks shorter than or as long as 2907615 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,2907615), Playlist.Name),Playlist.Name))", "score": -0.4382212390681904, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks shorter than or as long as 2907615 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,2907615), Playlist.Name),Playlist.Name))", "score": -0.4497849478284479, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 162, "beams": [{"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.016672086246881365, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.6952523249151955, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Album.Title)", "score": -0.8678517058672341, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -1.053585476618844, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Track.Bytes))", "score": -1.0850847554228098, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.AlbumId))", "score": -1.1447755160144581, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Track.Bytes)", "score": -1.2096323961391149, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Album.Title),Album.Title))", "score": -1.2830352780585843, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Track.Name))", "score": -1.318002697228891, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -1.3203096359077027, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Track), Album.Title),Album.Title)", "score": -1.3372981316706494, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Artist.ArtistId))", "score": -1.3504460052562837, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Employee.LastName))", "score": -1.3520778019686797, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Artist), Album.Title),Album.Title)", "score": -1.3568626631199556, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.AlbumId),Album.Title))", "score": -1.436488376774587, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 163, "beams": [{"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))", "score": -0.018348393623455195, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Employee.Email))", "score": -0.5282296977347869, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))", "score": -0.5306694131686527, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))", "score": -0.6151768785312015, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))", "score": -0.6220162134959537, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))", "score": -0.6278419118716556, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))", "score": -0.6474030834033329, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))", "score": -0.6628771048381168, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.State),Customer.Email))", "score": -0.664430770684703, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))", "score": -0.6834813951973047, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),InvoiceLine.UnitPrice))", "score": -0.686891897708847, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Album.Title))", "score": -0.7115222654647368, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Employee.Email),Customer.Email))", "score": -0.7415566776289779, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.LastName),Customer.Email))", "score": -0.7458942268385726, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))", "score": -0.7461936693980533, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 164, "beams": [{"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.08144295858791066, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.21032627979488988, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.22536284540446583, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Playlist.Name))", "score": -0.22806526391511628, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.24918732495120097, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.25886678974974386, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Customer.State))", "score": -0.2894308783139805, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), MediaType.Name),Invoice.BillingState))", "score": -0.29094045796821, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.2933196240508586, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.29778074218827116, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(PlaylistTrack),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.30818240455229146, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),MediaType.Name))", "score": -0.32308407782172555, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Playlist.Name))", "score": -0.32749933709929463, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Employee.State))", "score": -0.334786775652552, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.3397804790328072, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 165, "beams": [{"orig_question": "What is the last name of the employee at 590 Columbia Boulevard West?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))", "score": -0.033152988649817416, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee at 590 Columbia Boulevard West?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))", "score": -0.3803744898214063, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee at 590 Columbia Boulevard West?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.FirstName),Employee.LastName))", "score": -0.4573055557011685, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee at 590 Columbia Boulevard West?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))", "score": -0.48836696008584113, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee at 590 Columbia Boulevard West?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.Email),Employee.LastName))", "score": -0.518675600647839, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee at 590 Columbia Boulevard West?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.Email))", "score": -0.5301664248145244, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee at 590 Columbia Boulevard West?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Milliseconds,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))", "score": -0.5892997370137891, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee at 590 Columbia Boulevard West?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.FirstName))", "score": -0.5907534137404582, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee at 590 Columbia Boulevard West?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))", "score": -0.6074578152074537, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee at 590 Columbia Boulevard West?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingAddress,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))", "score": -0.6282671080007276, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee at 590 Columbia Boulevard West?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.Total,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))", "score": -0.6905563459768018, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee at 590 Columbia Boulevard West?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.Title),Employee.LastName))", "score": -0.7166551402806363, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee at 590 Columbia Boulevard West?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.Fax),Employee.LastName))", "score": -0.7193532041310391, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee at 590 Columbia Boulevard West?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))", "score": -0.7198877916707715, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee at 590 Columbia Boulevard West?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.City),Employee.LastName))", "score": -0.7306736526115856, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 166, "beams": [{"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Scorpions),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.08600983189288354, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Artist.Name,=,Scorpions),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2549738719120214, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Album.Title,=,Scorpions),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2690373800870126, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Scorpions),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2930174467918359, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Genre.Name,=,Scorpions),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.29934022091653545, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Scorpions),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3110962526860858, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Scorpions),merge(getData(Album),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3138850432599884, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Scorpions),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.31599450674435486, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Scorpions),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Album.AlbumId), Genre.Name),Genre.Name))", "score": -0.3339428892661212, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Genre.Name,=,Scorpions),getData(Track),Artist.ArtistId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3443240217910567, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Genre.Name,=,Scorpions),getData(Track),Album.AlbumId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.34884000194556736, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Genre.GenreId,Track.GenreId),Artist.Name,=,Scorpions),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.35565582318869726, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Album),Genre.GenreId,Track.GenreId),Genre.Name,=,Scorpions),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3619216893902808, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Artist.Name,=,Scorpions),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3663688256193081, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Genre.Name,=,Scorpions),getData(Album),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.37063077744095, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 167, "beams": [{"orig_question": "how old are you?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)", "score": -0.16774285380952825, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NT), Invoice.Total),Invoice.Total))"}, {"orig_question": "how old are you?", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),Track.Milliseconds)", "score": -0.4572520654683299, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NT), Invoice.Total),Invoice.Total))"}, {"orig_question": "how old are you?", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),Track.Bytes)", "score": -0.6062463354600729, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NT), Invoice.Total),Invoice.Total))"}, {"orig_question": "how old are you?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,NT), Track.Bytes),Track.Bytes))", "score": -0.772558656262845, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NT), Invoice.Total),Invoice.Total))"}, {"orig_question": "how old are you?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)", "score": -0.8367300617803106, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NT), Invoice.Total),Invoice.Total))"}, {"orig_question": "how old are you?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Name,=,NT), Track.TrackId),Track.Bytes)", "score": -0.8818734071820854, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NT), Invoice.Total),Invoice.Total))"}, {"orig_question": "how old are you?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,NT), Track.Bytes),Track.UnitPrice))", "score": -0.8949126868719759, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NT), Invoice.Total),Invoice.Total))"}, {"orig_question": "how old are you?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,NT), Track.Bytes),Track.Bytes))", "score": -0.8963891493331175, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NT), Invoice.Total),Invoice.Total))"}, {"orig_question": "how old are you?", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)", "score": -0.9169031167746927, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NT), Invoice.Total),Invoice.Total))"}, {"orig_question": "how old are you?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,NT), Track.Bytes),Track.Name))", "score": -0.9266139089340868, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NT), Invoice.Total),Invoice.Total))"}, {"orig_question": "how old are you?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)", "score": -0.9309672909112653, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NT), Invoice.Total),Invoice.Total))"}, {"orig_question": "how old are you?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,NT), Track.UnitPrice),Track.Bytes))", "score": -0.9391250728840532, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NT), Invoice.Total),Invoice.Total))"}, {"orig_question": "how old are you?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,NT), Track.Bytes),Employee.Email))", "score": -0.9395755349869432, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NT), Invoice.Total),Invoice.Total))"}, {"orig_question": "how old are you?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,NT), Employee.Email),Track.Bytes))", "score": -0.9899415194267931, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NT), Invoice.Total),Invoice.Total))"}, {"orig_question": "how old are you?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,NT), Track.UnitPrice),Track.Bytes))", "score": -0.9979236351500731, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NT), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 168, "beams": [{"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))", "score": -0.0261542012094651, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.LastName),Employee.Email))", "score": -0.4864896440058146, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.LastName))", "score": -0.5120140069275294, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Margaret), Employee.Email),Employee.Email))", "score": -0.5387875295355116, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.BirthDate),Employee.Email))", "score": -0.5465198659449015, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Track.Bytes))", "score": -0.560114985063592, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Track.Bytes),Employee.Email))", "score": -0.6206407451181803, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.FirstName),Employee.Email))", "score": -0.6352745794802104, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Track.UnitPrice))", "score": -0.6423848920612727, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.FirstName,=,Margaret), Employee.Email),Employee.Email))", "score": -0.6637628532125746, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Title),Employee.Email))", "score": -0.6664078139810954, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.FirstName))", "score": -0.6755765729694758, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Customer.Email),Employee.Email))", "score": -0.6799714469461833, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.City),Employee.Email))", "score": -0.6825785541086589, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.State),Employee.Email))", "score": -0.7018483185320292, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 169, "beams": [{"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Milliseconds),Track.Milliseconds))", "score": -0.1520812009985093, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Milliseconds),Track.Bytes))", "score": -0.3086705898458604, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Milliseconds),InvoiceLine.Quantity))", "score": -0.387600625079358, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Milliseconds),Track.Composer))", "score": -0.41531913928338327, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Bytes),Track.Milliseconds))", "score": -0.49052162855514325, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Milliseconds))", "score": -0.5073686429823283, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), InvoiceLine.Quantity),Track.Milliseconds))", "score": -0.5442191848123912, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,0.99), Track.Milliseconds),Track.Milliseconds))", "score": -0.5885693478921894, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,=,0.99), Track.Milliseconds),InvoiceLine.Quantity))", "score": -0.595464037314417, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.Milliseconds,=,0.99), Track.Milliseconds),InvoiceLine.Quantity))", "score": -0.5964256312553388, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.Milliseconds,=,0.99), Track.Milliseconds),InvoiceLine.Quantity))", "score": -0.604356152007283, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,=,0.99), Track.Milliseconds),InvoiceLine.Quantity))", "score": -0.6053041029413555, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,=,0.99), Track.Milliseconds),InvoiceLine.Quantity))", "score": -0.6065957702867907, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,=,0.99), Track.Milliseconds),InvoiceLine.Quantity))", "score": -0.6145262456297821, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.Milliseconds,=,0.99), Track.Milliseconds),InvoiceLine.Quantity))", "score": -0.6179959425992694, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 170, "beams": [{"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Blackened), Invoice.InvoiceId),Invoice.Total)", "score": -0.18902329187924732, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Blackened), Invoice.InvoiceId),Invoice.Total)", "score": -0.18963137660062063, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.GenreId),Genre.Name,=,Blackened),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2503475756483524, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Blackened), Invoice.InvoiceId),Invoice.Total)", "score": -0.2569307422434725, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Blackened), Invoice.InvoiceId),Invoice.Total)", "score": -0.2774885436293708, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Blackened), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2776046978896684, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Blackened), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2782127826110417, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.GenreId),Genre.Name,=,Blackened),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28035306805253857, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)", "score": -0.2907358158600596, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Blackened), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.29974322582134083, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)", "score": -0.3075268245847008, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Album.Title,=,Blackened),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.316268864007019, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.GenreId),Track.Name,=,Blackened),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.31954900805122655, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Blackened), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3203010272072391, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)", "score": -0.3280846259705991, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 171, "beams": [{"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))", "score": -0.059975004483931116, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,260154), Track.UnitPrice),Track.UnitPrice))", "score": -0.1784510376946855, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,260154), Track.UnitPrice),Track.UnitPrice))", "score": -0.3423864158885408, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,260154), Track.UnitPrice),Track.UnitPrice))", "score": -0.48138823239969497, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,260154), Track.UnitPrice),Track.UnitPrice))", "score": -0.49995388715433364, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,null,260154), Track.UnitPrice),Track.UnitPrice))", "score": -0.6958972427146364, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,260154), Track.UnitPrice),Track.UnitPrice))", "score": -0.6977202507750917, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,260154),merge(getData(InvoiceLine),getData(Playlist),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.7427483829905973, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,260154),merge(getData(InvoiceLine),getData(Playlist),InvoiceLine.InvoiceId,PlaylistTrack.TrackId),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.7679296629860561, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))", "score": -0.7736101044471102, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,260154),merge(getData(InvoiceLine),getData(Playlist),Track.TrackId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.7832814353151822, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,260154),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.8046364246043143, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,260154),merge(getData(InvoiceLine),getData(Playlist),Track.TrackId,PlaylistTrack.TrackId),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.8084627280472985, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.8655003248913999, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,260154), Track.UnitPrice),Track.UnitPrice))", "score": -0.904432383735184, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 172, "beams": [{"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))", "score": -0.029448511020746082, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Invoice.BillingCity),Customer.City))", "score": -0.4479724680422805, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.Fax),Customer.City))", "score": -0.44974898447981104, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.Company),Customer.City))", "score": -0.4985142861842178, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.State,!=,FL), Customer.City),Customer.City))", "score": -0.5024256142205559, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.State,!=,FL), Customer.City),Customer.City))", "score": -0.5305198355927132, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Employee.City),Customer.City))", "score": -0.5796963190077804, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),InvoiceLine.UnitPrice,!=,FL), Customer.City),Customer.City))", "score": -0.5873541756882332, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Album.Title),Customer.City))", "score": -0.6244190548895858, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,!=,FL), Customer.City),Customer.City))", "score": -0.6526644750847481, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.Fax))", "score": -0.6695494488230906, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.Company))", "score": -0.6884156898013316, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,!=,FL), Customer.City),Customer.City))", "score": -0.712294164521154, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,FL), Customer.City),Customer.City))", "score": -0.7174886986031197, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Album.Title))", "score": -0.7182387546054088, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 173, "beams": [{"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.14799877726777091, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.18301291666915967, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Genre.Name))", "score": -0.22643445349127858, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2695032227782654, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2777008025414252, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Genre.Name))", "score": -0.2799393080233647, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Invoice),Track.GenreId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.28593695953405995, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.29755438518813687, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,=,LOST, Season 4),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3032829795920191, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3082165014262443, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Genre.GenreId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.32105554914388534, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Genre.Name),Invoice.BillingAddress))", "score": -0.3258107202019288, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.32695162655527676, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,=,LOST, Season 4),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.33829711899340786, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,LOST, Season 4),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3398968549595225, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 174, "beams": [{"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.Name),Track.Name))", "score": -0.12793684817141987, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.Name),Track.Name))", "score": -0.14147396960424002, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.Name),Track.Name))", "score": -0.20289199700989277, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.2624087173117687, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.Name),Track.Name))", "score": -0.2716792158241227, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.2833729369842544, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Track.AlbumId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.Name),Track.Name))", "score": -0.28455068963415114, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.28867299861443113, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Album.Title,!=,One By One),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.30784793675596756, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Album.Title,!=,One By One),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.32180985468338424, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Track),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.Name),Track.Name))", "score": -0.3274560230646763, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Album.Title,!=,One By One),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.33411221805862995, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Album),Track.AlbumId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.Name),Track.Name))", "score": -0.3459686926740244, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.35283926610921684, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.Name),Track.Name))", "score": -0.35627824513504214, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 175, "beams": [{"orig_question": "How are you?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)", "score": -0.16959661362113654, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),Track.Milliseconds)", "score": -0.44881331559438037, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),Track.Bytes)", "score": -0.6010175839718594, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)", "score": -0.7666724151379184, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Employee.Email)", "score": -0.8802015174920239, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)", "score": -0.8808352750980836, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "avg(distinct(getData(Track), Employee.Email),Track.Milliseconds)", "score": -0.8823441932263328, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)", "score": -0.9190948791081655, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),Track.Name)", "score": -0.9677103792797132, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "sum(distinct(getData(Track), Employee.Email),Track.Bytes)", "score": -0.9693618359308285, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.Name)", "score": -0.9823280706352591, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),Employee.Email)", "score": -1.0102847466059157, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "avg(distinct(getData(Track), Employee.Email),Track.Bytes)", "score": -1.034548461603812, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "avg(distinct(getData(Track), Customer.Email),Track.Milliseconds)", "score": -1.1082866657187918, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "sum(distinct(getData(Track), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -1.125529495403455, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 176, "beams": [{"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,RM), MediaType.Name),MediaType.Name))", "score": -0.18596156949890494, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,RM), MediaType.Name),MediaType.Name))", "score": -0.19692065365416542, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.Company,=,RM), MediaType.Name),MediaType.Name))", "score": -0.21152291258268816, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,RM), MediaType.Name),MediaType.Name))", "score": -0.24246396209794854, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,RM), MediaType.Name),MediaType.Name))", "score": -0.25342304625320905, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.Company,=,RM), MediaType.Name),MediaType.Name))", "score": -0.26802530518173173, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,RM), MediaType.Name),MediaType.Name))", "score": -0.27526887578532394, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,RM), MediaType.Name),MediaType.Name))", "score": -0.2862279599405844, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.Company,=,RM), MediaType.Name),MediaType.Name))", "score": -0.30083021886910716, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,RM), MediaType.Name),MediaType.Name))", "score": -0.33177126838436755, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,RM), MediaType.Name),MediaType.Name))", "score": -0.3341942469324794, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.Company,=,RM),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.34789044151567405, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Invoice.BillingCity,=,RM),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.36218590308834103, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.39166260123018565, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,RM), MediaType.Name),Customer.FirstName))", "score": -0.3955810374362292, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 177, "beams": [{"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street), MediaType.Name),MediaType.Name))", "score": -0.1559469872572663, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,230 Elgin Street),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))", "score": -0.3446443351764007, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street), MediaType.Name),Customer.Email))", "score": -0.36086631430771376, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,230 Elgin Street),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))", "score": -0.41403786294259953, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,230 Elgin Street), MediaType.Name),MediaType.Name))", "score": -0.41629068476687014, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,230 Elgin Street), MediaType.Name),Customer.Email))", "score": -0.4225786108591902, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Invoice.BillingAddress,=,230 Elgin Street), MediaType.Name),MediaType.Name))", "score": -0.4248457491791146, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,230 Elgin Street), MediaType.Name),MediaType.Name))", "score": -0.43108345805194404, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Invoice.BillingAddress,=,230 Elgin Street), MediaType.Name),Customer.Email))", "score": -0.43113367527143465, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,230 Elgin Street),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))", "score": -0.4375510661032126, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,230 Elgin Street),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.LastName),Customer.Email))", "score": -0.44289059150482873, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingAddress,=,230 Elgin Street), MediaType.Name),MediaType.Name))", "score": -0.44808421710044205, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingAddress,=,230 Elgin Street), MediaType.Name),Customer.Email))", "score": -0.4543721431927621, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,230 Elgin Street), MediaType.Name),MediaType.Name))", "score": -0.4566392815126865, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,230 Elgin Street),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.State),Customer.Email))", "score": -0.45844791578224436, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 178, "beams": [{"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.016448781095903305, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.6282722386600239, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.7453630732816776, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.8205167772668859, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Track.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.8391510522725407, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Track.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.8464160833411046, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.8733318699704484, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.8805969010390123, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.8939376169170771, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.GenreId), Album.Title),Album.Title))", "score": -0.9276644619933793, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.9690913209022853, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -1.0082841995143326, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Album.Title,Track.AlbumId), Album.Title),Album.Title))", "score": -1.0244948880343894, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Album.Title,Track.AlbumId), Album.Title),Album.Title))", "score": -1.03175993018274, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Album.Title)", "score": -1.0607261340518208, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 179, "beams": [{"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.21426641172046673, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2511653784498692, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Composer,<,Easy Listening), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.26929635864175855, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2723890808258674, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Composer,!=,Easy Listening), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2832546004088529, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Composer,=,Easy Listening), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2838519190757775, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),InvoiceLine.Quantity,=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.29280825159171303, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.29396992037885944, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.30928804755526984, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Composer,=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.31016855803837073, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),InvoiceLine.Quantity,=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.32970721832111555, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3310492712624406, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Composer,<,Easy Listening), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.34423557440975244, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Composer,=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3470675247677732, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.GenreId),Track.Composer,<,Easy Listening), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3506502804653508, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 180, "beams": [{"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.09927781325867455, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.11702617755923288, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.11714139938435007, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.16530469383020696, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.2106964567412537, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(Playlist),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.24975306597051125, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.TrackId,MediaType.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.262423687327431, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.2768923087999606, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.2805619646897483, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.2882076017764733, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(PlaylistTrack),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.2991212244803086, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.30771356050702303, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.3153477800932093, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(MediaType),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.317392458443713, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.381581694278545, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 181, "beams": [{"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.0138104379654185, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.4980266109651086, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.5468393257436275, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.6372004414769061, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Artist.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.6446357856291152, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.6451717505437434, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -0.6573230815230932, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),getData(Album),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.6731376572280587, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.686013156255425, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Album),getData(Album),Artist.ArtistId,Track.AlbumId),Album.Title,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.6889254091271977, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Artist.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.6934485092679175, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.6939844747363135, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,Track.AlbumId), Album.Title),Album.Title))", "score": -0.6960228693333056, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),getData(Album),Track.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.7484304665217321, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),getData(Album),Album.Title,Track.AlbumId), Album.Title),Album.Title))", "score": -0.7540102650889975, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 182, "beams": [{"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.01803817211083366, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.1528672055785955, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.4033300512720619, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.41657621648651594, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.4368805587879973, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.44528638769881657, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Genre.Name),Track.Name))", "score": -0.4578881812525852, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.46821629799592523, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.4912517471447697, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.49675378156536043, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(PlaylistTrack),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.5063661148411897, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.518090054215205, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.5198696103956231, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Genre.Name))", "score": -0.5208504702826715, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Composer),Track.Name))", "score": -0.5258923187473171, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 183, "beams": [{"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.1270733356641358, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.2330371692942208, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.2582521394060677, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.2727274179624146, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.3786912515924996, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.40390622170434654, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.4459929496215409, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.4823207587169236, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.InvoiceDate,>=,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.5519567832516259, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,>=,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.5771717533634728, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.InvoiceDate,<=,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.5882845923470086, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,<=,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.6134995624588555, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.TrackId),Track.Name))", "score": -0.6396551648786044, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.TrackId),Track.Name))", "score": -0.7456189985086894, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.TrackId),Track.Name))", "score": -0.7708339686205363, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 184, "beams": [{"orig_question": "What are the unit prices of the tracks that weren't composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))", "score": -0.013127120455465047, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of the tracks that weren't composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.Bytes),Track.UnitPrice))", "score": -0.41379811220031115, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of the tracks that weren't composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))", "score": -0.522119074837974, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of the tracks that weren't composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.Name),Track.UnitPrice))", "score": -0.6299859767423186, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of the tracks that weren't composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.Milliseconds),Track.UnitPrice))", "score": -0.7003811483846221, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of the tracks that weren't composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))", "score": -0.7056843422578822, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of the tracks that weren't composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))", "score": -0.7064349947140727, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of the tracks that weren't composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.Bytes))", "score": -0.7473847959008708, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of the tracks that weren't composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Title,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))", "score": -0.756867199914268, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of the tracks that weren't composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))", "score": -0.7653720674679789, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of the tracks that weren't composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Customer.Email),Track.UnitPrice))", "score": -0.8087375050054106, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of the tracks that weren't composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,<,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))", "score": -0.8182120703386317, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of the tracks that weren't composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Employee.Email),Track.UnitPrice))", "score": -0.8244217520223174, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of the tracks that weren't composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.TrackId),Track.UnitPrice))", "score": -0.8828979020581755, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of the tracks that weren't composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.8871045594678435, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 185, "beams": [{"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Composer,!=,0.99), Genre.Name),Genre.Name))", "score": -0.20789276541836443, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Composer,>,0.99), Genre.Name),Genre.Name))", "score": -0.2374440330422658, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Composer,<,0.99), Genre.Name),Genre.Name))", "score": -0.30136858405239764, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,0.99), Genre.Name),Genre.Name))", "score": -0.3496123525656003, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.Quantity,>,0.99), Genre.Name),Genre.Name))", "score": -0.3555403077395738, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.TrackId),InvoiceLine.Quantity,>,0.99), Genre.Name),Genre.Name))", "score": -0.372020619080695, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,0.99), Genre.Name),Genre.Name))", "score": -0.37916362018950167, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.TrackId),InvoiceLine.Quantity,!=,0.99), Genre.Name),Genre.Name))", "score": -0.4037252960616208, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId),InvoiceLine.Quantity,>,0.99), Genre.Name),Genre.Name))", "score": -0.4115836985363686, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.TrackId),InvoiceLine.Quantity,<,0.99), Genre.Name),Genre.Name))", "score": -0.41715461505023355, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.Quantity,<,0.99), Genre.Name),Genre.Name))", "score": -0.42068434128701565, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,0.99), Genre.Name),Genre.Name))", "score": -0.4430881711996335, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,0.99), Genre.Name),Genre.Name))", "score": -0.4555720064199704, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.Quantity,>,0.99), Genre.Name),Genre.Name))", "score": -0.46575823070853184, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,>,0.99), Genre.Name),Genre.Name))", "score": -0.4851232740438718, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 186, "beams": [{"orig_question": "What are the distinct states of invoices issued to the postal code \"76110\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Invoice.BillingState))", "score": -0.04119891844356971, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the distinct states of invoices issued to the postal code \"76110\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Customer.State))", "score": -0.28208689748908, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the distinct states of invoices issued to the postal code \"76110\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Playlist.Name))", "score": -0.4526317900385948, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the distinct states of invoices issued to the postal code \"76110\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Employee.State))", "score": -0.5015657430853935, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the distinct states of invoices issued to the postal code \"76110\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.Total),Invoice.BillingState))", "score": -0.5228082573380561, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the distinct states of invoices issued to the postal code \"76110\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Track.UnitPrice))", "score": -0.52624212562705, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the distinct states of invoices issued to the postal code \"76110\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Customer.State),Invoice.BillingState))", "score": -0.5585837995972724, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the distinct states of invoices issued to the postal code \"76110\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Customer.Country))", "score": -0.6252767926421257, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the distinct states of invoices issued to the postal code \"76110\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,76110), Invoice.BillingState),Invoice.BillingState))", "score": -0.6645397570323439, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the distinct states of invoices issued to the postal code \"76110\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Customer.Address))", "score": -0.6866190916266532, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the distinct states of invoices issued to the postal code \"76110\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),MediaType.Name))", "score": -0.7031996732916923, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the distinct states of invoices issued to the postal code \"76110\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Customer.FirstName))", "score": -0.708808351155767, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the distinct states of invoices issued to the postal code \"76110\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Playlist.PlaylistId))", "score": -0.7134343272414299, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the distinct states of invoices issued to the postal code \"76110\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Employee.State),Invoice.BillingState))", "score": -0.7331517970528694, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the distinct states of invoices issued to the postal code \"76110\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.PostalCode,=,76110), Invoice.BillingState),Invoice.BillingState))", "score": -0.748336496610591, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 187, "beams": [{"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.12735854885067965, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.14926513335194613, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4111993317910674, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.42577567747321154, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.48470628777977254, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>=,Ireland), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.506612872281039, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.5939340643071773, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>=,Ireland), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.6158406488084438, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingAddress))", "score": -0.658328359522784, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingAddress),Invoice.BillingPostalCode))", "score": -0.6629316704766097, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6632445039185768, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingCountry))", "score": -0.6720783762120845, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.6749629872338119, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>=,Ireland), Invoice.BillingPostalCode),Invoice.BillingAddress))", "score": -0.6802349440240505, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>=,Ireland), Invoice.BillingAddress),Invoice.BillingPostalCode))", "score": -0.6848382549778762, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 188, "beams": [{"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Black Eyed Peas), Track.TrackId),Track.Milliseconds)", "score": -0.23606932760462881, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Employee.Title,=,Black Eyed Peas), Track.TrackId),Track.Milliseconds)", "score": -0.31363766105272406, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3259310338965002, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Artist.Name,=,Black Eyed Peas),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Milliseconds)", "score": -0.35002120556875926, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3507654065375835, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(InvoiceLine),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Black Eyed Peas), Track.TrackId),Track.Milliseconds)", "score": -0.35239610811277255, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Genre.Name,=,Black Eyed Peas), Track.TrackId),Track.Milliseconds)", "score": -0.35825934991034375, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(PlaylistTrack),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Black Eyed Peas), Track.TrackId),Track.Milliseconds)", "score": -0.3604503599499606, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Milliseconds)", "score": -0.3614297933909692, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId),Artist.Name,=,Black Eyed Peas), Track.TrackId),Track.Milliseconds)", "score": -0.37679432056139883, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3846019780222172, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),getData(PlaylistTrack),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3934143619260124, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.39683765736486226, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.39692284261543354, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),getData(Track),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.4149533290269528, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 189, "beams": [{"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.07616018484362394, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.1477453420664004, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.1703946155763729, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,!=,0.99), Customer.Address),Customer.Address))", "score": -0.3338466654637513, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.34971673379914137, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.36259847830955555, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.362840399489059, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,!=,0.99), Customer.Address),Customer.Address))", "score": -0.3634184357983786, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,!=,0.99), Customer.Address),Customer.Address))", "score": -0.3676336624912329, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,>,0.99), Customer.Address),Customer.Address))", "score": -0.37737708653347496, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.PostalCode))", "score": -0.392105454181356, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),InvoiceLine.Quantity,!=,0.99), Customer.Address),Customer.Address))", "score": -0.42185670475737425, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Invoice.BillingAddress))", "score": -0.4232410218654287, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,0.99), Customer.Address),Customer.Address))", "score": -0.42381327486104664, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.42628657204137216, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 190, "beams": [{"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.031502829939376496, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.39608354550165453, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Album.Title)", "score": -1.0697951952456357, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -1.0809704614643783, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Track.Bytes))", "score": -1.1093690670133758, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.AlbumId))", "score": -1.1895290476716354, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Album.Title),Album.Title))", "score": -1.2971371060954924, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Track.Name))", "score": -1.3065794758058935, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -1.3262126130705965, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -1.370729600388516, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Artist.ArtistId))", "score": -1.3874553312869884, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Track), Album.Title),Album.Title)", "score": -1.3874972832388974, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Employee.LastName))", "score": -1.3977422030243871, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Track.Bytes)", "score": -1.424135766826471, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Track.Bytes),Album.Title))", "score": -1.4363498565511412, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 191, "beams": [{"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.20834950226568108, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.2182197207021215, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.2659658703099445, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Purchased AAC audio file), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.26739635358183156, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2724394143195894, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.27307770277485927, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2772506391584394, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.2829479212112997, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.2846254714834023, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2910990154930472, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,MediaType.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Customer.PostalCode),Customer.PostalCode))", "score": -0.29374990180741944, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Customer.PostalCode),Customer.PostalCode))", "score": -0.29513735445125716, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,MediaType.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.29979856480527306, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Customer.PostalCode),Invoice.BillingPostalCode))", "score": -0.301610898460902, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Purchased AAC audio file), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.30745107244595404, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 192, "beams": [{"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))", "score": -0.06884682478630566, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))", "score": -0.4170917898627522, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.State),Customer.Address))", "score": -0.4187013406517508, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Company),Customer.Address))", "score": -0.4614691037895682, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Country),Customer.Address))", "score": -0.49838819096112275, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Company))", "score": -0.4997643299611809, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))", "score": -0.5537467628928425, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.FirstName),Customer.Address))", "score": -0.5684474010231497, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.PostalCode),Customer.Address))", "score": -0.5846553940536978, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.PostalCode))", "score": -0.5854621000798943, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))", "score": -0.5907101065131428, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))", "score": -0.618176940104604, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.City),Customer.Address))", "score": -0.6252914566757681, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))", "score": -0.6538852483245137, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Invoice.CustomerId))", "score": -0.6668013997586968, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 193, "beams": [{"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))", "score": -0.1550959301457624, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Email))", "score": -0.2392960814104299, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Email),Employee.Title))", "score": -0.3068584119246225, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Email),Employee.Email))", "score": -0.39105856318929, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.LastName))", "score": -0.4249178198442678, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Track.Milliseconds))", "score": -0.43495428835012717, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.FirstName),Employee.Title))", "score": -0.48105016996123595, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.City))", "score": -0.5028984573946218, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.LastName),Employee.Title))", "score": -0.5137171213791589, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.City),Employee.Title))", "score": -0.55313561012008, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Track.TrackId))", "score": -0.5618584779367666, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.FirstName),Employee.Email))", "score": -0.5652503212259035, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.FirstName))", "score": -0.5728626874551992, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Address),Employee.Title))", "score": -0.5765976970360498, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Email),Employee.LastName))", "score": -0.5766803016231279, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 194, "beams": [{"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.04292205053410433, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.Name,=,Eggtown),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.20894391326382963, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Eggtown),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2412917331780348, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Playlist.Name,=,Eggtown),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.25002267212512497, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.PlaylistId),Track.Name,=,Eggtown),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.26899658317168496, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))", "score": -0.2920277450122054, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))", "score": -0.342497276283359, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.34384676984056606, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Invoice.BillingState))", "score": -0.34732233204081786, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown),getData(PlaylistTrack),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.377977927925335, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,Playlist.PlaylistId),Track.Name,=,Eggtown),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.40332519647107284, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Employee.FirstName))", "score": -0.4057987852101009, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.Name), Playlist.Name),Playlist.Name))", "score": -0.4060447869654619, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.TrackId,=,Eggtown), Playlist.Name),Playlist.Name))", "score": -0.407842998678198, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Eggtown),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Invoice.BillingState))", "score": -0.40861301960621405, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 195, "beams": [{"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -0.0021140916860531433, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -0.8617556453455109, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -0.9196653724420685, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.Bytes))", "score": -0.9356380201415959, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.Bytes),Track.UnitPrice))", "score": -0.9393677060643313, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -0.9399615673246444, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.9432374335365239, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -0.9559570909250397, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Album.Title,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -0.9566059470880646, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Playlist.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -0.9627154231775421, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Email,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -1.021880543302359, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -1.0339758937398074, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Genre.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -1.056444203924002, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),MediaType.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -1.0698213935602325, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Customer.Email),Track.UnitPrice))", "score": -1.1017898862401125, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 196, "beams": [{"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))", "score": -0.0752240076981252, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Company),Customer.Address))", "score": -0.3185238477162784, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.FirstName))", "score": -0.3823209733091062, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Company))", "score": -0.4221822351537412, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.PostalCode))", "score": -0.4465754956327146, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.FirstName),Customer.Address))", "score": -0.4814482566289371, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Album.Title,=,Zimmermann), Customer.Address),Customer.Address))", "score": -0.521476899026311, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.State),Customer.Address))", "score": -0.5417656537465518, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Phone))", "score": -0.5866996974073118, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.PostalCode),Customer.Address))", "score": -0.6094700929097598, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Company),Customer.FirstName))", "score": -0.6256208133272594, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Phone),Customer.Address))", "score": -0.6304459210805362, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.State))", "score": -0.6448206633649534, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.LastName,=,Zimmermann), Customer.Address),Customer.Address))", "score": -0.6630895181879168, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Company),Customer.Company))", "score": -0.6654820751718944, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 197, "beams": [{"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.06737005307644642, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.1312090541778117, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,>,Bruce Dickinson/Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.18464965578663012, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.21537622802739734, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,>=,Bruce Dickinson/Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.26027501924109225, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,Bruce Dickinson/Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3102126422524944, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,Bruce Dickinson/Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.33610453119095174, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,!=,Bruce Dickinson/Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3448059865021988, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Bruce Dickinson/Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3473910437872471, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.356711152556567, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Bruce Dickinson/Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.35846929007140865, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.Name), Playlist.Name),Playlist.Name))", "score": -0.3804936946804304, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bruce Dickinson/Steve Harris), Playlist.Name),Playlist.Name))", "score": -0.3876634391945443, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,Bruce Dickinson/Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3951695583651756, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Invoice.BillingState))", "score": -0.39553519590971714, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 198, "beams": [{"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.07589293466298841, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.1379700918623712, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5183479805418756, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5649014134833124, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5731582065054681, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5741234390737207, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5830124652900174, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5831080145868152, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6121501942106988, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6326727147742928, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Milliseconds,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6338164001628918, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6417919574587628, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6524944920965936, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,WA), Invoice.BillingCountry),Customer.Country))", "score": -0.6930964417697396, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.728847505612066, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 199, "beams": [{"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.27677253692037174, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.3127638234678212, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Composer,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.3213773701810221, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Genre.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.32635857723899697, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Trampled Under Foot),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Milliseconds),Track.Milliseconds))", "score": -0.33435450247838944, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.34625285521353766, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Trampled Under Foot),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.Milliseconds),Track.Milliseconds))", "score": -0.35320469003108157, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Composer,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.35736865672847157, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Trampled Under Foot),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Milliseconds),Track.Milliseconds))", "score": -0.3612303604165132, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Genre.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.36234986378644646, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Trampled Under Foot),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.GenreId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.Milliseconds),Track.Milliseconds))", "score": -0.36444678862531843, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Trampled Under Foot),getData(Track),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.Milliseconds),Track.Milliseconds))", "score": -0.37219819405815596, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Trampled Under Foot),merge(getData(Track),getData(Track),Album.AlbumId,Track.TrackId),Artist.ArtistId,Album.ArtistId), Track.Milliseconds),Track.Milliseconds))", "score": -0.38069007692863344, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Trampled Under Foot),getData(Track),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.GenreId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.Milliseconds),Track.Milliseconds))", "score": -0.38344043411839046, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Trampled Under Foot),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId), Track.Milliseconds),Track.Milliseconds))", "score": -0.3998641238606645, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 200, "beams": [{"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.09627864942162105, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Canada),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.23304738926489577, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.26837696099812036, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.2732233677035841, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCity,=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.2773995648478113, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total),Track.UnitPrice))", "score": -0.28317930827493326, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,Canada),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.3062334325110182, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.31232254929831194, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Canada),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.3299899434854957, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.3376872220516871, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),Invoice.Total),Track.UnitPrice))", "score": -0.3508706150732423, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Invoice),InvoiceLine.Quantity,=,Canada),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.35537054441759786, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.Total,=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.3582231414226714, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Invoice),Invoice.Total,=,Canada),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.35856492469169776, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Employee.HireDate,=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.37042294656437497, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 201, "beams": [{"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,!=,0.99), Track.Name),Playlist.Name))", "score": -0.05404134932541638, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,!=,0.99), Track.Name),Playlist.Name))", "score": -0.35948152467244654, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,0.99), Playlist.Name),Playlist.Name))", "score": -0.36679591590052235, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.40829559144314553, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,0.99), Playlist.Name),Employee.FirstName))", "score": -0.41025872950586356, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,0.99), Playlist.Name),Playlist.Name))", "score": -0.4357941695956128, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,0.99), Playlist.Name),Employee.FirstName))", "score": -0.4440956837063168, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.4446608351368843, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Employee.FirstName))", "score": -0.44721940147012684, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,!=,0.99), Playlist.Name),Playlist.Name))", "score": -0.44963432093345035, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,!=,0.99), Playlist.Name),Playlist.Name))", "score": -0.4524772898257652, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Employee.FirstName))", "score": -0.4535369784783218, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,0.99), Playlist.Name),Employee.FirstName))", "score": -0.4595062928909113, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.4806363359071913, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,!=,0.99), Playlist.Name),Employee.FirstName))", "score": -0.49309713453879156, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 202, "beams": [{"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))", "score": -0.07640244063077262, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.PostalCode,!=,2010), Customer.Fax),Customer.Fax))", "score": -0.42516281358985, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Country),Customer.Fax))", "score": -0.5061063347020536, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,2010), Customer.Fax),Customer.Fax))", "score": -0.5076215481021791, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Country))", "score": -0.5471329786450951, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.City),Customer.Fax))", "score": -0.6290243742623716, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Employee.Fax),Customer.Fax))", "score": -0.6370819089570432, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Employee.Fax))", "score": -0.641288767066726, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,2010), Customer.Fax),Customer.Fax))", "score": -0.6449781870105653, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Company))", "score": -0.6576614477307885, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.City))", "score": -0.6899864174993127, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Artist.Name,!=,2010), Customer.Fax),Customer.Fax))", "score": -0.6992445801952272, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Company),Customer.Fax))", "score": -0.7136156437554746, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))", "score": -0.7187565979984356, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Album.Title),Customer.Fax))", "score": -0.7297843573251157, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 203, "beams": [{"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.012478008821797141, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))", "score": -0.25094666473041616, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Track.Name))", "score": -0.28802620209589525, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Track.Name))", "score": -0.35644655138870335, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Employee.Email),Track.Name))", "score": -0.4135171256613348, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),Track.Name))", "score": -0.43221310346004904, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Name))", "score": -0.43360842089882007, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Bytes))", "score": -0.4540425735265063, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.4604234583902484, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Genre.Name))", "score": -0.4765223885371319, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Bytes),Track.Name))", "score": -0.48333300503971693, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.4878082331511198, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Employee.FirstName,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.49385407895954947, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Employee.FirstName),Track.Name))", "score": -0.49405649978403576, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.49616066172125695, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 204, "beams": [{"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,240325), Playlist.Name),Playlist.Name))", "score": -0.12042709872548585, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,240325), Playlist.Name),Playlist.Name))", "score": -0.1336759670120955, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,240325), Playlist.Name),Playlist.Name))", "score": -0.3251953615290404, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,240325), Playlist.Name),Playlist.Name))", "score": -0.3921941979314205, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,240325), Track.Name),Playlist.Name))", "score": -0.3995481493366242, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,240325), Track.Name),Playlist.Name))", "score": -0.41279701762323384, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325), Playlist.Name),Playlist.Name))", "score": -0.47229552407016084, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,240325), Playlist.Name),Playlist.Name))", "score": -0.4961267603976012, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,!=,240325), Playlist.Name),Playlist.Name))", "score": -0.5882480512447575, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,240325), Track.Name),Playlist.Name))", "score": -0.6043164121401787, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,240325), Track.UnitPrice),Playlist.Name))", "score": -0.6048448445690155, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,240325), Playlist.Name),Playlist.Name))", "score": -0.6146706561218572, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,240325), Track.UnitPrice),Playlist.Name))", "score": -0.6180937128556252, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>,240325), Playlist.Name),Playlist.Name))", "score": -0.6523738699786291, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,240325), Playlist.Name),Playlist.Name))", "score": -0.6535419600863607, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 205, "beams": [{"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,1),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2185013284271272, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>=,1),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23771018479821948, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2514790567116374, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.26914010858207754, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2982907387339943, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3002328053577815, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,1),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.Total)", "score": -0.3021631831889363, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>=,1),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.Total)", "score": -0.32137203956002863, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,1),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.33485475426694794, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,1),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Track.TrackId),Invoice.Total)", "score": -0.35309751819043883, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>=,1),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.35406361063804026, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.35588818166844993, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,1),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3630672590430366, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3656717181736148, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.37115616807631846, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 206, "beams": [{"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Name),Track.Name))", "score": -0.22008033151359996, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.BillingAddress,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Name),Track.Name))", "score": -0.2710309779140516, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Name),Track.UnitPrice))", "score": -0.36563058997126063, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Playlist.Name),Track.Name))", "score": -0.38579995984764537, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.BillingAddress,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Name),Track.UnitPrice))", "score": -0.4165812363717123, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.BillingAddress,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Playlist.Name),Track.Name))", "score": -0.43675060624809703, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.UnitPrice),Track.Name))", "score": -0.4528569882604643, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), MediaType.Name),Track.Name))", "score": -0.48873704726429423, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.BillingAddress,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.UnitPrice),Track.Name))", "score": -0.5038076346609159, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Name),Playlist.Name))", "score": -0.5245120605322882, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Playlist.Name),Track.UnitPrice))", "score": -0.531350218305306, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Invoice.BillingAddress),Track.Name))", "score": -0.5388782923910185, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.BillingAddress,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), MediaType.Name),Track.Name))", "score": -0.5396876936647459, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Name),Track.Name))", "score": -0.5577701093498035, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Genre.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Name),Track.Name))", "score": -0.5735109509769245, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 207, "beams": [{"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.Email),Customer.Email))", "score": -0.16440472094063807, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.State),Customer.Email))", "score": -0.2308932402515893, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.Email),Customer.City))", "score": -0.27551588503365565, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.State),Customer.City))", "score": -0.3420044043446069, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.City),Customer.Email))", "score": -0.4086761185312753, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.Email),Customer.State))", "score": -0.41801652399544764, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.State),Customer.State))", "score": -0.4845050433063989, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), InvoiceLine.UnitPrice),Customer.Email))", "score": -0.4939271518373971, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.Email),InvoiceLine.UnitPrice))", "score": -0.518231124558497, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.City),Customer.City))", "score": -0.5197872826242929, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.Email),InvoiceLine.InvoiceLineId))", "score": -0.5805145212793832, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.State),InvoiceLine.UnitPrice))", "score": -0.5847196438694482, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.FirstName),Customer.Email))", "score": -0.6006480464125161, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Rogers Canada), Customer.Email),Customer.Email))", "score": -0.6040232050577288, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), InvoiceLine.UnitPrice),Customer.City))", "score": -0.6050383159304147, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 208, "beams": [{"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)", "score": -0.31338300104455274, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),Invoice.Total)", "score": -0.3171546813118167, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(getData(Track), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.42374245681928874, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(getData(Track), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.42751413708655267, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),InvoiceLine.Quantity)", "score": -0.4615859537765354, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.48536292275215753, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5230083281615748, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.535352734257274, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.553216584301423, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(getData(Track), Track.UnitPrice),Track.UnitPrice)", "score": -0.5570087967779243, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(getData(Track), Track.UnitPrice),Invoice.Total)", "score": -0.5607804770451882, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5655609502946682, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(getData(Track), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5719454095512714, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5868566265628768, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.6016032752477907, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 209, "beams": [{"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))", "score": -0.04610310982025112, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.FirstName,!=,Michael), Employee.Address),Employee.Address))", "score": -0.3712544415429875, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,Michael), Employee.Address),Employee.Address))", "score": -0.3871029291585728, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Title))", "score": -0.48850976510948385, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,Michael), Employee.Address),Employee.Address))", "score": -0.5063804958299443, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Title),Employee.Address))", "score": -0.521777565805678, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Invoice.BillingAddress))", "score": -0.5227856545061513, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.FirstName),Employee.Address))", "score": -0.54932379278398, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Track.Milliseconds),Employee.Address))", "score": -0.6099125102446123, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.FirstName))", "score": -0.6166309921354696, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Phone))", "score": -0.6234730689138814, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.State),Employee.Address))", "score": -0.6327843621656939, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Track.Milliseconds))", "score": -0.6552639810652181, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingAddress,!=,Michael), Employee.Address),Employee.Address))", "score": -0.6929306064084813, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.State))", "score": -0.7103746740431234, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 210, "beams": [{"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.09837708322819266, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.10602232925231884, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,R.E.M.),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.1423022355567725, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,R.E.M.),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.1467016958094406, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.19982920569697726, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.20022177572013358, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.20747445172110343, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.21935738730239832, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2270026333265245, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2314332844427113, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,R.E.M.),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.23521107202057615, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.23907853642661991, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,R.E.M.),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.23961053227324428, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,R.E.M.),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.25041000591984, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,R.E.M.),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2548094661725081, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 211, "beams": [{"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.06504919063408193, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.10432190838237515, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.13531071814604415, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), MediaType.Name),MediaType.Name))", "score": -0.17752861971053688, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.20734747250714358, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.25868099744605866, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), MediaType.Name),MediaType.Name))", "score": -0.25893599248906163, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3120395074213239, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), MediaType.Name),MediaType.Name))", "score": -0.32362274954511505, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), MediaType.Name),MediaType.Name))", "score": -0.33511206333427124, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name)", "score": -0.36346738902753767, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical 101 - Next Steps), MediaType.Name),MediaType.Name))", "score": -0.3639530081289864, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.36645134250513717, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.37095464570929265, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name)", "score": -0.40368140494450216, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 212, "beams": [{"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Genre.Name),Genre.Name))", "score": -0.12214867347153247, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))", "score": -0.3170989644509429, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Funk Como Le Gusta),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.328221001819943, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))", "score": -0.34503473379758187, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))", "score": -0.3575304491484973, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,=,Funk Como Le Gusta), Genre.Name),Genre.Name))", "score": -0.35922493848832765, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Genre),Track.GenreId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))", "score": -0.364727029335361, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))", "score": -0.3854662184951363, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,=,Funk Como Le Gusta), Genre.Name),Genre.Name))", "score": -0.39965642318588207, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))", "score": -0.41763284508970794, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Funk Como Le Gusta),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.41955889979369776, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))", "score": -0.42228706909419295, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Artist),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))", "score": -0.4472286637974321, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Genre),Track.GenreId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))", "score": -0.46609980945703533, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Album),getData(Album),Artist.ArtistId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))", "score": -0.4832424578293563, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 213, "beams": [{"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)", "score": -0.028974294236910277, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.Total,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.7247224331596982, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.7625442506474518, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.7809138265367146, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(getData(InvoiceLine), Invoice.InvoiceId),Invoice.Total)", "score": -0.884081157945029, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),Customer.CustomerId,Invoice.InvoiceId),Customer.Address,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.8990142005363172, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),Customer.CustomerId,Invoice.InvoiceId),Customer.Address,=,None), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.9199955599643296, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.Address,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.9265269393264807, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),Customer.CustomerId,Invoice.InvoiceId),Invoice.Total,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.9387655860620527, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.Address,=,None), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.9432682808924967, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.Address,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.9433830913533316, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),Customer.CustomerId,Invoice.InvoiceId),Customer.Address,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.9503939876693261, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Customer.Address,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.9519007361623376, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.InvoiceId),Customer.Address,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.9553370505062223, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.Total,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.9580133127690589, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 214, "beams": [{"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.BirthDate))", "score": -0.0760420404958495, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.BirthDate),Employee.BirthDate))", "score": -0.1951606229531535, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.Country))", "score": -0.4132181119757661, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.HireDate))", "score": -0.48325097678480233, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.Country),Employee.BirthDate))", "score": -0.5086358722883233, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.City))", "score": -0.5220454644995698, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.BirthDate),Employee.Country))", "score": -0.5323366944330701, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,1973-07-01 00:00:00), Employee.BirthDate),Employee.BirthDate))", "score": -0.5846723572003611, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.City),Employee.BirthDate))", "score": -0.592944615765191, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.BirthDate),Employee.HireDate))", "score": -0.6023695592421063, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Invoice.InvoiceDate))", "score": -0.6122235965567597, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.HireDate),Employee.BirthDate))", "score": -0.6274152931409844, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.Country),Employee.BirthDate))", "score": -0.6277544547456273, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.BirthDate),Employee.City))", "score": -0.6411640469568738, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.680946701450921, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 215, "beams": [{"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.1492049597665446, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>,0.99),getData(PlaylistTrack),PlaylistTrack.PlaylistId,Playlist.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.19179113061891329, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>,0.99),getData(PlaylistTrack),PlaylistTrack.PlaylistId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2410367987184052, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>,0.99),getData(PlaylistTrack),Track.TrackId,Playlist.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2586697551491108, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),PlaylistTrack.PlaylistId,Playlist.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.26086901705254384, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.28558455635679647, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.29609294401580755, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3072597129293749, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3079154232486027, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3098820872057997, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),PlaylistTrack.PlaylistId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3101146851520358, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3237753959920863, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,Playlist.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3277476415827414, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>,0.99),getData(PlaylistTrack),Playlist.PlaylistId,Playlist.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.32817738485070636, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.37640217744620064, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 216, "beams": [{"orig_question": "What are the email addresses of customers working at Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.Email),Customer.Email))", "score": -0.020652914931815758, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers working at Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Rogers Canada), Customer.Email),Customer.Email))", "score": -0.4526165896559178, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers working at Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rogers Canada), Customer.Email),Customer.Email))", "score": -0.48863996802811016, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers working at Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.State),Customer.Email))", "score": -0.5380314696112691, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers working at Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.Email),InvoiceLine.UnitPrice))", "score": -0.5623378882182806, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers working at Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), InvoiceLine.UnitPrice),Customer.Email))", "score": -0.6012867796698629, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers working at Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.FirstName),Customer.Email))", "score": -0.6119061219969808, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers working at Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))", "score": -0.6367075616026341, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers working at Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Rogers Canada), Customer.Email),Customer.Email))", "score": -0.6449062501078515, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers working at Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,<=,Rogers Canada), Customer.Email),Customer.Email))", "score": -0.6832887207156091, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers working at Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.Email),Customer.State))", "score": -0.7102680334819524, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers working at Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.Email),Customer.City))", "score": -0.7328539023174017, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers working at Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.LastName),Customer.Email))", "score": -0.735500406054598, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers working at Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,>=,Rogers Canada), Customer.Email),Customer.Email))", "score": -0.7615534936076074, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers working at Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Country,=,Rogers Canada), Customer.Email),Customer.Email))", "score": -0.8031133851209233, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 217, "beams": [{"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.20963421963097062, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.3289187713726278, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Album.Title,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.430764708071365, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.43255183328795876, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),InvoiceLine.Quantity,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.46544209808052983, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.4687170649202314, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,!=,Out Of Time), Album.Title),InvoiceLine.Quantity))", "score": -0.483981422483339, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.48469011985810423, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Album.Title,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.4920771285160299, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,!=,Out Of Time), InvoiceLine.Quantity),Album.Title))", "score": -0.5091713271303888, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.Quantity,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.5095962536494112, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.5208553514211559, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,!=,Out Of Time), InvoiceLine.Quantity),Album.Title))", "score": -0.5815335888037225, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "sum(distinct(getData(Track), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5848576258022163, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,Out Of Time), Album.Title),InvoiceLine.Quantity))", "score": -0.6017920333907156, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 218, "beams": [{"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))", "score": -0.06763364334711172, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.Country))", "score": -0.5236716613556807, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.Phone))", "score": -0.5802278249341509, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.FirstName))", "score": -0.6134543874889766, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.State))", "score": -0.6736055723614861, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),Invoice.BillingState))", "score": -0.6836754867295394, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Address),Customer.State))", "score": -0.6872979809435551, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.Address))", "score": -0.7040116841807472, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),Employee.State))", "score": -0.7170023491258308, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.State))", "score": -0.7788645916637718, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),InvoiceLine.UnitPrice))", "score": -0.8175974455362479, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(getData(Customer), InvoiceLine.UnitPrice),Customer.State))", "score": -0.8942706708032312, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.State),Customer.State))", "score": -0.9194375233503027, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),Playlist.Name))", "score": -0.9481966020389051, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.State))", "score": -0.9610351556726158, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 219, "beams": [{"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.2047077827981075, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.32316707908885844, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.3319503844029491, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total),Customer.Address))", "score": -0.3373219068828322, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.3428076395240084, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.348651912395546, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,1),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.35508000861411165, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.GenreId),Track.UnitPrice,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.38915832186508165, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.UnitPrice),Customer.Address))", "score": -0.39089187590143015, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.4031734185588005, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceDate,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.4068465022275024, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.41627086677025676, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.AlbumId),Track.UnitPrice,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.42370417444169006, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Company))", "score": -0.4259396355869534, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.AlbumId),Track.UnitPrice,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.428715436134918, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 220, "beams": [{"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.1768155183926865, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.2028467741147324, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.26150842870629276, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.2871876593962952, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.33793415988839115, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.35288079942620243, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.3877883192435547, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.3947132464782044, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.6169648405448243, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.6293563481704041, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.6345636483565613, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.6736357000154385, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingAddress,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.7026968386453518, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),InvoiceLine.UnitPrice,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.7130757954400906, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,jacksmith@microsoft.com), Customer.Company),Customer.Country))", "score": -0.8758939228537201, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 221, "beams": [{"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.13937888269538234, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.2558555824052746, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.2910203558694775, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.30947077897112846, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.33523433968576993, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.3809504334368311, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.3961241268813601, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,>,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.40267786544973205, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.4047411454212124, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.4137040952111922, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.4181440786760504, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.42560467844123195, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,!=,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.4338344779889315, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,!=,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.4431384081368813, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.Total,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.44756718317997957, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 222, "beams": [{"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))", "score": -0.11722299252368443, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Customer),Customer.Company,=,None),getData(Customer),Customer.CustomerId,Invoice.CustomerId), Customer.Address),Customer.Address))", "score": -0.41166917157028515, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Customer),Customer.Phone,=,None),getData(Customer),Customer.CustomerId,Invoice.CustomerId), Customer.Address),Customer.Address))", "score": -0.4856892338855481, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Customer),Customer.Company,=,None),getData(Customer),Customer.CustomerId,Invoice.CustomerId), Customer.FirstName),Customer.Address))", "score": -0.5074257076318109, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Address))", "score": -0.5460836144073451, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Customer),Customer.Address,=,None),getData(Customer),Customer.CustomerId,Invoice.CustomerId), Customer.Address),Customer.Address))", "score": -0.5714100569270381, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Customer),Customer.Phone,=,None),getData(Customer),Customer.CustomerId,Invoice.CustomerId), Customer.FirstName),Customer.Address))", "score": -0.5814457699470739, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Customer),Customer.Company,=,None),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId), Customer.Address),Customer.Address))", "score": -0.5921076898499558, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.FirstName))", "score": -0.617918212349576, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Customer),Customer.Company,=,None),getData(Customer),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Customer.Address))", "score": -0.6225333056187023, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Customer),Customer.Company,=,None),getData(Customer),Customer.CustomerId,Invoice.CustomerId), Customer.Address),Invoice.BillingAddress))", "score": -0.6324392343090327, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Customer),Customer.Company,=,None),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Customer.Address),Customer.Address))", "score": -0.6471696121228212, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Customer),Customer.Company,=,None),getData(Customer),Customer.CustomerId,Invoice.CustomerId), Customer.Address),Customer.FirstName))", "score": -0.6533873356930225, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.State),Customer.Address))", "score": -0.6575408954986339, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Customer),Customer.Phone,=,None),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId), Customer.Address),Customer.Address))", "score": -0.6661277945947904, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 223, "beams": [{"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.1322856384485931, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.21896462768017955, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.40718250974714465, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.4116716149419517, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.4154831531614036, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Track.Composer))", "score": -0.46064835294782824, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Artist.Name))", "score": -0.4758992741972179, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.4938614989787311, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.5021621423929901, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCountry))", "score": -0.5071340154081554, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Track.Composer))", "score": -0.5473273421794147, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCountry),Invoice.BillingCity))", "score": -0.5516445997327537, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Artist.Name))", "score": -0.5625782634288043, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5634088578790397, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5680133762925834, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 224, "beams": [{"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))", "score": -0.03000838037364626, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))", "score": -0.11985879491656437, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))", "score": -0.2877932420028781, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.35398166170885315, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))", "score": -0.3562698690772436, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(PlaylistTrack),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))", "score": -0.3833059775526044, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(Track),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))", "score": -0.4001530175754961, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.42378391008598176, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.43172373980721307, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.Bytes))", "score": -0.45865494598749407, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Bytes),Track.UnitPrice))", "score": -0.46172305557590776, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))", "score": -0.4642275545386154, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,Track.UnitPrice),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))", "score": -0.49823530714916625, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Invoice.InvoiceId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5083560585557145, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))", "score": -0.5117393789593091, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 225, "beams": [{"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.04259221859865647, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.35002112061374646, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Customer.PostalCode))", "score": -0.490001189044051, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.5089484422805981, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Customer.PostalCode),Employee.PostalCode))", "score": -0.5179022913671361, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.Fax))", "score": -0.5363026135473774, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.5632221964060591, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.5675022071100102, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.5948008936702536, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Artist.Name))", "score": -0.6019028895407246, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.6060056132137106, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.Fax),Employee.PostalCode))", "score": -0.6183702414728032, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.653798167115383, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.6696444623976276, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.683745410746269, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 226, "beams": [{"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.FirstName,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.15112741014399902, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.16012808969504264, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Address,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.17543721029803122, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.1888118762845395, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.FirstName,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.19064014723946934, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.19752953751623328, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Address,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.21824712212957148, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.22108090327246388, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.22183926571272872, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.2272030475729698, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Email,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.2311555434366006, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.2350088732647744, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.23899028859470894, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.24330946104041049, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,=,AB),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.261433221711842, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 227, "beams": [{"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,153600),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.1472285214189803, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,153600),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.14866011285822334, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,153600),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.1777313464009416, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,<,153600),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.18752245907615192, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,<=,153600),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.21321189404842303, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,153600),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.21983498809387364, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>=,153600),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.24347119520411795, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,153600),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.24490278664336096, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,null,153600),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.24513418402118864, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,153600),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2591106609543904, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,153600),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.27205973379453696, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,153600),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.28376513286128957, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,153600),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3094545678335607, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,153600),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.31416339812272437, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,null,153600),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3413768668050517, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 228, "beams": [{"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))", "score": -0.3239365999823377, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))", "score": -0.36941528657495915, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Address),Customer.Company))", "score": -0.3768632241123828, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))", "score": -0.38298496229804607, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1), Customer.Company),Customer.Company))", "score": -0.3946980522571317, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Customer.Address),Customer.Company))", "score": -0.40473219479780576, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,!=,1), Customer.Company),Customer.Company))", "score": -0.40574470024392123, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,=,1), Customer.Company),Customer.Company))", "score": -0.4208736342463441, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Address))", "score": -0.42235592201245586, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1), Customer.Address),Customer.Company))", "score": -0.43001496047997834, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Address),Customer.Company))", "score": -0.4359115864280912, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,<=,1), Customer.Company),Customer.Company))", "score": -0.4372820817827581, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<,1), Customer.Company),Customer.Company))", "score": -0.4535699044359562, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,!=,1), Customer.Address),Customer.Company))", "score": -0.4586713930411631, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,1), Customer.Company),Customer.Company))", "score": -0.45937685225589675, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 229, "beams": [{"orig_question": "Customers from states other than Illinois have ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,IL),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Customer.State))", "score": -0.2768714839144222, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,IL),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Customers from states other than Illinois have ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,IL),merge(getData(Track),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), Invoice.BillingState),Customer.State))", "score": -0.2903512947673982, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,IL),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Customers from states other than Illinois have ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,IL),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Customer.State))", "score": -0.3110656923300371, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,IL),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Customers from states other than Illinois have ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,IL),merge(getData(Track),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), Invoice.BillingState),Invoice.BillingState))", "score": -0.31210789800114896, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,IL),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Customers from states other than Illinois have ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,IL),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.32457070915036274, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,IL),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Customers from states other than Illinois have ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,IL),getData(MediaType),Track.MediaTypeId,Invoice.InvoiceId), Invoice.BillingState),Customer.State))", "score": -0.3267159565507725, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,IL),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Customers from states other than Illinois have ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,IL),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), Invoice.BillingState),Customer.State))", "score": -0.33086490543231334, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,IL),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Customers from states other than Illinois have ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,IL),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Customer.State))", "score": -0.3456400848191434, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,IL),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Customers from states other than Illinois have ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,IL),merge(getData(Track),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Invoice.BillingState),Customer.State))", "score": -0.3470023124676433, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,IL),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Customers from states other than Illinois have ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,IL),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Customer.State))", "score": -0.3477871564235825, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,IL),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Customers from states other than Illinois have ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,IL),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), Invoice.BillingState),Customer.State))", "score": -0.3494553639002701, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,IL),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Customers from states other than Illinois have ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,IL),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3526215086660641, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,IL),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Customers from states other than Illinois have ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,IL),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3554612052473134, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,IL),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Customers from states other than Illinois have ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,IL),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3576082768517525, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,IL),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Customers from states other than Illinois have ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,IL),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3587649175659777, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,IL),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 230, "beams": [{"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.11745879087175126, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.BillingCity),Customer.City))", "score": -0.19913502815688844, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2902553233834624, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Customer.City))", "score": -0.37193156066859956, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.42447052184070344, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.43778128210033174, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Finland), Invoice.BillingCity),Customer.City))", "score": -0.5061467591258406, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5550008792015433, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5777914303871512, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.BillingCity),Artist.Name))", "score": -0.5852395969959616, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5972670543524146, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.6105778146120429, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.BillingCity),Album.Title))", "score": -0.6249111372562766, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Finland), Invoice.BillingCity),Customer.City))", "score": -0.6366771164866805, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6375191885563254, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 231, "beams": [{"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313), Playlist.Name),Employee.FirstName))", "score": -0.06954874971469806, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313), Playlist.Name),Playlist.Name))", "score": -0.12082314141178896, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,6854313),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Employee.FirstName))", "score": -0.24277221756659115, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Employee),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313), Playlist.Name),Employee.FirstName))", "score": -0.29335904826714104, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),PlaylistTrack.PlaylistId,PlaylistTrack.TrackId),Track.Bytes,=,6854313), Playlist.Name),Employee.FirstName))", "score": -0.33607008620304596, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313), Playlist.Name),Employee.State))", "score": -0.3420316628592224, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Employee),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313), Playlist.Name),Playlist.Name))", "score": -0.34463343996423196, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3479312964155207, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),Customer.SupportRepId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313), Playlist.Name),Employee.FirstName))", "score": -0.3494582923688839, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313), Playlist.Name),Employee.Country))", "score": -0.3588586170244331, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313), Employee.FirstName),Employee.FirstName))", "score": -0.36119050878781434, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,6854313),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3652497542982439, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,6854313), Playlist.Name),Employee.FirstName))", "score": -0.37081815176819477, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313), Playlist.Name),Employee.Title))", "score": -0.37664893208933087, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313), Playlist.Name),Employee.Phone))", "score": -0.3845071883694016, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 232, "beams": [{"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.17282058808783196, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.Name,=,Audiobooks), Playlist.Name),Playlist.Name))", "score": -0.2031300189214144, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.Name,=,Audiobooks), Playlist.Name),Playlist.Name))", "score": -0.22382904638060153, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.Name,=,Audiobooks), Playlist.Name),Playlist.Name))", "score": -0.25481719660096264, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),getData(Playlist),PlaylistTrack.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2859157934614492, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Playlist.Name),Playlist.Name))", "score": -0.2955613603696619, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,Playlist.PlaylistId),Playlist.Name,=,Audiobooks), Playlist.Name),Playlist.Name))", "score": -0.2964057719639418, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.TrackId),Playlist.Name,=,Audiobooks), Playlist.Name),Playlist.Name))", "score": -0.31220628887153695, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(PlaylistTrack),PlaylistTrack.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.Name,=,Audiobooks), Playlist.Name),Playlist.Name))", "score": -0.3175785742378189, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.Name,=,Audiobooks), Playlist.Name),Employee.FirstName))", "score": -0.32148982332910486, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(PlaylistTrack),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.Name,=,Audiobooks), Playlist.Name),Playlist.Name))", "score": -0.32617490266963806, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.Name,=,Audiobooks), Playlist.Name),Playlist.Name))", "score": -0.3349535517296858, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(PlaylistTrack),PlaylistTrack.PlaylistId,Playlist.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.Name,=,Audiobooks), Playlist.Name),Playlist.Name))", "score": -0.3382776021654365, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.Name,=,Audiobooks), Playlist.Name),Employee.FirstName))", "score": -0.342188850788292, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Track.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.Name,=,Audiobooks), Playlist.Name),Playlist.Name))", "score": -0.34395864217993466, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 233, "beams": [{"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))", "score": -0.018511737219179866, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))", "score": -0.19973122645919628, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(PlaylistTrack),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))", "score": -0.3108305320097264, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Bytes))", "score": -0.37095255689387496, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))", "score": -0.3817039130071864, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks), Track.Name),Track.Name))", "score": -0.3871302204194278, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))", "score": -0.4270374910583499, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))", "score": -0.4304082602659263, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))", "score": -0.44048729483665217, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Album.AlbumId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))", "score": -0.4417467703022469, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.Bytes),Track.Name))", "score": -0.4463360727853294, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))", "score": -0.4585687113941049, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))", "score": -0.4782619217193746, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Track.Name),Track.Name))", "score": -0.4905276550989498, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(Playlist),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))", "score": -0.49823111458460384, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 234, "beams": [{"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.04967883350855118, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.30545893991893536, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.35929217124885326, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.38399032438701397, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Rome), Invoice.BillingCountry),Customer.Country))", "score": -0.5358759959281088, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Employee.HireDate,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5438789150805503, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Employee.HireDate,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5509953485583454, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5716054001017989, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.578721833579594, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5807792312695299, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5878956777608663, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Rome), Invoice.InvoiceDate),Invoice.BillingCountry))", "score": -0.6046459754516036, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6150722776592374, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Employee.HireDate,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6195931280730976, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Employee.HireDate,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6267095615508926, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 235, "beams": [{"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))", "score": -0.029141472558876558, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),MediaType.Name))", "score": -0.4476023222314325, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), MediaType.Name),Customer.FirstName))", "score": -0.4551343255670872, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.Email))", "score": -0.5007135177957025, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.Email),Customer.FirstName))", "score": -0.5497440033586827, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Track.Name))", "score": -0.5905723179685083, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.LastName),Customer.FirstName))", "score": -0.5991390877397862, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.LastName))", "score": -0.6021493877278772, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.State),Customer.FirstName))", "score": -0.6037078433664647, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),MediaType.MediaTypeId))", "score": -0.625815411935946, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))", "score": -0.6545745794655886, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Employee.LastName))", "score": -0.673668047319552, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Employee.FirstName))", "score": -0.675767918954989, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Genre.GenreId))", "score": -0.7115231360303369, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Genre.Name))", "score": -0.728262921701571, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 236, "beams": [{"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -0.011122918097514001, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,None), Customer.City),Customer.City))", "score": -0.8243515612339252, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Album.Title))", "score": -0.834728279013924, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.City))", "score": -0.8858635435847683, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,None), Customer.City),Customer.City))", "score": -0.8934509800528758, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.Fax))", "score": -0.9112003359460309, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(getData(Customer), Album.Title),Customer.City))", "score": -0.9498253958906905, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.City))", "score": -0.9806863268835762, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(getData(Customer), Invoice.BillingCity),Customer.City))", "score": -1.0526109839981976, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.Company))", "score": -1.0928874397194268, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Invoice.BillingCity))", "score": -1.1740013938403178, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.City))", "score": -1.2326681067981615, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),InvoiceLine.Quantity))", "score": -1.2606313260982098, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.City))", "score": -1.2878760447233035, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.LastName))", "score": -1.3456061728178639, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 237, "beams": [{"orig_question": "What is the most expensive MPEG audio file title?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)", "score": -0.31734777196253766, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What is the most expensive MPEG audio file title?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.45398978377930554, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What is the most expensive MPEG audio file title?", "inferred_code": "sum(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Track.UnitPrice),InvoiceLine.UnitPrice)", "score": -0.4808797988404919, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What is the most expensive MPEG audio file title?", "inferred_code": "sum(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.48537858501468867, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What is the most expensive MPEG audio file title?", "inferred_code": "sum(distinct(getData(Track), MediaType.Name),Track.UnitPrice)", "score": -0.5618250681856536, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What is the most expensive MPEG audio file title?", "inferred_code": "sum(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),InvoiceLine.UnitPrice)", "score": -0.6004871794297687, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What is the most expensive MPEG audio file title?", "inferred_code": "sum(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId), Track.UnitPrice),InvoiceLine.UnitPrice)", "score": -0.6031599613321744, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What is the most expensive MPEG audio file title?", "inferred_code": "sum(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.6076587475063712, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What is the most expensive MPEG audio file title?", "inferred_code": "sum(distinct(getData(Track), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.6157457868563343, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What is the most expensive MPEG audio file title?", "inferred_code": "sum(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Customer.Email),InvoiceLine.UnitPrice)", "score": -0.6442635447319742, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What is the most expensive MPEG audio file title?", "inferred_code": "sum(distinct(filter(getData(MediaType),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.659196437383182, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What is the most expensive MPEG audio file title?", "inferred_code": "sum(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice)", "score": -0.6601577435821023, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What is the most expensive MPEG audio file title?", "inferred_code": "sum(distinct(getData(MediaType), Track.TrackId),Track.UnitPrice)", "score": -0.6726154413987484, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What is the most expensive MPEG audio file title?", "inferred_code": "sum(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Track.UnitPrice),Track.UnitPrice)", "score": -0.6776788773439941, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What is the most expensive MPEG audio file title?", "inferred_code": "sum(distinct(getData(Track), MediaType.MediaTypeId),Track.UnitPrice)", "score": -0.6788925162482227, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 238, "beams": [{"orig_question": "What country does the employee who made an invoice on 2013-07-07 at 00:00:00 and isn't named Nancy come from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,>=,2013-07-07 00:00:00),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))", "score": -0.319578813390151, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),filter(getData(Employee),Employee.FirstName,!=,Nancy),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee who made an invoice on 2013-07-07 at 00:00:00 and isn't named Nancy come from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,>,2013-07-07 00:00:00),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))", "score": -0.3930369202232129, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),filter(getData(Employee),Employee.FirstName,!=,Nancy),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee who made an invoice on 2013-07-07 at 00:00:00 and isn't named Nancy come from?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.BirthDate,=,Nancy),Employee.HireDate,=,Nancy), Employee.Country),Employee.Country))", "score": -0.40063563241502653, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),filter(getData(Employee),Employee.FirstName,!=,Nancy),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee who made an invoice on 2013-07-07 at 00:00:00 and isn't named Nancy come from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,=,2013-07-07 00:00:00),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))", "score": -0.40210976084178923, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),filter(getData(Employee),Employee.FirstName,!=,Nancy),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee who made an invoice on 2013-07-07 at 00:00:00 and isn't named Nancy come from?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.BirthDate,=,2013-07-07 00:00:00),Employee.Country,=,Nancy), Employee.Country),Employee.Country))", "score": -0.4053547142271979, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),filter(getData(Employee),Employee.FirstName,!=,Nancy),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee who made an invoice on 2013-07-07 at 00:00:00 and isn't named Nancy come from?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.BirthDate,=,Nancy),Employee.BirthDate,=,Nancy), Employee.Country),Employee.Country))", "score": -0.41763450600498697, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),filter(getData(Employee),Employee.FirstName,!=,Nancy),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee who made an invoice on 2013-07-07 at 00:00:00 and isn't named Nancy come from?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,=,2013-07-07 00:00:00),Employee.HireDate,=,Nancy), Employee.Country),Employee.Country))", "score": -0.419888807604276, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),filter(getData(Employee),Employee.FirstName,!=,Nancy),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee who made an invoice on 2013-07-07 at 00:00:00 and isn't named Nancy come from?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,=,2013-07-07 00:00:00),Employee.Country,=,Nancy), Employee.Country),Employee.Country))", "score": -0.4246078894164473, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),filter(getData(Employee),Employee.FirstName,!=,Nancy),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee who made an invoice on 2013-07-07 at 00:00:00 and isn't named Nancy come from?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.BirthDate,=,2013-07-07 00:00:00),Employee.HireDate,<,Nancy), Employee.Country),Employee.Country))", "score": -0.4327479320716319, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),filter(getData(Employee),Employee.FirstName,!=,Nancy),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee who made an invoice on 2013-07-07 at 00:00:00 and isn't named Nancy come from?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,=,2013-07-07 00:00:00),Employee.BirthDate,=,Nancy), Employee.Country),Employee.Country))", "score": -0.4368876811942364, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),filter(getData(Employee),Employee.FirstName,!=,Nancy),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee who made an invoice on 2013-07-07 at 00:00:00 and isn't named Nancy come from?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.BirthDate,=,2013-07-07 00:00:00),Employee.Country,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))", "score": -0.43746701388380327, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),filter(getData(Employee),Employee.FirstName,!=,Nancy),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee who made an invoice on 2013-07-07 at 00:00:00 and isn't named Nancy come from?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.BirthDate,=,2013-07-07 00:00:00),Invoice.InvoiceDate,=,2013-07-07 00:00:00), Employee.Country),Employee.Country))", "score": -0.44351142441101543, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),filter(getData(Employee),Employee.FirstName,!=,Nancy),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee who made an invoice on 2013-07-07 at 00:00:00 and isn't named Nancy come from?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.BirthDate,=,Nancy),Employee.BirthDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))", "score": -0.4497467917557643, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),filter(getData(Employee),Employee.FirstName,!=,Nancy),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee who made an invoice on 2013-07-07 at 00:00:00 and isn't named Nancy come from?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,=,2013-07-07 00:00:00),Employee.HireDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))", "score": -0.45200109335505334, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),filter(getData(Employee),Employee.FirstName,!=,Nancy),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee who made an invoice on 2013-07-07 at 00:00:00 and isn't named Nancy come from?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-07-07 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.CustomerId),Employee.BirthDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))", "score": -0.47323975053820533, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),filter(getData(Employee),Employee.FirstName,!=,Nancy),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 239, "beams": [{"orig_question": "What is the average total of distinct invoices of tracks with the genre R&B/Soul?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.14549628165508094, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of distinct invoices of tracks with the genre R&B/Soul?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.1797073161174889, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of distinct invoices of tracks with the genre R&B/Soul?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.20531384807541717, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of distinct invoices of tracks with the genre R&B/Soul?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21330706051245635, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of distinct invoices of tracks with the genre R&B/Soul?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23293066572144763, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of distinct invoices of tracks with the genre R&B/Soul?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23891359247038463, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of distinct invoices of tracks with the genre R&B/Soul?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2571340535497166, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of distinct invoices of tracks with the genre R&B/Soul?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),Track.TrackId,Invoice.InvoiceId),Genre.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2592022617822726, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of distinct invoices of tracks with the genre R&B/Soul?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)", "score": -0.2636868187727614, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of distinct invoices of tracks with the genre R&B/Soul?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),Track.TrackId,Invoice.InvoiceId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)", "score": -0.2940258066792293, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of distinct invoices of tracks with the genre R&B/Soul?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2973873268392278, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of distinct invoices of tracks with the genre R&B/Soul?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Genre.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2991884337594381, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of distinct invoices of tracks with the genre R&B/Soul?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.31712789939882013, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of distinct invoices of tracks with the genre R&B/Soul?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3202803089632144, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of distinct invoices of tracks with the genre R&B/Soul?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3215184521750605, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 240, "beams": [{"orig_question": "all albums", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.06499211413029116, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Track.Bytes),Album.Title))", "score": -0.39791587383660953, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.4282949251792161, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.5484605483169761, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.552006424011779, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.6109030893276213, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.6118396983384459, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.62095565108757, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.6513682567038759, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "sum(distinct(getData(Track), Album.Title),Album.Title)", "score": -0.6980694574249785, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,!=,None), Track.Bytes),Album.Title))", "score": -0.7612186848855345, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "sum(distinct(filter(getData(Album),Album.Title,!=,None), Album.Title),Album.Title)", "score": -0.7965522605170866, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "sum(distinct(getData(Album), Album.Title),Album.Title)", "score": -0.8086697309146207, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "sum(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title)", "score": -0.8609391290262918, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Track.Bytes))", "score": -0.8617019009107025, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 241, "beams": [{"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Album),Album.Title,=,Renato Russo - Marisa Monte),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3102683738973593, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Album),Album.Title,=,Renato Russo - Marisa Monte),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3120687525575682, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Album),Album.Title,=,Renato Russo - Marisa Monte),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.31460925256075545, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Album),Artist.Name,=,Renato Russo - Marisa Monte),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.32373986136856686, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Album),Artist.Name,=,Renato Russo - Marisa Monte),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3255402400287758, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Album),Artist.Name,=,Renato Russo - Marisa Monte),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3306119331335653, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Album),Album.Title,=,Renato Russo - Marisa Monte),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3384741245480907, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Renato Russo - Marisa Monte), Track.UnitPrice),Track.UnitPrice))", "score": -0.35309703872613507, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId),Album.Title,=,Renato Russo - Marisa Monte), Track.UnitPrice),Track.UnitPrice))", "score": -0.3536685671572557, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Album),Album.Title,=,Renato Russo - Marisa Monte),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.35393638467619853, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Album),Artist.Name,=,Renato Russo - Marisa Monte),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3544768051209005, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Album),Album.Title,=,Renato Russo - Marisa Monte),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.35573676333640747, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Album),Album.Title,=,Renato Russo - Marisa Monte),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.35595211924258296, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Album),Album.Title,=,Renato Russo - Marisa Monte),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3577524979027919, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Renato Russo - Marisa Monte), Track.UnitPrice),Track.UnitPrice))", "score": -0.3598168150341377, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 242, "beams": [{"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.10207996294135752, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.1617674153302242, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2131137759562246, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.25078188443829164, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Customer.Country))", "score": -0.2544630705253063, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Customer.City))", "score": -0.2555600222291432, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.25857737016620547, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.26205131883822413, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2983720222987231, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2997194273202912, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3194047111437246, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.32024117568587085, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(InvoiceLine),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.32661305604919416, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Customer.City))", "score": -0.34304396385040337, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Customer.Country))", "score": -0.34665133965698985, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 243, "beams": [{"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)", "score": -0.03241879327790006, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.6290679263792748, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),Customer.CustomerId,Invoice.InvoiceId),Customer.Address,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.7931887997182943, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),Customer.CustomerId,Invoice.InvoiceId),Customer.Address,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.7996687489971016, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.Address,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.817240276355556, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.InvoiceId),Customer.Address,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.8180909416871276, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.InvoiceId),Customer.Address,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.8245708909659349, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.Address,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.8270898025677963, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.Address,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.8295713996131721, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.Address,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.8302842502322891, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.Address,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.8360513488919794, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.8385637128870933, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.Address,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.840133777897259, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),Customer.CustomerId,Invoice.InvoiceId),Customer.Address,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.8522167872099077, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.Address,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.8544735604397069, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 244, "beams": [{"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NS), Invoice.BillingCity),Customer.City))", "score": -0.20277743431506678, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NS), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3032114917295985, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NS), Customer.City),Customer.City))", "score": -0.3092423045891337, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,=,NS), Invoice.BillingCity),Customer.City))", "score": -0.35157226788578555, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NS), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.3912096435087733, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NS), Customer.City),Invoice.BillingCity))", "score": -0.4096763620036654, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,=,NS), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.45200632530031726, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,=,NS), Customer.City),Customer.City))", "score": -0.4580371381598525, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NS), Employee.HireDate),Customer.City))", "score": -0.47408552112756297, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NS), Customer.City),InvoiceLine.Quantity))", "score": -0.4976745137828402, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.State,=,NS), Invoice.BillingCity),Customer.City))", "score": -0.5289238041150384, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,=,NS), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.5400044770794921, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.State,=,NS), Invoice.BillingCity),Customer.City))", "score": -0.5481998698669486, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,=,NS), Customer.City),Invoice.BillingCity))", "score": -0.5584711955743842, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,NS), Invoice.BillingCity),Customer.City))", "score": -0.5622449463116936, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 245, "beams": [{"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Genre),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.12337314174423036, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Genre),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.13521466249625738, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.19767168218118397, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.209513202933211, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.22508223240201253, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Employee),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.24837239489022897, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.26001178599575686, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Employee),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.260213915642256, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.310561236375256, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Artist),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.3106590534749907, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Artist),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.32250057422701767, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),Track.GenreId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.33431032643271047, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Genre),PlaylistTrack.TrackId,Track.AlbumId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.33456569101573064, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.3490792980941259, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Genre),PlaylistTrack.PlaylistId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.3987632974297652, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 246, "beams": [{"orig_question": "How much do the tracks cost with a bytes size above 11774865?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Bytes,<=,11774865), Track.TrackId),Track.UnitPrice)", "score": -0.2399986304837373, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How much do the tracks cost with a bytes size above 11774865?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Bytes,=,11774865), Track.TrackId),Track.UnitPrice)", "score": -0.2701073000532933, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How much do the tracks cost with a bytes size above 11774865?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Bytes,<=,11774865), Track.TrackId),Track.Bytes)", "score": -0.3111058688475844, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How much do the tracks cost with a bytes size above 11774865?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Bytes,>=,11774865), Track.TrackId),Track.UnitPrice)", "score": -0.3148274919047051, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How much do the tracks cost with a bytes size above 11774865?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Bytes,=,11774865), Track.TrackId),Track.Bytes)", "score": -0.3412145384171404, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How much do the tracks cost with a bytes size above 11774865?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Bytes,>=,11774865), Track.TrackId),Track.Bytes)", "score": -0.3859347302685522, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How much do the tracks cost with a bytes size above 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,11774865), Track.UnitPrice),Track.UnitPrice))", "score": -0.3893332449533773, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How much do the tracks cost with a bytes size above 11774865?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Track),Track.Bytes,=,11774865),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11774865), Track.TrackId),Track.UnitPrice)", "score": -0.49895340695558027, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How much do the tracks cost with a bytes size above 11774865?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Track),Track.Bytes,=,11774865),getData(Track),Track.TrackId,Track.TrackId),Track.Bytes,<=,11774865), Track.TrackId),Track.UnitPrice)", "score": -0.49934601697868175, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How much do the tracks cost with a bytes size above 11774865?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Track),Track.Bytes,=,11774865),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,=,11774865), Track.TrackId),Track.UnitPrice)", "score": -0.5227683091774271, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How much do the tracks cost with a bytes size above 11774865?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Track),Track.Bytes,=,11774865),getData(Track),Track.TrackId,Track.TrackId),Track.Bytes,=,11774865), Track.TrackId),Track.UnitPrice)", "score": -0.5231609192005285, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How much do the tracks cost with a bytes size above 11774865?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Track),Track.Bytes,=,11774865),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11774865), Track.TrackId),Track.UnitPrice)", "score": -0.5875110912065067, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How much do the tracks cost with a bytes size above 11774865?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Track),Track.Bytes,=,11774865),getData(InvoiceLine),Track.TrackId,Track.TrackId),Track.Bytes,<=,11774865), Track.TrackId),Track.UnitPrice)", "score": -0.5879039117916272, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How much do the tracks cost with a bytes size above 11774865?", "inferred_code": "sum(distinct(filter(merge(filter(getData(InvoiceLine),Track.Bytes,=,11774865),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11774865), Track.TrackId),Track.UnitPrice)", "score": -0.5890012533049901, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How much do the tracks cost with a bytes size above 11774865?", "inferred_code": "sum(distinct(filter(merge(filter(getData(InvoiceLine),Track.Bytes,=,11774865),getData(Track),Track.TrackId,Track.TrackId),Track.Bytes,<=,11774865), Track.TrackId),Track.UnitPrice)", "score": -0.5893938412925315, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 247, "beams": [{"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.12652076707471643, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21423755864750002, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24474111596213288, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24992000097232517, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.25895380776211413, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2622871742133551, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId),Genre.Name,=,Opera), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.28148045078821343, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)", "score": -0.29595322647906924, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera),getData(Invoice),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2962071503992621, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.30592519319080597, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3245096458980909, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.34667059933489774, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3500039657861387, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.35427810373479546, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.Total)", "score": -0.3550843543356795, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 248, "beams": [{"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Jane), Employee.City),Employee.City))", "score": -0.2656958646730345, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Jane), Employee.City),Employee.LastName))", "score": -0.2948551721528929, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Jane), Employee.City),Employee.Title))", "score": -0.3879865802482527, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Jane), Employee.City),Artist.Name))", "score": -0.4116993344978255, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Jane), Employee.City),Employee.City))", "score": -0.4444761819795531, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Jane), Employee.City),Employee.Fax))", "score": -0.4444944955066603, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Jane), Employee.LastName),Employee.City))", "score": -0.4574839308515948, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Jane), Employee.City),Employee.LastName))", "score": -0.4736354894594115, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Jane), Employee.LastName),Employee.LastName))", "score": -0.4866432383314532, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Jane), Employee.Title),Employee.City))", "score": -0.49812956001915154, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Jane), Employee.Title),Employee.LastName))", "score": -0.5272888674990099, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Jane), Employee.City),Album.ArtistId))", "score": -0.5524532593444746, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Jane), Employee.City),Employee.Title))", "score": -0.5667668975547713, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Jane), Employee.LastName),Employee.Title))", "score": -0.579774646426813, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,!=,Jane), Employee.City),Employee.City))", "score": -0.5852915592149657, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
