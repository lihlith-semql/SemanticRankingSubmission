{"index": 0, "beams": [{"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.Company),Customer.Company))", "score": -0.14103507888748387, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1), Customer.Company),Customer.Company))", "score": -0.17805008076631426, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,>=,1), Customer.Company),Customer.Company))", "score": -0.19885087453440065, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,1), Customer.Company),Customer.Company))", "score": -0.31074615250519516, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,<=,1), Customer.Company),Customer.Company))", "score": -0.34265914044577694, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,>=,1), Invoice.BillingCountry),Customer.Company))", "score": -0.37587512724712724, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.Company),Customer.Company))", "score": -0.4050317612237523, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.Company),Customer.City))", "score": -0.4136252402255751, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))", "score": -0.42646651259079665, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1), Customer.Company),Customer.Company))", "score": -0.4265758649567532, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.Address),Customer.Company))", "score": -0.43251919275161493, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,>=,1), Invoice.Total),Customer.Company))", "score": -0.44379390471294755, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1), Customer.Address),Customer.Company))", "score": -0.4438357648091625, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,>=,1), Customer.Company),Customer.Company))", "score": -0.44521405515611084, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}, {"orig_question": "What is the list of companies that have ordered one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.City,>=,1), Customer.Company),Customer.Company))", "score": -0.4539459951919318, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 1, "beams": [{"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.15396473080363648, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.18681779027429002, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.3083797422095813, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.34123280168023484, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.3451093015119113, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.37796236098256486, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.48422263831344026, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.5170756977840938, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Playlist.Name))", "score": -0.609432956096498, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Track.UnitPrice))", "score": -0.6124322022169508, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,11.94), Invoice.BillingState),Playlist.Name))", "score": -0.6422860155671515, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,11.94), Invoice.BillingState),Track.UnitPrice))", "score": -0.6452852616876044, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.665731030409006, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingAddress),Invoice.BillingState))", "score": -0.6867517988521286, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.6985840898796596, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 2, "beams": [{"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.16425825730594198, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.19106570123141964, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21786254749368292, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23147858456220133, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Invoice),Track.TrackId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23597347377897893, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24093909318946924, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.255980750044343, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.2564181794188603, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.2633284575666893, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.27409167632963904, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Invoice),Track.TrackId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.27452910570415634, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.27707681582720406, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.29453638196952037, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.29514153531772025, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3264845816822427, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 3, "beams": [{"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.06168748709621386, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.09345552572134343, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.21654248317483762, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),getData(Genre),PlaylistTrack.PlaylistId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2708866086783587, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.TrackId), Genre.Name),Genre.Name))", "score": -0.28149914332410986, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3027065232330041, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),getData(Genre),PlaylistTrack.TrackId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.3138381086158353, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.31860172468402637, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.32785014768111, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),getData(Track),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.35549233236606076, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3596856691748674, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.37784425721461984, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,Playlist.PlaylistId), Genre.Name),Genre.Name))", "score": -0.40368328505951706, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),getData(Artist),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.41114761812100964, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.42307372356905665, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 4, "beams": [{"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Country),Employee.Country))", "score": -0.26872020623704884, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,AB), Employee.Country),Employee.Country))", "score": -0.3171567287208745, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Country),Employee.Country))", "score": -0.3241520341398427, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.BirthDate),Employee.Country))", "score": -0.37189989200851414, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Country),Employee.BirthDate))", "score": -0.3929294984700391, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,AB), Employee.BirthDate),Employee.Country))", "score": -0.4203364144923398, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,AB), Employee.Country),Employee.Country))", "score": -0.42110991141817067, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.BirthDate),Employee.Country))", "score": -0.42733171991130803, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,AB), Employee.Country),Employee.BirthDate))", "score": -0.4413660209538648, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Country),Employee.BirthDate))", "score": -0.448361326372833, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.BirthDate),Employee.BirthDate))", "score": -0.4961091842415044, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,AB), Employee.BirthDate),Employee.Country))", "score": -0.524289597189636, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Country),Employee.HireDate))", "score": -0.5289838801982114, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,AB), Employee.BirthDate),Employee.BirthDate))", "score": -0.5445457067253301, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "When were employees with the employee state AB hired?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,AB), Employee.Country),Employee.BirthDate))", "score": -0.5453192036511609, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.HireDate),Employee.HireDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 5, "beams": [{"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))", "score": -0.08828351747797569, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Phone))", "score": -0.24987029012845596, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,5827 Bowness Road NW), Employee.Country),Employee.Country))", "score": -0.3666145457755192, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,5827 Bowness Road NW), Employee.Country),Employee.Country))", "score": -0.4184916271697148, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Fax))", "score": -0.4356805580537184, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,5827 Bowness Road NW), Employee.Country),Employee.Country))", "score": -0.5181241883765324, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,5827 Bowness Road NW), Employee.Country),Employee.Phone))", "score": -0.5282013184259995, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Fax),Employee.Country))", "score": -0.5335144252385362, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Address))", "score": -0.5422267216126784, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Phone),Employee.Country))", "score": -0.5542836041058763, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingAddress,=,5827 Bowness Road NW), Employee.Country),Employee.Country))", "score": -0.5544932140837773, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,5827 Bowness Road NW), Employee.Country),Employee.Phone))", "score": -0.580078399820195, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.State),Employee.Country))", "score": -0.6304840893353685, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,5827 Bowness Road NW), Employee.Country),Employee.Country))", "score": -0.6310390188227757, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee come from with the address 5827 Bowness Road NW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Milliseconds,=,5827 Bowness Road NW), Employee.Country),Employee.Country))", "score": -0.6311291410456761, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,5827 Bowness Road NW), Employee.Country),Employee.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 6, "beams": [{"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))", "score": -0.02888255204561574, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),MediaType.Name))", "score": -0.4572510059133492, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), MediaType.Name),Customer.FirstName))", "score": -0.4679444451958261, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.Email))", "score": -0.48501198842677695, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.Email),Customer.FirstName))", "score": -0.546477617803248, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Track.Name))", "score": -0.5909959907785378, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.LastName),Customer.FirstName))", "score": -0.5946119447380624, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.LastName))", "score": -0.6033867831483803, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.State),Customer.FirstName))", "score": -0.6113003512055002, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),MediaType.MediaTypeId))", "score": -0.6224119897142373, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))", "score": -0.6571536312021635, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Employee.LastName))", "score": -0.6676683659807168, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Employee.FirstName))", "score": -0.678213858152958, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Genre.GenreId))", "score": -0.7015690441385232, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Genre.Name))", "score": -0.7351680631891213, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 7, "beams": [{"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.13110801296756366, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes),Track.Name))", "score": -0.15342171330190504, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.20057912542621795, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes),Track.Name))", "score": -0.22185007450602895, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))", "score": -0.2536686945991747, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Album.Title))", "score": -0.272262258596483, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Name),Track.Name))", "score": -0.294506662520875, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Bytes))", "score": -0.3011101365331533, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),Track.Bytes),Track.Name))", "score": -0.3099786745704653, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes),Album.Title))", "score": -0.3196741516181674, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))", "score": -0.32313980705782896, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes),Track.Bytes))", "score": -0.33951395657001593, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Album.Title))", "score": -0.3417333710551373, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Name),Track.Name))", "score": -0.3639777749795293, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}, {"orig_question": "What is the longest track in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Bytes))", "score": -0.3705812489918076, "correct_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 8, "beams": [{"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.034604239691816474, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.3815319998607265, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.41460053757282367, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.Email),Employee.LastName))", "score": -0.45442645106913915, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Artist.Name,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.5040902359828578, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.Email))", "score": -0.5425066290840732, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.FirstName),Employee.LastName))", "score": -0.5763840213835465, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.FirstName))", "score": -0.6059881983742343, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.6392726166591274, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.City),Employee.LastName))", "score": -0.6530747548163163, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.656703041349374, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Artist.ArtistId))", "score": -0.6721358834251987, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Customer.LastName),Employee.LastName))", "score": -0.7429271474898087, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Album.ArtistId,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.7542480094775783, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.7580513222560512, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 9, "beams": [{"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,10317185), Playlist.Name),Playlist.Name))", "score": -0.12414245094445249, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,10317185),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.14393648444150578, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>,10317185), Playlist.Name),Playlist.Name))", "score": -0.18512369738667891, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>,10317185),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.18905863864220437, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<,10317185),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.23792848593044744, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,10317185), Playlist.Name),Playlist.Name))", "score": -0.2615078987102601, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))", "score": -0.2674938541594839, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<,10317185), Playlist.Name),Playlist.Name))", "score": -0.28076513282746846, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,10317185), Playlist.Name),Playlist.Name))", "score": -0.2948764234036066, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,10317185),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2968857542699419, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,10317185),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3016376272885991, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,10317185), Playlist.Name),Playlist.Name))", "score": -0.3224891451524865, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,<,10317185), Playlist.Name),Playlist.Name))", "score": -0.3380477757349562, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,10317185),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3467597814892977, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,>,10317185), Playlist.Name),Playlist.Name))", "score": -0.3521590663110943, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 10, "beams": [{"orig_question": "How many different billing addresses does the company JetBrains s.r.o., that communicates with our employees in Calgary, have ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Employee),Employee.City,=,Calgary),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.1118353968071922, "correct_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Company,=,JetBrains s.r.o.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Calgary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "How many different billing addresses does the company JetBrains s.r.o., that communicates with our employees in Calgary, have ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Employee),Employee.LastName,=,Calgary),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.19188834579825859, "correct_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Company,=,JetBrains s.r.o.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Calgary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "How many different billing addresses does the company JetBrains s.r.o., that communicates with our employees in Calgary, have ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Employee),Employee.Fax,=,Calgary),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.26388579530908146, "correct_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Company,=,JetBrains s.r.o.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Calgary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "How many different billing addresses does the company JetBrains s.r.o., that communicates with our employees in Calgary, have ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Employee),Employee.City,=,Calgary),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Employee.Address),Invoice.BillingAddress))", "score": -0.29495593866010944, "correct_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Company,=,JetBrains s.r.o.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Calgary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "How many different billing addresses does the company JetBrains s.r.o., that communicates with our employees in Calgary, have ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Employee),Artist.Name,=,Calgary),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3058230408786955, "correct_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Company,=,JetBrains s.r.o.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Calgary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "How many different billing addresses does the company JetBrains s.r.o., that communicates with our employees in Calgary, have ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Employee),Employee.City,=,Calgary),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.33871648571411633, "correct_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Company,=,JetBrains s.r.o.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Calgary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "How many different billing addresses does the company JetBrains s.r.o., that communicates with our employees in Calgary, have ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Employee),Employee.City,=,Calgary),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Customer.Address),Invoice.BillingAddress))", "score": -0.34144981536473373, "correct_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Company,=,JetBrains s.r.o.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Calgary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "How many different billing addresses does the company JetBrains s.r.o., that communicates with our employees in Calgary, have ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Employee),Employee.Title,=,Calgary),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.36494590488785006, "correct_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Company,=,JetBrains s.r.o.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Calgary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "How many different billing addresses does the company JetBrains s.r.o., that communicates with our employees in Calgary, have ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Employee),Employee.City,=,Calgary),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Track.AlbumId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3741591825912982, "correct_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Company,=,JetBrains s.r.o.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Calgary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "How many different billing addresses does the company JetBrains s.r.o., that communicates with our employees in Calgary, have ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Employee),Employee.LastName,=,JetBrains s.r.o.),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Employee.Address),Invoice.BillingAddress))", "score": -0.37500888765117585, "correct_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Company,=,JetBrains s.r.o.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Calgary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "How many different billing addresses does the company JetBrains s.r.o., that communicates with our employees in Calgary, have ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Employee),Employee.City,=,Calgary),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingState),Invoice.BillingAddress))", "score": -0.37754033708689894, "correct_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Company,=,JetBrains s.r.o.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Calgary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "How many different billing addresses does the company JetBrains s.r.o., that communicates with our employees in Calgary, have ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Employee),Employee.City,=,Calgary),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.Total),Invoice.BillingAddress))", "score": -0.38275907477704063, "correct_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Company,=,JetBrains s.r.o.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Calgary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "How many different billing addresses does the company JetBrains s.r.o., that communicates with our employees in Calgary, have ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Employee),Employee.City,=,Calgary),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.40477482053561237, "correct_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Company,=,JetBrains s.r.o.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Calgary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "How many different billing addresses does the company JetBrains s.r.o., that communicates with our employees in Calgary, have ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Employee),Employee.City,=,Calgary),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingAddress),Invoice.Total))", "score": -0.4355695234241684, "correct_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Company,=,JetBrains s.r.o.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Calgary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "How many different billing addresses does the company JetBrains s.r.o., that communicates with our employees in Calgary, have ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Employee),Employee.City,=,Calgary),merge(getData(Customer),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.445916801017757, "correct_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Company,=,JetBrains s.r.o.),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Calgary), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 11, "beams": [{"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),getData(Invoice),Customer.CustomerId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24380214446902185, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27753949372635944, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2792956361912753, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceDate),Invoice.Total)", "score": -0.295279522914266, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3019160596522813, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),getData(Invoice),Customer.CustomerId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceDate),Invoice.Total)", "score": -0.30252961949185114, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.30882964341477304, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.31408153227983243, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.31751086389759, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceDate),Invoice.Total)", "score": -0.317899946375272, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceDate),Invoice.Total)", "score": -0.33006541900282316, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceDate),Invoice.Total)", "score": -0.3334947506205807, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.Total),Invoice.Total)", "score": -0.3337528749259794, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.33670195574083844, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoice total from the 90\u2019s Music playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.340131287358596, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 12, "beams": [{"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.23141810258528073, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.24775017784140846, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.24815535439300831, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2530139041728456, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Customer),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.25607266682692126, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.257250013763888, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Invoice),Customer.CustomerId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2650620562550802, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.26625040990665516, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2697511559805732, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Customer),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2745728988921679, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2757502458291347, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.FirstName,=,Fernanda),merge(getData(Customer),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.27669430066002926, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(InvoiceLine),Customer.CustomerId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2817993234145284, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.FirstName,=,Fernanda),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.28451273089264456, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Invoice),Customer.CustomerId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.28665787319436575, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 13, "beams": [{"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.1281599994017597, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Customer.Country))", "score": -0.14858508810539206, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Customer.Country),Invoice.BillingCountry))", "score": -0.3398995339139219, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Customer.Country),Customer.Country))", "score": -0.36032462261755427, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,MA),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.45914601767263147, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,MA),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.4597070153799799, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5503503191484924, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,MA),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.5541452658582974, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,MA),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.5547062635656458, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,MA), Invoice.BillingCountry),Customer.Country))", "score": -0.5707754078521248, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,MA),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingCountry),Customer.Country))", "score": -0.6054786028061553, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,MA),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingCountry),Customer.Country))", "score": -0.6060396005135037, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6405587601675506, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Customer.Phone))", "score": -0.6467394898845669, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries with the state MA did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,=,MA), Invoice.BillingCountry),Customer.Country))", "score": -0.660983848871183, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,MA), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 14, "beams": [{"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,U2), Track.Bytes),Track.Bytes))", "score": -0.006818502075475408, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,U2), Track.Bytes),Track.Bytes))", "score": -0.5701260448950052, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,U2), Track.Bytes),Album.Title))", "score": -0.5794975549033552, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,U2), Track.UnitPrice),Track.Bytes))", "score": -0.6624961884044751, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,U2), Track.Bytes),Track.Bytes))", "score": -0.6957068325536966, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,U2), Track.Bytes),Track.Name))", "score": -0.7876220732978254, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,U2), Track.Bytes),Track.UnitPrice))", "score": -0.7999425917914778, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,U2), Track.Composer),Track.Bytes))", "score": -0.8371959717296704, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Title,=,U2), Track.Bytes),Track.Bytes))", "score": -0.8402364136236429, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,U2), Track.Bytes),Track.Bytes))", "score": -0.8692563654440164, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,U2), Track.Name),Track.Bytes))", "score": -0.8747702629589185, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,U2), Album.Title),Track.Bytes))", "score": -0.8769485743068799, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Artist.Name,=,U2), Track.Bytes),Track.Bytes))", "score": -0.9238768102186441, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Playlist.Name,=,U2), Track.Bytes),Track.Bytes))", "score": -0.9361817719000101, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,U2), Track.Bytes),Employee.Email))", "score": -0.9559514313987165, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 15, "beams": [{"orig_question": "What is the average amount on an order of tracks by the Scholars Baroque Ensemble?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Scholars Baroque Ensemble), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.12674009790348859, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on an order of tracks by the Scholars Baroque Ensemble?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Scholars Baroque Ensemble), Track.TrackId),Invoice.Total)", "score": -0.1321692885525969, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on an order of tracks by the Scholars Baroque Ensemble?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Track.TrackId),Invoice.Total)", "score": -0.13414152816253377, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on an order of tracks by the Scholars Baroque Ensemble?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.16224093702256587, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on an order of tracks by the Scholars Baroque Ensemble?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Track.TrackId),Invoice.Total)", "score": -0.16398168192147644, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on an order of tracks by the Scholars Baroque Ensemble?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Scholars Baroque Ensemble), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2016320798129468, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on an order of tracks by the Scholars Baroque Ensemble?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.20994294987491924, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on an order of tracks by the Scholars Baroque Ensemble?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Scholars Baroque Ensemble), Invoice.InvoiceId),Invoice.Total)", "score": -0.21418168538999774, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on an order of tracks by the Scholars Baroque Ensemble?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21515277021065765, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on an order of tracks by the Scholars Baroque Ensemble?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Scholars Baroque Ensemble), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.22369480399803807, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on an order of tracks by the Scholars Baroque Ensemble?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Track.TrackId),Invoice.Total)", "score": -0.22488881129605984, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on an order of tracks by the Scholars Baroque Ensemble?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Scholars Baroque Ensemble), Track.TrackId),Invoice.Total)", "score": -0.2395463019583323, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on an order of tracks by the Scholars Baroque Ensemble?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2549045103154184, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on an order of tracks by the Scholars Baroque Ensemble?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Scholars Baroque Ensemble), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2556690627728228, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount on an order of tracks by the Scholars Baroque Ensemble?", "inferred_code": "avg(distinct(merge(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Scholars Baroque Ensemble),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.26274710178697447, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Scholars Baroque Ensemble), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 16, "beams": [{"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.10577415256820075, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.19252133803179391, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.19803868467955948, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.20421724491522505, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2078257183603323, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2105651592654646, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.24149150755930468, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.24577548056477178, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.24952178498715125, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2540585667499175, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2618162497158136, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2708297117209507, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2793232786899908, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.27986008687611974, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(Track),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2883852155474627, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 17, "beams": [{"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.Country),Customer.Country))", "score": -0.030673208633743343, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.PostalCode,=,21000), Customer.Country),Customer.Country))", "score": -0.4123149514070974, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingPostalCode,=,21000), Customer.Country),Customer.Country))", "score": -0.47374695538201195, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.Country),Invoice.BillingCountry))", "score": -0.5033423583827243, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.Country),Customer.Fax))", "score": -0.5408714692912326, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.PostalCode,=,21000), Customer.Country),Customer.Country))", "score": -0.5508588116954343, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.PostalCode,=,21000), Customer.Country),Customer.Country))", "score": -0.6159941714595334, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,21000), Customer.Country),Customer.Country))", "score": -0.6386171579233633, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.Country),Customer.Phone))", "score": -0.6426016967616306, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Artist.Name,=,21000), Customer.Country),Customer.Country))", "score": -0.6653801202646719, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.Country),Employee.Country))", "score": -0.67995670250275, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Invoice.BillingCountry),Customer.Country))", "score": -0.7021361854731367, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,21000), Customer.Fax),Customer.Country))", "score": -0.7663893368899153, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,21000), Customer.Country),Customer.Country))", "score": -0.7931143045298086, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which distinct countries is the postal code 21000?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,21000), Customer.Country),Customer.Country))", "score": -0.8080052733293996, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,21000), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 18, "beams": [{"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.12444477130648701, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.1492872947400134, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),MediaType.MediaTypeId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.16360513768563642, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Genre.GenreId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.19516136380225704, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Artist.ArtistId,Track.AlbumId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.22484406483704522, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2261009218637661, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.23677658120615158, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.24210196457652475, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2496865882705716, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Album.AlbumId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.26161910463967797, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),MediaType.MediaTypeId,Track.AlbumId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2640044312161946, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),MediaType.MediaTypeId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.275936963043506, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,The Black Crowes),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.27705421467838864, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Artist.ArtistId,Album.ArtistId),Genre.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2829039836655175, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.30846059960988964, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 19, "beams": [{"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Invoice),Track.MediaTypeId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.23820190512003553, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.MediaTypeId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.24176344558092971, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.26037477968023665, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),InvoiceLine.InvoiceId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.26393632014113083, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.29483860609932483, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Comedy), MediaType.Name),MediaType.Name))", "score": -0.2963573416567303, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),Track.MediaTypeId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.2998732779749763, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Invoice),Track.MediaTypeId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3085199869636826, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.MediaTypeId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3120815274245768, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Invoice),Track.MediaTypeId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3146736266991073, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Invoice),Track.MediaTypeId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),Invoice.BillingState))", "score": -0.3151578488822843, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.31697389387524366, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),InvoiceLine.InvoiceId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.31701148065952595, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.MediaTypeId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3182350697264667, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.MediaTypeId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),Invoice.BillingState))", "score": -0.3187193893431785, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 20, "beams": [{"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.HireDate,=,Fort Worth), Employee.State),Employee.State))", "score": -0.32745407627589884, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,Fort Worth), Employee.State),Employee.State))", "score": -0.3437101777053613, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Fort Worth), Employee.State),Employee.State))", "score": -0.3955026279545564, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Country,=,Fort Worth), Employee.State),Employee.State))", "score": -0.4117587293840188, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.HireDate,=,Fort Worth), Customer.State),Employee.State))", "score": -0.42570494966275874, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Fort Worth), Employee.State),Employee.State))", "score": -0.4381520758724946, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,Fort Worth), Customer.State),Employee.State))", "score": -0.44196105109222117, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.State,=,Fort Worth), Employee.State),Employee.State))", "score": -0.45440817730195704, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Country,=,Fort Worth), Employee.State),Employee.State))", "score": -0.46374362813003245, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Fort Worth), Employee.State),Employee.State))", "score": -0.4799997295594949, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,Fort Worth), Employee.State),Employee.State))", "score": -0.4846743951893586, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Fort Worth), Customer.State),Employee.State))", "score": -0.49375350134141627, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Fort Worth), Employee.State),Employee.State))", "score": -0.5009305059320468, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Country,=,Fort Worth), Customer.State),Employee.State))", "score": -0.5100096120841044, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.State,=,Fort Worth), Employee.State),Employee.State))", "score": -0.5190425618893642, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 21, "beams": [{"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.037628716329078174, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.21731372837756643, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.22927526703966172, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.Milliseconds)", "score": -0.2378721218788989, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2486692992036534, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.25803527419671696, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2649256530085092, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada), Track.TrackId),Track.Milliseconds)", "score": -0.26516672750656156, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.26592913766467097, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Album.ArtistId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2762832244484189, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Fax,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2784112620616088, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.BirthDate,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.27851871423978497, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.State,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2822176724603826, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Customer.CustomerId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2837611849383691, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Customer),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2856895948915288, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 22, "beams": [{"orig_question": "Are there no billing countries of sold tracks whose media types is Protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.09340830751478925, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there no billing countries of sold tracks whose media types is Protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.12979511156552354, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there no billing countries of sold tracks whose media types is Protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2045074379285089, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there no billing countries of sold tracks whose media types is Protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.22877693367190657, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there no billing countries of sold tracks whose media types is Protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2538536140945238, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there no billing countries of sold tracks whose media types is Protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.25616018064794827, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there no billing countries of sold tracks whose media types is Protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2702610874713506, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there no billing countries of sold tracks whose media types is Protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2736366123505423, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there no billing countries of sold tracks whose media types is Protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2781315585537471, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there no billing countries of sold tracks whose media types is Protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),Track.TrackId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2902430831679407, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there no billing countries of sold tracks whose media types is Protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),Track.TrackId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.29254964972136516, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there no billing countries of sold tracks whose media types is Protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3060137890728055, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there no billing countries of sold tracks whose media types is Protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(Invoice),Track.TrackId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.31361257833713174, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there no billing countries of sold tracks whose media types is Protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.32334741010768403, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there no billing countries of sold tracks whose media types is Protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3282373503633297, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 23, "beams": [{"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,>,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.3331358267726532, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),MediaType.Name))", "score": -0.34420962060369625, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.3442571914655756, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,>,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),MediaType.Name))", "score": -0.35011930133201374, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,>,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),MediaType.Name))", "score": -0.356586429718138, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),MediaType.Name))", "score": -0.36702329109497267, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,1.99), Invoice.Total),Invoice.Total))", "score": -0.3833532368046127, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<=,1.99), Invoice.Total),Invoice.Total))", "score": -0.3859682704342521, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,>,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),MediaType.Name))", "score": -0.3919662025655539, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,1.99), Invoice.Total),Invoice.BillingAddress))", "score": -0.39224148360150934, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.3940928937123668, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<=,1.99), Invoice.Total),Invoice.BillingAddress))", "score": -0.39485651723114873, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,1.99), Invoice.Total),Invoice.Total))", "score": -0.4110250820640229, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,1.99), Invoice.Total),MediaType.Name))", "score": -0.41288323513202246, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<=,1.99), Invoice.Total),Invoice.Total))", "score": -0.41364011569366227, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 24, "beams": [{"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197), Playlist.Name),Playlist.Name))", "score": -0.05147120278539271, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.17287638759997878, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197), Track.UnitPrice),Playlist.Name))", "score": -0.3818385046076555, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197), Playlist.Name),Playlist.Name))", "score": -0.3904063867351185, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197),Track.Name,=,254197), Playlist.Name),Playlist.Name))", "score": -0.399804517936182, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.Name),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197), Playlist.Name),Playlist.Name))", "score": -0.4062638313100282, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197), Playlist.Name),Track.UnitPrice))", "score": -0.41842511207770366, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(PlaylistTrack),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197), Playlist.Name),Playlist.Name))", "score": -0.43754591900967066, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,254197),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.44277193649451546, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197),getData(PlaylistTrack),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.4442113557746323, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,254197), Playlist.Name),Playlist.Name))", "score": -0.44541678243478594, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,PlaylistTrack.TrackId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197), Playlist.Name),Playlist.Name))", "score": -0.44826118504261286, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Track.UnitPrice),Playlist.Name))", "score": -0.4487221039317617, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,254197),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.45813736418715945, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197), Playlist.Name),Playlist.PlaylistId))", "score": -0.4649295147990746, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 25, "beams": [{"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.05852491209952859, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.3304815300307382, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)", "score": -0.4640909416078738, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.TrackId),Track.Bytes)", "score": -0.4721513338418904, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.5808770128973721, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.5809150974891963, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.68112986534544, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Track.Composer,=,Ralph Vaughan Williams),getData(Track),Track.TrackId,Track.TrackId),getData(Track),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.6815514022343171, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Track.Composer,=,Ralph Vaughan Williams),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.6901789453366765, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.694972638382751, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Track.Composer,=,Ralph Vaughan Williams),getData(Track),Track.TrackId,Track.TrackId),getData(Track),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.6971662578696908, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.UnitPrice),Track.Bytes))", "score": -0.7051716792557272, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Track.Composer,=,Ralph Vaughan Williams),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.7057936781922994, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Track.Composer,=,Ralph Vaughan Williams),getData(Track),Track.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.7107519680089951, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.UnitPrice))", "score": -0.7347014709303039, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 26, "beams": [{"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.07490978356791439, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.10194711385535118, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.1580182464305227, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected MPEG-4 video file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.18777741619558716, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2800068174157225, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2929389688945442, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.2972507894940755, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3014923127440637, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3030792916484846, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3188811072100906, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3253714246063937, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected MPEG-4 video file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.33481643439474795, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3437208874747148, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),Invoice.Total)", "score": -0.35883312889168895, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4346815823343822, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 27, "beams": [{"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.11845317725465065, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Customer.State))", "score": -0.20993354414031273, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.3501529531590677, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.41359691191837555, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Employee.State))", "score": -0.4298192659430242, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,25.86), Invoice.BillingState),Customer.State))", "score": -0.44163332004472977, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Customer.Country))", "score": -0.4706116119436956, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Playlist.Name))", "score": -0.4993996420912481, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,25.86), Invoice.BillingState),Customer.State))", "score": -0.5050772788040376, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Customer.State),Invoice.BillingState))", "score": -0.5423287279941178, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.5972613520957566, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.6118157343976236, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Track.UnitPrice))", "score": -0.6181134382300115, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Customer.State),Customer.State))", "score": -0.6338090948797799, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Customer.Address))", "score": -0.6559632817320562, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 28, "beams": [{"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.07997015035471122, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.26860335013589065, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.36451045713147323, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3656944139929692, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5041667098515336, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.50668319869864, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,2012-10-06 00:00:00),getData(Invoice),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.5080844421333666, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.HireDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5121161147089879, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Customer.SupportRepId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5169314832151096, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.5175070389803504, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.528205601598529, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.528884280879243, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.InvoiceDate,>=,2012-10-06 00:00:00),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.536157373028837, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.5388686103525554, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Customer.Country))", "score": -0.5657248227926175, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 29, "beams": [{"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.10039330889412668, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.23121595998236444, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.2598218979401281, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-10-01 00:00:00), Invoice.BillingState),Playlist.Name))", "score": -0.43118049633631017, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-10-01 00:00:00), Invoice.BillingState),Customer.State))", "score": -0.46742697489389684, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.4877169938845327, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-10-01 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.4974422646773746, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.529324061339139, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,2013-10-01 00:00:00), Invoice.BillingState),Playlist.Name))", "score": -0.5620031474245479, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,2013-10-01 00:00:00), Invoice.BillingState),Playlist.Name))", "score": -0.5906090853823116, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,2013-10-01 00:00:00), Invoice.BillingState),Customer.State))", "score": -0.5982496259821346, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.HireDate,=,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.6106712730688741, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,2013-10-01 00:00:00), Invoice.BillingState),Customer.State))", "score": -0.6268555639398983, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,2013-10-01 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.6282649157656124, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states were invoices sent since 1st of october 2013?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-10-01 00:00:00), Invoice.BillingState),Track.UnitPrice))", "score": -0.6545003844512394, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-10-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 30, "beams": [{"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.014786604802894003, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.7201674161037497, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Customer.PostalCode))", "score": -0.8086763224086535, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Employee.PostalCode))", "score": -0.838996321080623, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Genre.Name))", "score": -0.92824020694007, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Employee.LastName))", "score": -0.9466251955115692, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Genre), Artist.Name),Artist.Name))", "score": -0.9527001155682127, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Employee.Fax))", "score": -0.956871252594865, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Customer.Fax))", "score": -0.9714349000989466, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Employee.LastName),Artist.Name))", "score": -1.0901098239819618, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -1.1082276312522834, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -1.1218730674568065, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Customer.LastName))", "score": -1.1676093903399376, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.ArtistId),Artist.Name))", "score": -1.2050037857884113, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -1.2103521223871323, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 31, "beams": [{"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Aisha Duo),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.12291714123282288, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Aisha Duo),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.1546485903287129, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1586360763414756, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Aisha Duo),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1655985775505237, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Aisha Duo), Invoice.InvoiceId),Invoice.Total)", "score": -0.17813989826774865, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.17881660725016107, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Aisha Duo),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.19174374956581328, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Aisha Duo),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.AlbumId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21227288251867232, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Aisha Duo),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2244550150486015, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Aisha Duo),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2344251858835141, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Aisha Duo), Invoice.InvoiceId),Invoice.Total)", "score": -0.2509927062367721, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Aisha Duo),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.AlbumId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25495431883637315, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Aisha Duo),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25966844010550094, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.26166016137875187, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2644708619434129, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 32, "beams": [{"orig_question": "Can I find information about the genre of tracks associated to the billing address 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingAddress,=,3 Chatham Street), Track.Name),Track.Name))", "score": -0.20962652732519624, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Genre.Name))"}, {"orig_question": "Can I find information about the genre of tracks associated to the billing address 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Track.Name))", "score": -0.21996640723697106, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Genre.Name))"}, {"orig_question": "Can I find information about the genre of tracks associated to the billing address 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Track.Name),Track.Name))", "score": -0.26220713080540436, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Genre.Name))"}, {"orig_question": "Can I find information about the genre of tracks associated to the billing address 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Track.Name))", "score": -0.2725470107171792, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Genre.Name))"}, {"orig_question": "Can I find information about the genre of tracks associated to the billing address 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,3 Chatham Street), Track.Name),Track.Name))", "score": -0.28302752326305064, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Genre.Name))"}, {"orig_question": "Can I find information about the genre of tracks associated to the billing address 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingAddress,=,3 Chatham Street), Track.Name),Track.Name))", "score": -0.2904136083924979, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Genre.Name))"}, {"orig_question": "Can I find information about the genre of tracks associated to the billing address 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Track.Name))", "score": -0.2933674031748254, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Genre.Name))"}, {"orig_question": "Can I find information about the genre of tracks associated to the billing address 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingAddress,=,3 Chatham Street), Track.Name),Track.Name))", "score": -0.29909285189245977, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Genre.Name))"}, {"orig_question": "Can I find information about the genre of tracks associated to the billing address 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Track.Name))", "score": -0.30075348830427273, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Genre.Name))"}, {"orig_question": "Can I find information about the genre of tracks associated to the billing address 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingAddress,=,3 Chatham Street), Track.Name),Track.Name))", "score": -0.30478083268642636, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Genre.Name))"}, {"orig_question": "Can I find information about the genre of tracks associated to the billing address 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Track.Name))", "score": -0.3094327318042346, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Genre.Name))"}, {"orig_question": "Can I find information about the genre of tracks associated to the billing address 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Track.Name))", "score": -0.3151207236735555, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Genre.Name))"}, {"orig_question": "Can I find information about the genre of tracks associated to the billing address 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Track.Name))", "score": -0.3178224833287899, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Genre.Name))"}, {"orig_question": "Can I find information about the genre of tracks associated to the billing address 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingAddress,=,3 Chatham Street), Track.Name),Genre.Name))", "score": -0.32921646223715606, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Genre.Name))"}, {"orig_question": "Can I find information about the genre of tracks associated to the billing address 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Track.Name),Track.Name))", "score": -0.3356081378186131, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3 Chatham Street), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 33, "beams": [{"orig_question": "From which Genre is the artist Os Mutantes?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,!=,Os Mutantes), Genre.Name),Genre.Name))", "score": -0.18900490236410405, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Os Mutantes), Genre.Name),Genre.Name))"}, {"orig_question": "From which Genre is the artist Os Mutantes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Track.AlbumId),Artist.Name,!=,Os Mutantes), Genre.Name),Genre.Name))", "score": -0.22386726660532322, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Os Mutantes), Genre.Name),Genre.Name))"}, {"orig_question": "From which Genre is the artist Os Mutantes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Os Mutantes), Genre.Name),Genre.Name))", "score": -0.23874942399290833, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Os Mutantes), Genre.Name),Genre.Name))"}, {"orig_question": "From which Genre is the artist Os Mutantes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Genre),Track.GenreId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Os Mutantes), Genre.Name),Genre.Name))", "score": -0.2602100793866597, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Os Mutantes), Genre.Name),Genre.Name))"}, {"orig_question": "From which Genre is the artist Os Mutantes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Artist.ArtistId),Artist.Name,!=,Os Mutantes), Genre.Name),Genre.Name))", "score": -0.2646225060603878, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Os Mutantes), Genre.Name),Genre.Name))"}, {"orig_question": "From which Genre is the artist Os Mutantes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Os Mutantes),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.3015114965099885, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Os Mutantes), Genre.Name),Genre.Name))"}, {"orig_question": "From which Genre is the artist Os Mutantes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Track.GenreId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Os Mutantes), Genre.Name),Genre.Name))", "score": -0.30156076976129426, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Os Mutantes), Genre.Name),Genre.Name))"}, {"orig_question": "From which Genre is the artist Os Mutantes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Genre),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Os Mutantes), Genre.Name),Genre.Name))", "score": -0.30346371055987015, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Os Mutantes), Genre.Name),Genre.Name))"}, {"orig_question": "From which Genre is the artist Os Mutantes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Genre),Track.GenreId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Os Mutantes), Genre.Name),Genre.Name))", "score": -0.3344479800436352, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Os Mutantes), Genre.Name),Genre.Name))"}, {"orig_question": "From which Genre is the artist Os Mutantes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Os Mutantes), Genre.Name),Genre.Name))", "score": -0.3448144009345048, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Os Mutantes), Genre.Name),Genre.Name))"}, {"orig_question": "From which Genre is the artist Os Mutantes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Os Mutantes), Genre.Name),Genre.Name))", "score": -0.35691920833205576, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Os Mutantes), Genre.Name),Genre.Name))"}, {"orig_question": "From which Genre is the artist Os Mutantes?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,!=,Os Mutantes), Employee.FirstName),Genre.Name))", "score": -0.35790491905936506, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Os Mutantes), Genre.Name),Genre.Name))"}, {"orig_question": "From which Genre is the artist Os Mutantes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Track.AlbumId),Artist.Name,!=,Os Mutantes), Genre.Name),Genre.Name))", "score": -0.3581007441339553, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Os Mutantes), Genre.Name),Genre.Name))"}, {"orig_question": "From which Genre is the artist Os Mutantes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Album.ArtistId,Track.AlbumId),Artist.Name,!=,Os Mutantes), Genre.Name),Genre.Name))", "score": -0.37096449572402684, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Os Mutantes), Genre.Name),Genre.Name))"}, {"orig_question": "From which Genre is the artist Os Mutantes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Os Mutantes), Genre.Name),Genre.Name))", "score": -0.37298290152154046, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Os Mutantes), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 34, "beams": [{"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.15424171876838955, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.22703823488882335, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.26310931187799724, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3594577167623356, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.HireDate,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.42541824322870525, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4367282245748356, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,>,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4705111081220821, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Address,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.47774569731882366, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4922706935994938, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.538069293319495, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,>,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5433076242425159, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Title,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5572327230565861, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5793787491948024, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.PostalCode,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5953045822188869, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were sales made to another address than 1600 Amphitheatre Parkway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.6024450319328025, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,1600 Amphitheatre Parkway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 35, "beams": [{"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Album.Title),Customer.Company))", "score": -0.39540247889857355, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.City),Customer.Company))", "score": -0.4032379451442782, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Album.Title),InvoiceLine.Quantity))", "score": -0.5260543016993322, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.City),InvoiceLine.Quantity))", "score": -0.5338897679450368, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Album.Title),Customer.PostalCode))", "score": -0.5650577956583492, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.City),Customer.PostalCode))", "score": -0.5728932619040539, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Album.Title),Customer.City))", "score": -0.5971945595815217, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -0.6050300258272264, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))", "score": -0.6272847389886449, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Invoice.BillingCity),Customer.Company))", "score": -0.6378841546633622, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Company))", "score": -0.6436878090083928, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.Company))", "score": -0.6487399053126878, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), InvoiceLine.Quantity),Customer.Company))", "score": -0.6918632320357634, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Customer.Company))", "score": -0.7466448734313458, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Customer.City),Customer.Company))", "score": -0.7544803396770504, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 36, "beams": [{"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,When It's Love), Track.Name),Track.Name))", "score": -0.06843413845126634, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Name),Track.Name))", "score": -0.2511509923679114, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,When It's Love), Track.Name),Track.Name))", "score": -0.3760538218957663, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Playlist.Name,=,When It's Love), Track.Name),Track.Name))", "score": -0.4149657009584189, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,When It's Love), Track.Name),Track.UnitPrice))", "score": -0.43745149638925795, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,When It's Love), Track.UnitPrice),Track.Name))", "score": -0.5171597801563621, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,When It's Love), Track.Name),Track.Name))", "score": -0.5679360447866202, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,When It's Love), Track.Name),Track.Name))", "score": -0.5911536632520438, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,When It's Love), Track.Composer),Track.Name))", "score": -0.6002333365795494, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Name),Track.UnitPrice))", "score": -0.620168350305903, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,When It's Love), Track.Name),Track.Bytes))", "score": -0.6302911486891389, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,When It's Love), Track.Bytes),Track.Name))", "score": -0.6347416840908409, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,When It's Love), Track.Name),Track.Milliseconds))", "score": -0.6420368399885774, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,When It's Love), Track.Milliseconds),Track.Name))", "score": -0.6629271708843589, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.InvoiceDate,=,When It's Love), Track.Name),Track.Name))", "score": -0.6877873359662772, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 37, "beams": [{"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,robert@chinookcorp.com), Employee.Title),Employee.Title))", "score": -0.26853247310509687, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,robert@chinookcorp.com), Employee.Title),Employee.LastName))", "score": -0.2993338289438725, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,robert@chinookcorp.com), Employee.Title),Employee.Title))", "score": -0.3853590595304013, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,robert@chinookcorp.com), Employee.Title),Employee.City))", "score": -0.3927626940189839, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,robert@chinookcorp.com), Employee.Title),Employee.LastName))", "score": -0.4161604153691769, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,robert@chinookcorp.com), Employee.Title),Employee.Title))", "score": -0.43474290843596464, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,robert@chinookcorp.com), Employee.Title),Track.Milliseconds))", "score": -0.46409163202633863, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,robert@chinookcorp.com), Employee.Title),Employee.LastName))", "score": -0.46554426427474027, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,robert@chinookcorp.com), Employee.Title),Employee.City))", "score": -0.5095892804442883, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Milliseconds,=,robert@chinookcorp.com), Employee.Title),Employee.Title))", "score": -0.5253109442769528, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,robert@chinookcorp.com), Employee.City),Employee.Title))", "score": -0.5328796650051117, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,robert@chinookcorp.com), Employee.LastName),Employee.Title))", "score": -0.5344664598583222, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,robert@chinookcorp.com), Employee.Title),Employee.PostalCode))", "score": -0.5397777291714192, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Milliseconds,=,robert@chinookcorp.com), Employee.Title),Employee.LastName))", "score": -0.5561123001157284, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}, {"orig_question": "What title does the employee with the mail address robert@chinookcorp.com have?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,robert@chinookcorp.com), Employee.Title),Employee.City))", "score": -0.5589731293498517, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,robert@chinookcorp.com), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 38, "beams": [{"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova), MediaType.Name),InvoiceLine.Quantity))", "score": -0.2587741265921336, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), MediaType.Name),InvoiceLine.Quantity))", "score": -0.2598357795538445, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),InvoiceLine.Quantity))", "score": -0.2674927362871094, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,!=,Bossa Nova),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova), MediaType.Name),InvoiceLine.Quantity))", "score": -0.2681607435555836, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,!=,Bossa Nova),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova), Track.UnitPrice),InvoiceLine.Quantity))", "score": -0.26835618798249167, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova), Track.UnitPrice),InvoiceLine.Quantity))", "score": -0.27766352850480525, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),InvoiceLine.Quantity))", "score": -0.286798896962404, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,!=,Bossa Nova),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova), MediaType.Name),InvoiceLine.Quantity))", "score": -0.2869356774522057, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,!=,Bossa Nova),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova), Track.UnitPrice),InvoiceLine.Quantity))", "score": -0.28713112187911377, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),InvoiceLine.Quantity))", "score": -0.3024864155705905, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.30964386249065806, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),MediaType.Name))", "score": -0.31387418104676174, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),MediaType.Name))", "score": -0.31730081922392295, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),InvoiceLine.Quantity))", "score": -0.3192217888160261, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3295616996549482, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 39, "beams": [{"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))", "score": -0.13101796328245388, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.FirstName))", "score": -0.5207486383102554, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))", "score": -0.5425983116428964, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Artist.ArtistId))", "score": -0.5833831854335211, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Employee.LastName))", "score": -0.5908601616516017, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.LastName))", "score": -0.622319134396486, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.PostalCode))", "score": -0.6396678565642928, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Company))", "score": -0.7046007344900733, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Album.Title))", "score": -0.7075203243263666, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.LastName))", "score": -0.7220393998795488, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),MediaType.MediaTypeId))", "score": -0.7372121562619773, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Album.Title),Customer.LastName))", "score": -0.7816741488714175, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Email))", "score": -0.7830181978317214, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Fax))", "score": -0.7917584546976859, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Genre.GenreId))", "score": -0.8090375003497873, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 40, "beams": [{"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Hermeto Pascoal),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),Invoice.Total))", "score": -0.20624324418894083, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Hermeto Pascoal),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),InvoiceLine.Quantity))", "score": -0.2192046024736317, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Hermeto Pascoal),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),Invoice.Total))", "score": -0.2333795615167162, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Hermeto Pascoal),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),Customer.City))", "score": -0.23510704446976038, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Hermeto Pascoal), Track.UnitPrice),Invoice.Total))", "score": -0.23521430433798202, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId),Artist.Name,=,Hermeto Pascoal), Track.UnitPrice),Invoice.Total))", "score": -0.2371701745622114, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Hermeto Pascoal),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),Customer.City))", "score": -0.24534328405841122, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Hermeto Pascoal),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),InvoiceLine.Quantity))", "score": -0.2459402438423568, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Hermeto Pascoal), Track.UnitPrice),InvoiceLine.Quantity))", "score": -0.24647913549355158, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId),Artist.Name,=,Hermeto Pascoal), Track.UnitPrice),InvoiceLine.Quantity))", "score": -0.24843500571778096, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Hermeto Pascoal), Invoice.Total),Invoice.Total))", "score": -0.2524091778834602, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId),Artist.Name,=,Hermeto Pascoal), Invoice.Total),Invoice.Total))", "score": -0.2543650481076896, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.26290976684834194, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Hermeto Pascoal), Invoice.Total),InvoiceLine.Quantity))", "score": -0.26367400903902977, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId),Artist.Name,=,Hermeto Pascoal), Invoice.Total),InvoiceLine.Quantity))", "score": -0.26562987926325915, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 41, "beams": [{"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,QC), Customer.Country),Customer.Country))", "score": -0.041122404178167926, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.State,=,QC), Customer.Country),Customer.Country))", "score": -0.41793379305818235, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,QC), Customer.Country),Customer.Country))", "score": -0.4464177501104132, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.State,=,QC), Customer.Country),Customer.Country))", "score": -0.4535799913755909, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,QC), Customer.Country),Customer.Country))", "score": -0.46846124648072873, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,=,QC), Customer.Country),Customer.Country))", "score": -0.5404327803007618, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,QC), Invoice.BillingCountry),Customer.Country))", "score": -0.5420710856742517, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,QC), Customer.Country),Invoice.BillingCountry))", "score": -0.5608440505056933, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,QC), Customer.Country),Customer.Country))", "score": -0.5874099147222296, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,QC), Customer.Company),Customer.Country))", "score": -0.5991652424163476, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,QC), Customer.State),Customer.Country))", "score": -0.6018950755424157, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),InvoiceLine.UnitPrice,=,QC), Customer.Country),Customer.Country))", "score": -0.6164900076291815, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,QC), Customer.Country),Customer.Fax))", "score": -0.6699892149954394, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,QC), Customer.Country),Customer.Company))", "score": -0.6716987954168872, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,QC), Customer.Country),Customer.Phone))", "score": -0.6843865381270007, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 42, "beams": [{"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.14964638560286403, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Artist.Name))", "score": -0.1794434553312385, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Album.Title))", "score": -0.3358017718719566, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Customer.City))", "score": -0.3447337067054832, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.4529630346523845, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Calle Lira, 198), Invoice.BillingCity),Artist.Name))", "score": -0.482760104380759, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Employee.City))", "score": -0.49034678100815654, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5150408549534404, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5258444948422039, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Track.Composer))", "score": -0.5293338215278709, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Calle Lira, 198), Invoice.BillingCity),Artist.Name))", "score": -0.5448379246818149, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,Calle Lira, 198), Invoice.BillingCity),Artist.Name))", "score": -0.5556415645705783, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5870594783054912, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Customer.Fax))", "score": -0.5970726525711143, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.6074384367393577, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 43, "beams": [{"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.Milliseconds),Artist.Name))", "score": -0.2101085947928322, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.Milliseconds),Artist.Name))", "score": -0.24277337208913283, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.Milliseconds),Artist.Name))", "score": -0.24888700311543316, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes),Artist.Name))", "score": -0.2776376024153853, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.Bytes),Artist.Name))", "score": -0.2813219557342197, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.Milliseconds),Album.Title))", "score": -0.29663719934702965, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(merge(filter(getData(Artist),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes),Artist.Name))", "score": -0.30554261328800425, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Artist.Name))", "score": -0.306978612718267, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes),Artist.Name))", "score": -0.30978545748439323, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.Bytes),Artist.Name))", "score": -0.3139867330305203, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.Bytes),Artist.Name))", "score": -0.32010036405682063, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.Milliseconds),Album.Title))", "score": -0.3293019766433303, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(merge(filter(getData(Artist),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Artist.Name))", "score": -0.3348836235908859, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),Track.Milliseconds),Album.Title))", "score": -0.3354156076696306, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Who is the artist that performs the longest track composed by Izzy Stradlin'/W. Axl Rose?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Artist.Name))", "score": -0.3391264677872749, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Izzy Stradlin'/W. Axl Rose),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 44, "beams": [{"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.028330319637092403, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.14647435768055445, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.1849513634970563, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2218874024963404, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2996293833806305, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli), MediaType.Name),MediaType.Name))", "score": -0.3085185502591131, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3096592604775821, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.31368236005091743, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.31570626262752305, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3326687922049888, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.MediaTypeId))", "score": -0.33880575524437756, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.3621267562539166, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),Customer.Company))", "score": -0.36290934275015946, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Album.Title,=,Cl\u00c3\u00a1udio Zoli),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.36774828638849344, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types used for tracks on an album by the artist Cl\u00c3\u00a1udio Zoli?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Track.AlbumId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.37212348705044224, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Cl\u00c3\u00a1udio Zoli),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 45, "beams": [{"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.09711103686347441, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Rotten Apples: Greatest Hits),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.1545093938181423, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Album.Title,=,Rotten Apples: Greatest Hits),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.17526972148853992, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Rotten Apples: Greatest Hits),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.20973192117835424, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,Rotten Apples: Greatest Hits), Genre.Name),Genre.Name))", "score": -0.26521324962935733, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Rotten Apples: Greatest Hits),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.27957765085170216, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Rotten Apples: Greatest Hits),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2873719756276816, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.31736501185089244, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,Rotten Apples: Greatest Hits), Genre.Name),Genre.Name))", "score": -0.3263613972310588, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),merge(getData(Album),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3289055483780741, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,Rotten Apples: Greatest Hits),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3333166313598563, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Album.Title,=,Rotten Apples: Greatest Hits), Genre.Name),Genre.Name))", "score": -0.34281838029379513, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,=,Rotten Apples: Greatest Hits), Genre.Name),Genre.Name))", "score": -0.35457267709178586, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,Rotten Apples: Greatest Hits), Genre.Name),Genre.Name))", "score": -0.3586618175209087, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "how many different genres appear in the album Rotten Apples: Greatest Hits?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Album),getData(Album),Album.AlbumId,Track.AlbumId),Album.Title,=,Rotten Apples: Greatest Hits),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3665733695151297, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Rotten Apples: Greatest Hits),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 46, "beams": [{"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,235598), Track.Name),Album.Title))", "score": -0.07990486560629506, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Album.Title))", "score": -0.1940206439630856, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,235598), Album.Title),Album.Title))", "score": -0.3771836181567778, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,235598), Track.Name),Track.Name))", "score": -0.3855849123956432, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,235598), Track.Name),Album.Title))", "score": -0.3999886961119046, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Album.Title),Album.Title))", "score": -0.49129939651356835, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))", "score": -0.49970069075243373, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,235598), Track.Bytes),Album.Title))", "score": -0.6621032377170195, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Track.Milliseconds,!=,235598), Track.Name),Album.Title))", "score": -0.6764964668709581, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,235598), Track.Name),Album.Title))", "score": -0.6822767706053128, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,235598), Album.Title),Track.Name))", "score": -0.6828636649461259, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,235598), Album.Title),Album.Title))", "score": -0.6972674486623873, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,235598), Track.Name),Track.Bytes))", "score": -0.7034338034154644, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,235598), Track.Name),Track.Name))", "score": -0.7056687429012527, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}, {"orig_question": "What tracks last more than 235598 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Genre),Track.Milliseconds,!=,235598), Track.Name),Album.Title))", "score": -0.7496455519158189, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,235598), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 47, "beams": [{"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Argentina), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.060569236472474586, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.43009419780992175, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Argentina), Invoice.Total),Invoice.BillingAddress))", "score": -0.44496162277482654, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Argentina),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4665636654744488, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Argentina),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.46991437215971804, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Argentina), Invoice.BillingState),Invoice.BillingAddress))", "score": -0.48808653694413806, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Argentina),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4991020286765301, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Argentina), Invoice.BillingAddress),Customer.Address))", "score": -0.5015659280570617, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Argentina),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5024527353617994, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Argentina), Invoice.BillingAddress),Invoice.Total))", "score": -0.5129052944930663, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Argentina), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5196760450007787, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Argentina), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5259536152689179, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingCity,=,Argentina),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5309717240066963, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingCity,=,Argentina),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5343224306919656, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which BillingPostalCode were invoices sent for orders from Argentina? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Argentina),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Customer.Address))", "score": -0.5378163638593134, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 48, "beams": [{"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jamiroquai),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.1837742498483489, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jamiroquai),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.22483941934771579, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jamiroquai),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2295004413626492, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jamiroquai),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2615548710489455, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.2687591527590366, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jamiroquai),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.27804674070804847, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jamiroquai),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3026200405483124, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jamiroquai),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3029721634692726, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jamiroquai),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.303294220649867, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.30586765902839974, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jamiroquai),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3062899345947652, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jamiroquai),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.31337377228670055, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Album.AlbumId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.3173554019524234, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),InvoiceLine.TrackId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.3182119432747556, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Album.AlbumId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.3544639082217865, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 49, "beams": [{"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))", "score": -0.025381055636898964, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.Country),Customer.State))", "score": -0.4477296927707357, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.Country))", "score": -0.47427507860084006, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Employee.State))", "score": -0.5873436890306039, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.Address))", "score": -0.5940549932183785, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), InvoiceLine.UnitPrice),Customer.State))", "score": -0.6143503645198507, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))", "score": -0.6145366683831526, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.FirstName))", "score": -0.6235243640603585, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.FirstName),Customer.State))", "score": -0.6260996917026205, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),InvoiceLine.UnitPrice))", "score": -0.6292596421899361, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.Address),Customer.State))", "score": -0.6399032929675741, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,+55 (11) 3033-4564), Customer.State),Customer.State))", "score": -0.6468612805238081, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Invoice.BillingState))", "score": -0.6578508578004403, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Employee.State),Customer.State))", "score": -0.6687214234607382, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}, {"orig_question": "What are the distinct states of the customer with the fax number +55 (11) 3033-4564 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,+55 (11) 3033-4564), Customer.State),Customer.State))", "score": -0.7097031727662397, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (11) 3033-4564), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 50, "beams": [{"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.10985085446144581, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,>,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.11762893846665808, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,!=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.16142671208616366, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Smith, Toby), Invoice.BillingCity),Track.Composer))", "score": -0.250974472305526, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,>,Smith, Toby), Invoice.BillingCity),Track.Composer))", "score": -0.2587525563107383, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.27722778268288584, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.31603836901924315, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,!=,Smith, Toby), Invoice.BillingCity),Track.Composer))", "score": -0.3308220125583666, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Smith, Toby), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.33853877532862225, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Smith, Toby), Invoice.BillingCity),Artist.Name))", "score": -0.3447115221661461, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,>,Smith, Toby), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.34631685933383455, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,>,Smith, Toby), Invoice.BillingCity),Artist.Name))", "score": -0.3524896061713584, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,!=,Smith, Toby), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.37583643457251437, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,!=,Smith, Toby), Invoice.BillingCity),Artist.Name))", "score": -0.40013570879098626, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Smith, Toby), Invoice.BillingCity),Customer.City))", "score": -0.41616196435719877, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 51, "beams": [{"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,The Final Concerts (Disc 2)),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.20241120995177508, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))", "score": -0.21976111576149265, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))", "score": -0.22405945191317136, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))", "score": -0.2569116064840156, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))", "score": -0.26120994263569436, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))", "score": -0.2671350667013103, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))", "score": -0.3042855574238333, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,The Final Concerts (Disc 2)),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.31927558876818274, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Genre.Name,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))", "score": -0.31943278791159435, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Genre.Name,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))", "score": -0.3237311240632731, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,The Final Concerts (Disc 2)),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3436280335476787, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Track.AlbumId),Artist.Name,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))", "score": -0.35261752429734255, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Track.AlbumId),Artist.Name,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))", "score": -0.3569158604490213, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))", "score": -0.36017551221627625, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}, {"orig_question": "From which genre is the album The Final Concerts (Disc 2)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Genre.Name,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))", "score": -0.366806738851412, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,=,The Final Concerts (Disc 2)), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 52, "beams": [{"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Hungary), Invoice.Total),Invoice.Total))", "score": -0.21020230774320225, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Hungary), Invoice.Total),Invoice.BillingAddress))", "score": -0.23375949386991124, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Hungary), Invoice.BillingAddress),Invoice.Total))", "score": -0.23883459095395665, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.26239177708066563, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,Hungary), Invoice.Total),Invoice.Total))", "score": -0.4747473982397423, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,>=,Hungary), Invoice.Total),Invoice.Total))", "score": -0.4806911659661637, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,Hungary), Invoice.Total),Invoice.BillingAddress))", "score": -0.4983045843664513, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,Hungary), Invoice.BillingAddress),Invoice.Total))", "score": -0.5033796814504967, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,>=,Hungary), Invoice.Total),Invoice.BillingAddress))", "score": -0.5042483520928727, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,>=,Hungary), Invoice.BillingAddress),Invoice.Total))", "score": -0.5093234491769181, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5269368675772057, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.Total),Invoice.Total))", "score": -0.5316448000494347, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,>=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5328806353036271, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.Total),Invoice.BillingAddress))", "score": -0.5552019861761437, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the invoice addresses for invoices to Hungary?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.Total))", "score": -0.5602770832601891, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Hungary), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 53, "beams": [{"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Tribute),getData(Track),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.154293209751876, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,Tribute),getData(Track),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.1844449614442434, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Tribute),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.1896140952698505, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,Tribute),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.21976584696221793, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Tribute),getData(Track),Album.AlbumId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.25075462954090966, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Tribute),getData(Track),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Customer.State))", "score": -0.2609265144417185, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Tribute),getData(Track),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.2678255797404203, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,Tribute),getData(Track),Album.AlbumId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.2809063812332771, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Tribute),getData(Album),Album.AlbumId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.2860755150588842, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Tribute),getData(Track),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.2887575520440397, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,Tribute),getData(Track),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Customer.State))", "score": -0.29107826613408594, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Tribute),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Customer.State))", "score": -0.296247399959693, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,Tribute),getData(Track),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.29797733143278776, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Tribute),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.30314646525839484, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To how many distinct states have tracks appearing in the album Tribute been sold?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,Tribute),getData(Album),Album.AlbumId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.31622726675125157, "correct_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Tribute),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 54, "beams": [{"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.09214038414302195, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Finland), Invoice.Total),Invoice.Total))", "score": -0.15735507023873652, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.4313113113248619, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.45775300463083113, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,Finland), Invoice.Total),Invoice.Total))", "score": -0.49652599742057646, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Finland), Invoice.Total),Invoice.Total))", "score": -0.5229676907265457, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.6372129937017235, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,>,Finland), Invoice.Total),Invoice.Total))", "score": -0.6426780076080831, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))", "score": -0.702427679797438, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.7254773994291099, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Finland), Invoice.Total),InvoiceLine.Quantity))", "score": -0.7415687061229619, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Finland), Invoice.Total),Track.UnitPrice))", "score": -0.7645426608005437, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.7673906107747825, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,!=,Finland), Invoice.Total),Invoice.Total))", "score": -0.7906920855248245, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Finland), Invoice.Total),InvoiceLine.Quantity))", "score": -0.8067833922186765, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 55, "beams": [{"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,=,Pop),Track.Bytes),Album.Title))", "score": -0.08493727977770135, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.GenreId),Track.Name,=,Pop),Track.Bytes),Album.Title))", "score": -0.2539758111709538, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Pop),Track.Bytes),Album.Title))", "score": -0.270481105833437, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Album.ArtistId,Album.AlbumId),Track.Name,=,Pop),Track.Bytes),Album.Title))", "score": -0.2739422227259318, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Name,=,Pop),Track.Bytes),Album.Title))", "score": -0.28455208232210183, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Track.AlbumId,Album.AlbumId),Track.Name,=,Pop),Track.Bytes),Album.Title))", "score": -0.29058544285440285, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,=,Pop),Track.Bytes),Album.Title))", "score": -0.29139952625217797, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.GenreId),Track.Name,=,Pop),Track.Bytes),Album.Title))", "score": -0.3129120155885248, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Artist.ArtistId),Track.Name,=,Pop),Track.Bytes),Album.Title))", "score": -0.3129724120622205, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.GenreId),Track.Name,=,Pop),Track.Bytes),Album.Title))", "score": -0.31422326001264544, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Name,=,Pop),Track.Bytes),Album.Title))", "score": -0.3447995311637934, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Name,=,Pop),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.35239028811102713, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,=,Pop),Track.Bytes),Album.Title))", "score": -0.36497659222002393, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,=,Pop),Track.Bytes),Album.Title))", "score": -0.37104487005109527, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.41376498485348306, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 56, "beams": [{"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))", "score": -0.31642941486643394, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.Fax))", "score": -0.346430041907297, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.PostalCode))", "score": -0.34876541149424156, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.Company))", "score": -0.35659223151014885, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,=,1), Customer.PostalCode),Customer.LastName))", "score": -0.4108988429288729, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,=,1), Customer.Fax),Customer.LastName))", "score": -0.4286417300681933, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,=,1), Customer.PostalCode),Customer.Fax))", "score": -0.44089946996973595, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))", "score": -0.44260839117713385, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,=,1), Customer.PostalCode),Customer.PostalCode))", "score": -0.4432348395566805, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))", "score": -0.4493725442148297, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,=,1), Customer.PostalCode),Customer.Company))", "score": -0.4510616595725878, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.Fax))", "score": -0.4576432289692459, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.Fax))", "score": -0.46440738200694176, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.Company))", "score": -0.46876724396694425, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.PostalCode))", "score": -0.4689117020284233, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 57, "beams": [{"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))", "score": -0.07799344211798598, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,AB), Invoice.Total),Invoice.Total))", "score": -0.19733208119851042, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.BillingAddress),Invoice.Total))", "score": -0.4601164374498694, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.BillingState),Invoice.Total))", "score": -0.4793117556719153, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.BillingAddress))", "score": -0.5297325829042165, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.InvoiceDate),Invoice.Total))", "score": -0.5781178686765998, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,AB), Invoice.BillingAddress),Invoice.Total))", "score": -0.5794550765303939, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Customer.Address))", "score": -0.581647096015331, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),InvoiceLine.Quantity))", "score": -0.5971721986306875, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,AB), Invoice.BillingState),Invoice.Total))", "score": -0.5986503947524398, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.BillingCity))", "score": -0.6096015552056997, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.BillingCountry),Invoice.Total))", "score": -0.6128009174017279, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.BillingCountry))", "score": -0.641914544440624, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,AB), Invoice.Total),Invoice.BillingAddress))", "score": -0.649071221984741, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,=,AB), Invoice.Total),Invoice.Total))", "score": -0.6765178840605586, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 58, "beams": [{"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))", "score": -0.05734059480892029, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Phone))", "score": -0.21579597784148064, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.PostalCode))", "score": -0.5199615646706661, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Phone),Employee.Address))", "score": -0.5301261850254377, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Title))", "score": -0.5336820770608028, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Invoice.BillingAddress))", "score": -0.5416686822281918, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.FirstName),Employee.Address))", "score": -0.5710543104069075, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,T2P 5M5), Employee.Address),Employee.Address))", "score": -0.5987271912017604, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Title),Employee.Address))", "score": -0.6019630142109236, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Artist.Name,=,T2P 5M5), Employee.Address),Employee.Address))", "score": -0.6331057197967311, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.PostalCode),Employee.Address))", "score": -0.6467145391361555, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.FirstName))", "score": -0.6468159843789181, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Phone),Employee.Phone))", "score": -0.6885815680579981, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.State),Employee.Address))", "score": -0.6897884317295393, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}, {"orig_question": "What are the distinct addresses of employees with the postal code T2P 5M5?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.State))", "score": -0.7176409055100521, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 59, "beams": [{"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.16059872919172224, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))", "score": -0.16953308461818384, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.2319897897630477, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))", "score": -0.24092414518950928, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.2820372049769043, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId), Customer.PostalCode),Customer.PostalCode))", "score": -0.2909715604033659, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.29808108586509274, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,0.99),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.30257931365174057, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.31070397141906986, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,0.99),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))", "score": -0.31151366907820216, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,0.99),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))", "score": -0.32266415380796554, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))", "score": -0.34026138528509947, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.3534282555804109, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Customer.PostalCode),Customer.PostalCode))", "score": -0.3623626110068725, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.36241810905360705, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 60, "beams": [{"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.007666726134083219, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.9291395301542122, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -0.9391626460708024, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.Fax))", "score": -0.9545597967045152, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.LastName))", "score": -0.9658915077979158, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.9925214664117737, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -1.0431863563720556, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.PostalCode))", "score": -1.0629465447899848, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.City))", "score": -1.1422471283020836, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Track.Composer))", "score": -1.194383072735718, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -1.2417927499873973, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -1.2992463398890324, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Employee.City),Artist.Name))", "score": -1.3301575813527695, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.AlbumId))", "score": -1.3317515409315446, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Customer.Fax))", "score": -1.342046780857212, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 61, "beams": [{"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,IT Manager),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22382800500293912, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Employee.Title,!=,IT Manager), Invoice.InvoiceId),Invoice.Total)", "score": -0.2313562905149299, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,IT Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2322309209567241, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,IT Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24875480800344466, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Employee.Title,!=,IT Manager), Track.TrackId),Invoice.Total)", "score": -0.2526567921392939, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,IT Manager),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25918838174335285, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,!=,IT Manager), Invoice.InvoiceId),Invoice.Total)", "score": -0.26101782011867325, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Employee.Title,!=,IT Manager), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2741551439053281, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,IT Manager),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27790632206543764, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Employee.Title,!=,IT Manager), Invoice.InvoiceId),Invoice.Total)", "score": -0.27834872748010125, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,!=,IT Manager), Track.TrackId),Invoice.Total)", "score": -0.2823183217430372, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,IT Manager),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2826380547714396, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.BirthDate,!=,IT Manager),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2850371023491752, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,!=,IT Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28561753955087416, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId),Employee.Title,!=,IT Manager), Invoice.InvoiceId),Invoice.Total)", "score": -0.28617209610563993, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 62, "beams": [{"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Christopher O'Riley), Track.TrackId),Track.UnitPrice)", "score": -0.025338691412991613, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Christopher O'Riley), Track.TrackId),Track.Milliseconds)", "score": -0.2369575347936446, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Christopher O'Riley), Track.TrackId),Track.Bytes)", "score": -0.29374698844571406, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Christopher O'Riley),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.3063046826516365, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Christopher O'Riley), Track.TrackId),Track.UnitPrice)", "score": -0.30782483097175356, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.32159958762135965, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Christopher O'Riley), Track.TrackId),Track.UnitPrice)", "score": -0.3796522831301201, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Christopher O'Riley), Track.TrackId),Track.UnitPrice)", "score": -0.3995231846736646, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Album.ArtistId),Artist.Name,!=,Christopher O'Riley), Track.TrackId),Track.UnitPrice)", "score": -0.4154567256436704, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.42024036263286685, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Christopher O'Riley), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.42253246447926107, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Christopher O'Riley),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.4329681480299255, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Christopher O'Riley), Track.TrackId),Track.Milliseconds)", "score": -0.4543144563203647, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Christopher O'Riley), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.4651847557142403, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Artist),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Christopher O'Riley), Track.TrackId),Track.UnitPrice)", "score": -0.46840559034147194, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 63, "beams": [{"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.10672093682028147, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.13522377465966187, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.27750420512612806, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.2775197962860953, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Artist.Name,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.2860291947974036, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.2953831230255934, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.29692413896552744, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.29701614414894245, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Employee.Title,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.3284002959456781, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Employee.Title,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.3382275700794287, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId),Track.Composer,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.34184364170046033, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.34414953545399235, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Employee.City,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.3717166429740342, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Album.Title,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.37575918575640244, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.38093056098477973, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 64, "beams": [{"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.0869921295420056, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.1377255177076258, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.15459377636740723, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.17388931702048036, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.17894715937438416, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,<=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.22852459061970473, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,<=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24539284927948615, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24783975182012608, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.26596300689952207, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.26640826813503177, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27078015043362413, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.27785603418548405, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.28017048461039473, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.28032488062090877, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks appearing in the playlist Music?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music), Invoice.InvoiceId),Invoice.Total)", "score": -0.28197505846857795, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 65, "beams": [{"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.03462390433105611, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.2303408963516631, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.39899736474308156, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Playlist.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.5872175676659026, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Genre.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.625546215279428, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.649588762028543, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.BillingAddress,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.7823069078758635, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),PlaylistTrack.TrackId,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.8144156319931426, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),MediaType.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.8579741699531951, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Title,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.9353842122391143, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.9372078719052297, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.Bytes),Track.UnitPrice))", "score": -0.9809718524948039, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.GenreId,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -0.9837624413803496, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.Bytes))", "score": -0.987018043032549, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track \"For the Greater Good of God\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))", "score": -1.0109303576782622, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,For the Greater Good of God), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 66, "beams": [{"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.2173244011519273, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,>=,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.22463788361528714, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.3226304230211099, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.Total,>=,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.3299439054844697, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.35303955794552166, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,>,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.3603530404088815, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.HireDate,>=,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.40541531414964993, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.41272879661300976, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.45834557981470425, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.Total,>,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.4656590622780641, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.BirthDate,>=,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.4806327995775064, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.4879462820408662, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.InvoiceDate,>=,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.5022761480813642, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.HireDate,>,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.5411304863100668, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the postal codes of employees that support customers which have had an invoice after 2009-02-02 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2009-02-02 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.5484439687734266, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-02-02 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 67, "beams": [{"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.11027858510634347, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,0.99),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.17698807624237692, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.1983184688308653, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.22708544517762072, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,0.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2390426072287037, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<,0.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2495050470113942, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.26386088951844444, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2851912821069328, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.296309494371745, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.30677193415443543, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<,0.99),getData(Invoice),Track.TrackId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3181871853130593, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,0.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.31827438805465547, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<,0.99),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.33312085500424277, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.34093582358858654, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses did we sell tracks with a higher unit price than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,<,0.99),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3449836188893776, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 68, "beams": [{"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)", "score": -0.0695474141356738, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),Track.Milliseconds)", "score": -0.35983145645077835, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),Track.Bytes,>=,8557447),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.46498168950049434, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Bytes,>=,8557447),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.4779427971740689, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Bytes,>=,8557447),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.48007528465643173, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(filter(getData(InvoiceLine),Track.Bytes,>=,8557447),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.48050429241777814, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(filter(getData(InvoiceLine),Track.Bytes,>=,8557447),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.4832794797211467, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Bytes,>=,8557447),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.5431942924956129, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Bytes,>=,8557447),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.5443654086150552, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(filter(getData(InvoiceLine),Track.Bytes,>=,8557447),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.5457557877393222, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Bytes,>=,8557447),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.5467082682437565, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(filter(getData(InvoiceLine),Track.Bytes,>=,8557447),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.5492697968052965, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),Track.Bytes,>=,8557447),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.5502653403622878, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Bytes,>=,8557447),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.5728242044555135, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Composer,>=,8557447), Track.TrackId),Track.Milliseconds)", "score": -0.5967963068690609, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 69, "beams": [{"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))", "score": -0.23409140673811635, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.FirstName),Employee.LastName))", "score": -0.3637306821101447, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Composer,=,IT Manager), Employee.LastName),Employee.LastName))", "score": -0.376557467555358, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Track.Name))", "score": -0.381716860508277, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.Email),Employee.LastName))", "score": -0.3835936915629645, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Track.Name),Employee.LastName))", "score": -0.38396054325039586, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))", "score": -0.4500324558966895, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Composer,=,IT Manager), Employee.FirstName),Employee.LastName))", "score": -0.5061967429273864, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.FirstName),Track.Name))", "score": -0.5113561358803054, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Composer,=,IT Manager), Employee.LastName),Track.Name))", "score": -0.5241829213255187, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Composer,=,IT Manager), Employee.Email),Employee.LastName))", "score": -0.5260597523802062, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Composer,=,IT Manager), Track.Name),Employee.LastName))", "score": -0.5264266040676375, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.Email),Track.Name))", "score": -0.5312191453331252, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Track.Name),Track.Name))", "score": -0.5315859970205565, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the Last name of the IT Manager ", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))", "score": -0.5534910094493171, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 70, "beams": [{"orig_question": "How much revenue did the album Bach: Goldberg Variations generate?", "inferred_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Bach: Goldberg Variations), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.21918914694363217, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the album Bach: Goldberg Variations generate?", "inferred_code": "sum(distinct(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.22274925640223167, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the album Bach: Goldberg Variations generate?", "inferred_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,=,Bach: Goldberg Variations), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.25498626891189485, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the album Bach: Goldberg Variations generate?", "inferred_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Bach: Goldberg Variations), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2571387901934351, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the album Bach: Goldberg Variations generate?", "inferred_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,=,Bach: Goldberg Variations), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.29293591216169784, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the album Bach: Goldberg Variations generate?", "inferred_code": "sum(distinct(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3213277991732214, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the album Bach: Goldberg Variations generate?", "inferred_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Bach: Goldberg Variations), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3436363930191166, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the album Bach: Goldberg Variations generate?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Album.Title,=,Bach: Goldberg Variations),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.34629678267226954, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the album Bach: Goldberg Variations generate?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations), Track.UnitPrice),Track.UnitPrice))", "score": -0.357575803898726, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the album Bach: Goldberg Variations generate?", "inferred_code": "sum(distinct(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.35934739909246066, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the album Bach: Goldberg Variations generate?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.36376121139746725, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the album Bach: Goldberg Variations generate?", "inferred_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,=,Bach: Goldberg Variations), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3794335149873793, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the album Bach: Goldberg Variations generate?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Bach: Goldberg Variations), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.38407395553432755, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the album Bach: Goldberg Variations generate?", "inferred_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Bach: Goldberg Variations), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.40883184406311945, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue did the album Bach: Goldberg Variations generate?", "inferred_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.Composer,=,Bach: Goldberg Variations), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.41563414736068083, "correct_code": "sum(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Bach: Goldberg Variations),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 71, "beams": [{"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.16944375174849954, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,=,Electronica/Dance), MediaType.Name),MediaType.Name))", "score": -0.1811478488470538, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,<=,Electronica/Dance),Genre.GenreId,Track.GenreId),Genre.Name,=,Electronica/Dance), MediaType.Name),MediaType.Name))", "score": -0.24932773013718476, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Track.Milliseconds),MediaType.Name))", "score": -0.27923869293828085, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,=,Electronica/Dance),Genre.GenreId,Track.GenreId),Genre.Name,=,Electronica/Dance), MediaType.Name),MediaType.Name))", "score": -0.28834821076400013, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice,<=,Electronica/Dance),Genre.GenreId,Track.GenreId),Genre.Name,=,Electronica/Dance), MediaType.Name),MediaType.Name))", "score": -0.3044429989288551, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.Title,=,Electronica/Dance), MediaType.Name),MediaType.Name))", "score": -0.3099471778894692, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice,=,Electronica/Dance), MediaType.Name),MediaType.Name))", "score": -0.33637483395879086, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.UnitPrice,=,Electronica/Dance), MediaType.Name),MediaType.Name))", "score": -0.3379309123806014, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice,=,Electronica/Dance),Genre.GenreId,Track.GenreId),Genre.Name,=,Electronica/Dance), MediaType.Name),MediaType.Name))", "score": -0.3434634795556705, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,<=,Electronica/Dance),Genre.GenreId,Track.GenreId),Track.Name,=,Electronica/Dance), MediaType.Name),MediaType.Name))", "score": -0.35054830030015083, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,<=,Electronica/Dance),Genre.GenreId,Track.GenreId),Genre.Name,=,Electronica/Dance), Track.UnitPrice),MediaType.Name))", "score": -0.3524452131787059, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Genre.Name,=,Electronica/Dance),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.36063410853088784, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId), Track.Name),MediaType.Name))", "score": -0.37133352490114524, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What is the media type of the track with the least bytes from the genre Electronica/Dance?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.37243187394062666, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Electronica/Dance),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 72, "beams": [{"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2297534236996864, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.24303254316314013, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(MediaType),Track.MediaTypeId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.24336203938433024, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.MediaTypeId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.256641158847784, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.27309992393394894, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),Track.MediaTypeId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2867085396185928, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3126002935053072, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.3193402459068911, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.3326193653703448, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(MediaType),Track.MediaTypeId,Invoice.InvoiceId), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.3329488615915349, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.MediaTypeId,Invoice.InvoiceId), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.34622798105498864, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.3626867461411536, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Customer.Country))", "score": -0.36668357570708215, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(MediaType),Track.TrackId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.37589540863055915, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates were tracks with media type MPEG audio file sold?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Customer.Country))", "score": -0.3955567639505232, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 73, "beams": [{"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.19959912803387453, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2000099616571977, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.22935678430602702, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2297676179293502, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.24337517529818425, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Genre.GenreId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.25428777458425744, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2790280206802307, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2794388543035539, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Genre.GenreId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.28404543085640993, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Genre.Name,!=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.29321015586781823, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Genre.Name,!=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2936209894911414, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3087856769523832, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3091964767958757, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Genre.Name,!=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.32296777836014, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Genre.Name,!=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.32337861198346324, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 74, "beams": [{"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,SCRIABIN: Vers la flamme),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.AlbumId,MediaType.MediaTypeId), MediaType.Name),Album.Title))", "score": -0.3321179008777175, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,SCRIABIN: Vers la flamme),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.AlbumId,Album.AlbumId), MediaType.Name),Album.Title))", "score": -0.3759696366253933, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,=,SCRIABIN: Vers la flamme),getData(MediaType),Track.AlbumId,Album.AlbumId), MediaType.Name),Album.Title))", "score": -0.3954823742369555, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,SCRIABIN: Vers la flamme),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,MediaType.MediaTypeId), MediaType.Name),Album.Title))", "score": -0.39654761394273336, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,SCRIABIN: Vers la flamme),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.AlbumId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3975938317831662, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,SCRIABIN: Vers la flamme),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.AlbumId,MediaType.MediaTypeId), MediaType.Name),Album.Title))", "score": -0.40686566211607067, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,=,SCRIABIN: Vers la flamme),getData(Album),Track.AlbumId,Album.AlbumId), MediaType.Name),Album.Title))", "score": -0.4085624385722696, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.Name,=,SCRIABIN: Vers la flamme),getData(MediaType),Track.AlbumId,Album.AlbumId), MediaType.Name),Album.Title))", "score": -0.4097010381581644, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,SCRIABIN: Vers la flamme),getData(MediaType),Track.AlbumId,Album.AlbumId), MediaType.Name),Album.Title))", "score": -0.41329976632809706, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,SCRIABIN: Vers la flamme),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.AlbumId,MediaType.MediaTypeId), Track.Name),Album.Title))", "score": -0.4162939207534043, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.Name,=,SCRIABIN: Vers la flamme),getData(Album),Track.AlbumId,Album.AlbumId), MediaType.Name),Album.Title))", "score": -0.42278110249347844, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,SCRIABIN: Vers la flamme),getData(Album),Track.AlbumId,Album.AlbumId), MediaType.Name),Album.Title))", "score": -0.4263798306634112, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,SCRIABIN: Vers la flamme),merge(getData(Track),getData(MediaType),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Track.Name),Album.Title))", "score": -0.42975223672744034, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,SCRIABIN: Vers la flamme),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), MediaType.Name),Album.Title))", "score": -0.4403991879902361, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,SCRIABIN: Vers la flamme),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.AlbumId,Album.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.441445567530842, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 75, "beams": [{"orig_question": "What is the total invoice amount for tracks larger than 7142127?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,<,7142127), Invoice.InvoiceId),Invoice.Total)", "score": -0.2063557247612409, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,7142127),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total invoice amount for tracks larger than 7142127?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Bytes,<,7142127),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22908208319871406, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,7142127),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total invoice amount for tracks larger than 7142127?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,7142127), Invoice.InvoiceId),Invoice.Total)", "score": -0.25621984696994193, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,7142127),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total invoice amount for tracks larger than 7142127?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Composer,<,7142127),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2611973551892874, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,7142127),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total invoice amount for tracks larger than 7142127?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,7142127),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28708861820964654, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,7142127),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total invoice amount for tracks larger than 7142127?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,7142127), Invoice.InvoiceId),Invoice.Total)", "score": -0.31090853625119647, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,7142127),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total invoice amount for tracks larger than 7142127?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,7142127), Invoice.InvoiceId),Invoice.Total)", "score": -0.31589131396459974, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,7142127),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total invoice amount for tracks larger than 7142127?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Bytes,!=,7142127),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.31765084714814845, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,7142127),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total invoice amount for tracks larger than 7142127?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Composer,>,7142127),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3192038902002199, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,7142127),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total invoice amount for tracks larger than 7142127?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,7142127), Invoice.InvoiceId),Invoice.Total)", "score": -0.32722492360190425, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,7142127),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total invoice amount for tracks larger than 7142127?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),InvoiceLine.Quantity,<,7142127),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.33110101553152993, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,7142127),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total invoice amount for tracks larger than 7142127?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,7142127),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3497661440916504, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,7142127),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total invoice amount for tracks larger than 7142127?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<,7142127), Invoice.InvoiceId),Invoice.Total)", "score": -0.35575709002421224, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,7142127),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total invoice amount for tracks larger than 7142127?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,<,7142127),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3631670144182771, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,7142127),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total invoice amount for tracks larger than 7142127?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,7142127), Invoice.InvoiceId),Invoice.Total)", "score": -0.3642753976305824, "correct_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,7142127),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 76, "beams": [{"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Bytes),Track.Bytes))", "score": -0.05892854129339007, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Bytes),Employee.Email))", "score": -0.18955140527404185, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.1908418667752293, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Bytes),Album.Title))", "score": -0.20003145487010265, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Bytes),Track.Name))", "score": -0.20286164205299576, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Album.Title))", "score": -0.33754469657356084, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Track.Name))", "score": -0.3412370247779308, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Bytes),Customer.Email))", "score": -0.3547175440425839, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Bytes),Track.UnitPrice))", "score": -0.374692663243384, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Bytes),Track.Bytes))", "score": -0.3874342582756223, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Employee.Email),Track.Bytes))", "score": -0.3906727786504155, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Bytes))", "score": -0.4002965350120809, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Bytes),Track.Bytes))", "score": -0.43669761489991477, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Bytes),Track.TrackId))", "score": -0.44906219670153497, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}, {"orig_question": "What is the biggest track in the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Bytes),Album.AlbumId))", "score": -0.45198779141669043, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),Track.Bytes),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 77, "beams": [{"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -0.03349387447402871, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -0.6496709629153047, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.Company))", "score": -0.7921822610621412, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.Fax))", "score": -0.8350175957964978, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.City))", "score": -0.846622032855915, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.City,!=,None), Customer.City),Customer.City))", "score": -0.8528253286931431, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Album.Title))", "score": -0.88767568360003, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Album.Title),Customer.City))", "score": -0.9462458668109569, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Invoice.BillingCity))", "score": -0.9661978677127954, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.City))", "score": -0.9938416743829616, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Invoice.BillingCity),Customer.City))", "score": -1.0432768255254603, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),InvoiceLine.Quantity))", "score": -1.0653281364503289, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.PostalCode))", "score": -1.152305190631027, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "sum(distinct(getData(Customer), Customer.City),Customer.City)", "score": -1.1782095637137295, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(InvoiceLine), Customer.City),Customer.City))", "score": -1.226624589029278, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 78, "beams": [{"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.08799947431815805, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.16623905134648898, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice),Playlist.Name))", "score": -0.20407958784130403, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.2640820438258962, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),Track.UnitPrice),Playlist.Name))", "score": -0.28196895402794636, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.286083079021975, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.29810452024285733, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,>=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.3036917870719303, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Milliseconds,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.30843738834781154, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,>,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.35285716328273703, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.36833786627426546, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),Track.UnitPrice),Playlist.Name))", "score": -0.37437860882900725, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice),Playlist.Name))", "score": -0.37461052801095945, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))", "score": -0.3790662689699175, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}, {"orig_question": "On which playlists are the most expensive tracks composed by Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),Track.UnitPrice),Playlist.Name))", "score": -0.3964703931941001, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bill Gould/Jon Hudson/Mike Bordin/ Mike Patton/Roddy Bottum),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 79, "beams": [{"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))", "score": -0.03496817267978258, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))", "score": -0.3377189873858697, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))", "score": -0.4589030980273492, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))", "score": -0.5476280688449151, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.Fax))", "score": -0.5709708398348994, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))", "score": -0.5758373378916986, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))", "score": -0.5985882519885308, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Employee.PostalCode),Customer.PostalCode))", "score": -0.6001471770136959, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Employee.PostalCode))", "score": -0.6352492040164179, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))", "score": -0.6353179454013116, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.Fax),Customer.PostalCode))", "score": -0.6356977713435299, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))", "score": -0.6793147563143975, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.Phone),Customer.PostalCode))", "score": -0.6949038994639523, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Genre.GenreId))", "score": -0.7143529122836298, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What postal code does the customer have whose phone number is +55 (12) 3923-5555", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.LastName),Customer.PostalCode))", "score": -0.7306786072581417, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5555), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 80, "beams": [{"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.11545532462391472, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra), Track.TrackId),Track.Milliseconds)", "score": -0.1186477774725332, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Milliseconds)", "score": -0.21199244740839795, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra), Track.TrackId),Track.Milliseconds)", "score": -0.24432605952009281, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3093768016132658, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.3102534810339623, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Composer,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)", "score": -0.32013656437908533, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)", "score": -0.3218261044872649, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.3316323993260635, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra), Track.TrackId),Track.Milliseconds)", "score": -0.3643333906968029, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.37305277259602193, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra), Track.TrackId),Track.Milliseconds)", "score": -0.37566521981808626, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Artist),Artist.Name,=,Antal Dor\u00e1ti & London Symphony Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra), Track.TrackId),Track.Milliseconds)", "score": -0.38202344062000554, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.38589369715548716, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Track),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.4033420730590762, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 81, "beams": [{"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,11774865), Track.Bytes),Track.UnitPrice))", "score": -0.2310466183735116, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,11774865), Track.UnitPrice),Track.UnitPrice))", "score": -0.26157349482309655, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,11774865), Track.Bytes),Track.UnitPrice))", "score": -0.3132575167728646, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,11774865), Track.UnitPrice),Track.UnitPrice))", "score": -0.3437843932224496, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,11774865), Track.Bytes),Track.UnitPrice))", "score": -0.35161137715113, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,11774865), Track.UnitPrice),Track.UnitPrice))", "score": -0.38213825360071496, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>,11774865), Track.Bytes),Track.UnitPrice))", "score": -0.3987014754129632, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>,11774865), Track.UnitPrice),Track.UnitPrice))", "score": -0.42922835186254815, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,11774865), Track.Milliseconds),Track.UnitPrice))", "score": -0.4594173966361268, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,<,11774865), Track.Bytes),Track.UnitPrice))", "score": -0.4809123738123162, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,11774865), Track.Bytes),Track.Bytes))", "score": -0.5045389639599307, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,<,11774865), Track.UnitPrice),Track.UnitPrice))", "score": -0.5114392502619012, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,11774865), Track.Bytes),Track.UnitPrice))", "score": -0.5192662341905816, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,11774865), Track.UnitPrice),Track.Bytes))", "score": -0.5350658404095157, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,11774865), Track.Milliseconds),Track.UnitPrice))", "score": -0.5416283453268989, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 82, "beams": [{"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(filter(getData(Album),Album.Title,!=,0.99),Track.Bytes),Track.Bytes))", "score": -0.3166283790851594, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(filter(getData(Track),Album.Title,!=,0.99),Track.Bytes),Track.Bytes))", "score": -0.3739093367839814, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(filter(getData(Album),Album.Title,!=,0.99),Customer.Email),Track.Bytes))", "score": -0.3916892086053849, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(filter(getData(Album),Album.Title,!=,0.99),Track.UnitPrice),Track.Bytes))", "score": -0.4399397794986726, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Album.AlbumId),Album.Title,!=,0.99),InvoiceLine.UnitPrice),Track.Bytes))", "score": -0.44378898359516994, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(filter(getData(Track),Album.Title,!=,0.99),Customer.Email),Track.Bytes))", "score": -0.44897016630420694, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Album.Title,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.4525979500888149, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(merge(filter(getData(Album),Album.Title,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.4598302096220985, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Album.AlbumId),Album.Title,!=,0.99),InvoiceLine.UnitPrice),Track.Bytes))", "score": -0.47703220006680364, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Album.Title,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Track.UnitPrice),Track.Bytes))", "score": -0.4787261507280066, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Album.Title,!=,0.99),InvoiceLine.UnitPrice),Track.Bytes))", "score": -0.4837915286801573, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(merge(filter(getData(Album),Album.Title,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Track.UnitPrice),Track.Bytes))", "score": -0.4859584102612902, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(filter(getData(Track),Album.Title,!=,0.99),Track.UnitPrice),Track.Bytes))", "score": -0.4972207371974946, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Album.AlbumId),Album.Title,!=,0.99),InvoiceLine.UnitPrice),Album.Title))", "score": -0.4991569657987498, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.TrackId),Album.Title,!=,0.99),InvoiceLine.UnitPrice),Track.Bytes))", "score": -0.517034760657287, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 83, "beams": [{"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.06220194562074894, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.13978822804058824, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Album),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.24896235212172285, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.28012946800291444, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.AlbumId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.29493416346249496, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.32072978471773816, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3226595547812756, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Album),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3265486345415622, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total)", "score": -0.3452446181419665, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3498231872147351, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.3583044418696461, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3593274355796853, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.3627966301323092, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.AlbumId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.3730487407061672, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}, {"orig_question": "What is the total invoice of protected AAC audio files?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.40307715565235364, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 84, "beams": [{"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Rogers Canada), Customer.Country),Customer.Country))", "score": -0.030421352454141015, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Rogers Canada), Customer.Country),Customer.Country))", "score": -0.3228194438597711, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,Rogers Canada), Customer.Country),Customer.Country))", "score": -0.40170297256918275, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Country,!=,Rogers Canada), Customer.Country),Customer.Country))", "score": -0.6081560840575548, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Rogers Canada), Customer.Country),Customer.City))", "score": -0.6419780561445805, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))", "score": -0.6570141040465387, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Country,!=,Rogers Canada), Customer.Country),Customer.Country))", "score": -0.6925603737799975, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.HireDate,!=,Rogers Canada), Customer.Country),Customer.Country))", "score": -0.7026953422209772, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Rogers Canada), Customer.Country),Customer.Fax))", "score": -0.7074888655661198, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Rogers Canada), Customer.Company),Customer.Country))", "score": -0.7103223232297751, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Rogers Canada), Customer.Country),Customer.Address))", "score": -0.7267138669012638, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Rogers Canada), Customer.Country),Invoice.BillingCountry))", "score": -0.7316806027411076, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Rogers Canada), Invoice.BillingCountry),Customer.Country))", "score": -0.7365901497869345, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Rogers Canada), Customer.Address),Customer.Country))", "score": -0.7499918369321676, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}, {"orig_question": "Which countries do customers other than Rogers Canada come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Rogers Canada), Customer.City),Customer.Country))", "score": -0.7543489364652487, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Rogers Canada), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 85, "beams": [{"orig_question": "Whats the total sum of invoices for Brazilian Music tracks?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Brazilian Music),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23280768446384414, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for Brazilian Music tracks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Composer,=,Brazilian Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23669766620531912, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for Brazilian Music tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Brazilian Music),getData(InvoiceLine),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.25479308763830627, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for Brazilian Music tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Brazilian Music),getData(InvoiceLine),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2677900003270108, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for Brazilian Music tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Track.Composer,=,Brazilian Music),getData(InvoiceLine),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2695338623187708, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for Brazilian Music tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Track.Composer,=,Brazilian Music),getData(InvoiceLine),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.28019918143390476, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for Brazilian Music tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Brazilian Music),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.281925192103766, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for Brazilian Music tracks?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Brazilian Music),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28288512340154937, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for Brazilian Music tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Track.Composer,=,Brazilian Music),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.29433437321065997, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for Brazilian Music tracks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Composer,=,Brazilian Music),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2954898345255434, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for Brazilian Music tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Artist.Name,=,Brazilian Music),getData(InvoiceLine),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.30105817637075377, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for Brazilian Music tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Brazilian Music),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.30837313853639375, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for Brazilian Music tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Brazilian Music),getData(InvoiceLine),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3131806856265916, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for Brazilian Music tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Brazilian Music),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.31504487696534134, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for Brazilian Music tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Track.Composer,=,Brazilian Music),getData(InvoiceLine),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.32792146030705616, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 86, "beams": [{"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.051874472219424206, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.21533663051195617, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Playlist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.3737954594380426, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.46893919484682556, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),MediaType.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.5135699309594202, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.5214469827897119, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Milliseconds))", "score": -0.6380529961734283, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Genre.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.6577077306992578, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Bytes))", "score": -0.6612439713626372, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),PlaylistTrack.TrackId,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.756035844255166, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Album.Title,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.7877505816704797, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Title,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.7928708590752649, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,!=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.7934501872641704, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Milliseconds))", "score": -0.8015151544659602, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks that we have from Vin\u00c3\u00adcius De Moraes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.InvoiceDate,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))", "score": -0.8245774902588892, "correct_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Vin\u00c3\u00adcius De Moraes), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 87, "beams": [{"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))", "score": -0.10967302256521726, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.FirstName))", "score": -0.38317649984784014, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.LastName))", "score": -0.4629482577529407, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.LastName))", "score": -0.47911291335220313, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.PostalCode))", "score": -0.5356618633155503, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Artist.ArtistId))", "score": -0.6050412886011441, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Employee.LastName))", "score": -0.6617402639963887, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Genre.GenreId))", "score": -0.6811038963968775, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.FirstName))", "score": -0.7364517350355635, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))", "score": -0.752616390634826, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Phone))", "score": -0.7575746507336408, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Fax))", "score": -0.7688391794853748, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Email))", "score": -0.806855069338341, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.LastName),Customer.LastName))", "score": -0.8337919417264401, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Genre.Name))", "score": -0.8407259429172701, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 88, "beams": [{"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(PlaylistTrack),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3379550270228968, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,James Levine), Track.TrackId),Invoice.Total)", "score": -0.34135752263588215, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(InvoiceLine),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3435427883659661, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(PlaylistTrack),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3556320053609581, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(InvoiceLine),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3612197667040274, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,James Levine), Track.TrackId),Invoice.Total)", "score": -0.36162474490027485, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(PlaylistTrack),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3735097251252223, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(PlaylistTrack),Genre.GenreId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3740446689440896, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(InvoiceLine),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3790974864682915, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(InvoiceLine),Genre.GenreId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3796324302871589, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(PlaylistTrack),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,James Levine), Track.TrackId),Invoice.Total)", "score": -0.385251845833812, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(InvoiceLine),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,James Levine), Track.TrackId),Invoice.Total)", "score": -0.3908396071768812, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(PlaylistTrack),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.39118672733379184, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(PlaylistTrack),Genre.GenreId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3917216711526592, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3935971368836282, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 89, "beams": [{"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.15925677883445663, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2206384248541267, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.25321542775236294, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.25348993147131693, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2613382432361692, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>,0.99),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2617451805498423, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.29391524613440545, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>,0.99),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.29432218344807853, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3024449989318848, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.30530903159288897, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Invoice.BillingAddress,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3150830096790931, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Track.Milliseconds,>,0.99), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.31776079112624633, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.Total,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3337083445946352, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.33502199629244384, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "From which billing addresses were tracks ordered that cost more than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.35148326219361453, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 90, "beams": [{"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.04028062712024631, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.10970212142962427, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.15271354463041245, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.20942321957980564, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.24323675672133677, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.2564388007018224, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.33470674703203235, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.35220760457645345, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.MediaTypeId))", "score": -0.35786028147726956, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3606195286248009, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),Customer.Company))", "score": -0.37204222712654134, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.3801893424621478, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Customer.CustomerId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.39049579823991887, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),Track.MediaTypeId))", "score": -0.39153328111645747, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.3919778491391642, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 91, "beams": [{"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(getData(Playlist), Employee.State),Playlist.Name))", "score": -0.3615503843832426, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(getData(Playlist), Playlist.Name),Playlist.Name))", "score": -0.3739927751063819, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(getData(Playlist), Employee.State),Employee.State))", "score": -0.48625976722598596, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,=,Music), Employee.FirstName),Playlist.Name))", "score": -0.4909459354107639, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(getData(Playlist), Playlist.Name),Employee.State))", "score": -0.49870215794912526, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.5134461107672197, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,=,Music), Employee.FirstName),Employee.FirstName))", "score": -0.5213779063647053, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,=,Music), Playlist.Name),Playlist.Name))", "score": -0.5529001356785557, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),MediaType.Name))", "score": -0.5535663602877884, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(getData(Playlist), Employee.State),Employee.FirstName))", "score": -0.5555127420817743, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(getData(Playlist), Playlist.Name),Employee.FirstName))", "score": -0.5679551328049136, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Employee.FirstName))", "score": -0.5703478346180155, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,=,Music), Playlist.Name),Employee.FirstName))", "score": -0.583332106632497, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Track.Name))", "score": -0.5840541615086206, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,=,Music), Employee.Title),Playlist.Name))", "score": -0.6028099806731007, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 92, "beams": [{"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),Album.Title))", "score": -0.18004489887382916, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),Album.Title))", "score": -0.18241580153975528, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(MediaType),InvoiceLine.InvoiceId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),Album.Title))", "score": -0.18818542573507685, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),Album.Title))", "score": -0.19055632840100295, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),Album.Title))", "score": -0.2278819281286967, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.22788518041530498, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.23025608308123108, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),Album.Title))", "score": -0.23524458901894038, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(MediaType),InvoiceLine.InvoiceId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.23602570727655264, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.23839660994247874, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))", "score": -0.25769022786771695, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),MediaType.Name))", "score": -0.2650528887579606, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),Album.Title))", "score": -0.2705718180595468, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(MediaType),InvoiceLine.InvoiceId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),Album.Title))", "score": -0.27883740401079304, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different kinds of files are on the playlist Classical?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), MediaType.Name),Album.Title))", "score": -0.286200085329194, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 93, "beams": [{"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))", "score": -0.03980282064367202, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.State),Customer.Address))", "score": -0.3478303265183058, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.FirstName),Customer.Address))", "score": -0.4212335657684889, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Country),Customer.Address))", "score": -0.5909852695076552, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Company),Customer.Address))", "score": -0.6075737785904494, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.State))", "score": -0.6400571486337867, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Employee.Address),Customer.Address))", "score": -0.6488552403061476, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))", "score": -0.6526233174263325, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Email),Customer.Address))", "score": -0.6692613672821608, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.FirstName))", "score": -0.6735129377229896, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Company))", "score": -0.674067439733335, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Phone),Customer.Address))", "score": -0.6754973244278517, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), InvoiceLine.UnitPrice),Customer.Address))", "score": -0.6954930734245863, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Invoice.CustomerId))", "score": -0.7117203494890418, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer with the phone number +353 01 6792424?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Employee.Address))", "score": -0.7167397162302223, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+353 01 6792424), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 94, "beams": [{"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.EmployeeId),Employee.Phone,=,7727B 41 Ave), Employee.Phone),Employee.Phone))", "score": -0.3069030043330192, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,7727B 41 Ave), Employee.Phone),Employee.Phone))", "score": -0.3101401266145145, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Playlist.Name,=,7727B 41 Ave),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.EmployeeId),Employee.Phone,=,7727B 41 Ave), Employee.Phone),Employee.Phone))", "score": -0.3826474189602791, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.Phone,=,+91 0124 39883988), Employee.Phone),Customer.Phone))", "score": -0.38642692043435956, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Playlist.Name,=,7727B 41 Ave),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+91 0124 39883988), Employee.Phone),Employee.Phone))", "score": -0.39000609313648593, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Playlist.Name,=,+91 0124 39883988),merge(getData(Employee),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.EmployeeId),Employee.Phone,=,7727B 41 Ave), Employee.Phone),Employee.Phone))", "score": -0.39656006286767487, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.Phone,=,7727B 41 Ave), Employee.Phone),Customer.Phone))", "score": -0.39716187373264145, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Playlist.Name,=,7727B 41 Ave),merge(getData(Employee),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+91 0124 39883988), Employee.Phone),Employee.Phone))", "score": -0.4039187211515068, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Invoice.CustomerId,Employee.EmployeeId),Employee.Phone,=,+91 0124 39883988), Employee.Phone),Customer.Phone))", "score": -0.43365640238865283, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.FirstName,=,+91 0124 39883988), Employee.Phone),Customer.Phone))", "score": -0.43962808125043884, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.Address,=,7727B 41 Ave), Employee.Phone),Customer.Phone))", "score": -0.44275873314611514, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),getData(Employee),Invoice.CustomerId,Employee.EmployeeId),Employee.Phone,=,+91 0124 39883988), Employee.Phone),Customer.Phone))", "score": -0.44439135568693466, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Employee),Invoice.CustomerId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.Phone,=,7727B 41 Ave), Employee.Phone),Customer.Phone))", "score": -0.44841516486927113, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.Phone,=,7727B 41 Ave), Employee.Phone),Employee.Phone))", "score": -0.4491247142808105, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any customers with the phone number +91 0124 39883988 who's sales rep is not the employee with the address 7727B 41 Ave?ess ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.FirstName,=,7727B 41 Ave), Employee.Phone),Customer.Phone))", "score": -0.4503629811476488, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+91 0124 39883988),Employee.Address,!=,7727B 41 Ave), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 95, "beams": [{"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Cupertino), Track.Name),Track.Name))", "score": -0.1492345746145115, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Cupertino), Track.Name),Track.Name))", "score": -0.1861083358344331, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Cupertino),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.20237780036781167, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Cupertino),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2072804995909215, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Cupertino),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.2255215594259734, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingAddress,=,Cupertino), Track.Name),Track.Name))", "score": -0.27171955509180334, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,Cupertino),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3564193336365091, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Cupertino),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.35930754238561874, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Cupertino),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3613491288997261, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,Cupertino),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.37466039347156094, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Cupertino),merge(getData(InvoiceLine),getData(Genre),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.37959018873477796, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,=,Cupertino), Track.Name),Track.Name))", "score": -0.3909358193165382, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,Cupertino), Track.Name),Track.Name))", "score": -0.4085104316291108, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Cupertino), Track.Name),Track.Name))", "score": -0.43064509330361034, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Cupertino),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.4591367653648274, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 96, "beams": [{"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.014337340908928575, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Track.TrackId),Track.Milliseconds)", "score": -0.2765198216139741, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3431953751364517, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.42089521982029054, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.45311536224427595, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.4643781275885256, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Track.TrackId),Track.Milliseconds)", "score": -0.4716616241561678, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Invoice.InvoiceId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.4766359476439191, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.4959154430201221, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(Playlist),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.5064798114008398, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.5156601066371627, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(filter(getData(PlaylistTrack),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.5175430274047704, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.5192665833522491, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Employee.State,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.5239104683869232, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.5356258067315479, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 97, "beams": [{"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.048560280262768804, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(Invoice), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5278226632172914, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.592395539336418, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), Track.TrackId),InvoiceLine.Quantity)", "score": -0.6994374760409496, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.7505202667175078, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),Customer.City)", "score": -0.8665039290692862, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.9877493200374791, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), Invoice.BillingCity),InvoiceLine.Quantity)", "score": -0.9960190342853474, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -1.045613376455354, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(Invoice), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -1.0716579222909406, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), Customer.City),InvoiceLine.Quantity)", "score": -1.1462315430122465, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.UnitPrice),InvoiceLine.Quantity)", "score": -1.1646927647089111, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(Invoice), Track.TrackId),InvoiceLine.Quantity)", "score": -1.1786998589954722, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),Album.Title)", "score": -1.1856290356503445, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), Invoice.Total),InvoiceLine.Quantity)", "score": -1.207437909104769, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 98, "beams": [{"orig_question": "What are the dates of invoices billed to 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.0722485386390872, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of invoices billed to 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.Total),Invoice.InvoiceDate))", "score": -0.23953851466967535, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of invoices billed to 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3232164581995834, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of invoices billed to 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3326805168122241, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of invoices billed to 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.39955609783505425, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of invoices billed to 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.40902015644769496, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of invoices billed to 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.InvoiceDate))", "score": -0.4402638912756629, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of invoices billed to 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,4, Rue Milton), Invoice.Total),Invoice.InvoiceDate))", "score": -0.4426523681590018, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of invoices billed to 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,4, Rue Milton), Invoice.Total),Invoice.InvoiceDate))", "score": -0.45211642677164243, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of invoices billed to 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,4, Rue Milton),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4642807822213728, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of invoices billed to 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.47467530271454145, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of invoices billed to 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.48413934194531205, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of invoices billed to 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.49421074537407533, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of invoices billed to 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.Total))", "score": -0.5149576176513619, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of invoices billed to 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.5347629298080392, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 99, "beams": [{"orig_question": "What is the sum of the tracks sizes ? ", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)", "score": -0.26959768263058476, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the tracks sizes ? ", "inferred_code": "sum(distinct(filter(merge(getData(Genre),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.3673839200567649, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the tracks sizes ? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,=,None),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.37015313881756495, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the tracks sizes ? ", "inferred_code": "sum(distinct(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.37145170503172936, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the tracks sizes ? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,=,None),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.38460072112436944, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the tracks sizes ? ", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Track.Name,=,None),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3973949941688981, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the tracks sizes ? ", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Track.Name,=,None),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.4363011559403803, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the tracks sizes ? ", "inferred_code": "sum(distinct(filter(merge(getData(Genre),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,None), Track.TrackId),Track.Bytes)", "score": -0.44191798683084266, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the tracks sizes ? ", "inferred_code": "sum(distinct(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,None), Track.TrackId),Track.Bytes)", "score": -0.44598577180580706, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the tracks sizes ? ", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Track.Name,=,None),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.44843506641612113, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the tracks sizes ? ", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Track.Name,=,None),getData(Track),Album.AlbumId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.4508534201396669, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the tracks sizes ? ", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Track.Name,=,None),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.4596366220585336, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the tracks sizes ? ", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Track.Name,=,None),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.AlbumId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.47177054841341076, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the tracks sizes ? ", "inferred_code": "sum(distinct(filter(merge(getData(Genre),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.476164382275966, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the tracks sizes ? ", "inferred_code": "sum(distinct(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.48023216725093043, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 100, "beams": [{"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2611967248185795, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.31907376175681673, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.UnitPrice),InvoiceLine.UnitPrice)", "score": -0.3510003672655221, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<=,213831),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3882340245803701, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.UnitPrice),Track.UnitPrice)", "score": -0.4088774042037594, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,=,213831),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.41865539911393806, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.4524657008269509, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<=,213831),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice)", "score": -0.45284368010213916, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<=,213831),merge(filter(getData(InvoiceLine),Track.Milliseconds,>=,213831),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4621759272897536, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice)", "score": -0.46646165703410425, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<=,213831),merge(filter(getData(InvoiceLine),Track.Milliseconds,>=,213831),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4794051798190882, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,=,213831),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice)", "score": -0.48326504044760726, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,=,213831),merge(filter(getData(InvoiceLine),Track.Milliseconds,>=,213831),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4839154766401445, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,213831),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4872778139030832, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<=,213831),filter(getData(InvoiceLine),Invoice.Total,>=,213831),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.511120098598394, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 101, "beams": [{"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20139429749623505, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2074470561133303, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21766109956177723, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2237138581788725, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2679116784955754, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.27396443711267066, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Invoice),getData(InvoiceLine),Customer.CustomerId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27460910701490693, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Invoice),getData(InvoiceLine),Customer.CustomerId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2806618656320022, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28417848056111755, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28591562300145723, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Invoice),Customer.CustomerId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.28955561751650005, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2902312391782128, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2919683748737367, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3021824183221837, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total of invoices where songs that are in the Heavy Metal Classic playlist were ordered?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.30255553072513747, "correct_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 102, "beams": [{"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))", "score": -0.23147546658372023, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.PostalCode))", "score": -0.37835755829010753, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Fax))", "score": -0.4318379192725046, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Phone))", "score": -0.4715385780485109, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.FirstName))", "score": -0.48519064564751097, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Employee.LastName))", "score": -0.5004457739161728, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Artist.ArtistId))", "score": -0.5896498714087574, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.LastName),Customer.LastName))", "score": -0.6035372795005947, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.LastName))", "score": -0.6179836934237422, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.LastName))", "score": -0.6380041101855652, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.LastName))", "score": -0.6640541223756736, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Genre.GenreId))", "score": -0.67600357450861, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Company))", "score": -0.7307109210959047, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.LastName),Customer.PostalCode))", "score": -0.750419371206982, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))", "score": -0.7648657851301295, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 103, "beams": [{"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Mot\u00f6rhead), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.11311281968901177, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Mot\u00f6rhead), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.1306075783400598, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Mot\u00f6rhead), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.20109434108875748, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Mot\u00f6rhead), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.22419893897905452, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Mot\u00f6rhead), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2311209267424056, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Mot\u00f6rhead), Invoice.InvoiceId),Invoice.Total)", "score": -0.24550351819627314, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Mot\u00f6rhead), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.25075315028746814, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Mot\u00f6rhead), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.25883599929865725, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Mot\u00f6rhead), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.26299827684732113, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Mot\u00f6rhead), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3081574130779191, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Mot\u00f6rhead), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.31012790342294755, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Mot\u00f6rhead), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.324482060286036, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Mot\u00f6rhead), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.32870522459948975, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Mot\u00f6rhead), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.3334850395960189, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Mot\u00f6rhead), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3353768505179962, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 104, "beams": [{"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.1573936206915032, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18168838550984995, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.18532939425957295, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.19335809507958787, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.19469758211355676, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2131557349867923, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21645372858879802, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2412401323171577, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.26588506096618414, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.26613708835093736, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.28163511257676477, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2824774270550285, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2872651998444067, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2878932472388429, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum all purchases of tracks featuring on the 90's Music playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.29451098652024676, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 105, "beams": [{"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.03228207019310503, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.FirstName),Employee.LastName))", "score": -0.340606753650718, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.FirstName))", "score": -0.3843959010500839, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Email),Employee.LastName))", "score": -0.5073027656708291, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.Email))", "score": -0.5238268113989761, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.650724858913236, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.FirstName,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.6567293116186192, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Title),Employee.LastName))", "score": -0.6868451879654458, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.FirstName),Employee.FirstName))", "score": -0.6927205845076969, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Artist.ArtistId))", "score": -0.7024363613982132, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.7307407566640904, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Track.Name))", "score": -0.7567257619757584, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.Phone))", "score": -0.7618479467291763, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Fax),Employee.LastName))", "score": -0.780157272640281, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.Title))", "score": -0.8060232735533646, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 106, "beams": [{"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,=,1.99),getData(Track),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.25756853708771127, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Album.ArtistId),Artist.Name,!=,Walking Into Clarksdale),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.AlbumId),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.27470582637450547, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,=,1.99),getData(Track),Album.AlbumId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.28896866878772104, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Artist),getData(Track),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Walking Into Clarksdale),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.AlbumId),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2967439453187981, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Album.ArtistId),Artist.Name,!=,Walking Into Clarksdale),merge(getData(Track),getData(InvoiceLine),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.298422002591372, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,=,1.99),getData(Track),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.AlbumId),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2998693072429423, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Album.ArtistId),Artist.Name,!=,Walking Into Clarksdale),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.31889398226865573, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Artist),getData(Track),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,1.99),merge(getData(Track),getData(InvoiceLine),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3204601215356647, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,=,1.99),getData(Track),Album.AlbumId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.AlbumId),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.326882059641996, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.33546176734629957, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Artist),getData(Track),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,1.99),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3445115064308922, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,=,Walking Into Clarksdale),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.35813192601002114, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Album.ArtistId),Album.Title,!=,Walking Into Clarksdale),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.AlbumId),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3605465570875556, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Album.ArtistId),Artist.Name,!=,1.99),getData(Track),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.37378979620654834, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Album.ArtistId),Artist.Name,!=,1.99),getData(InvoiceLine),Album.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.374228317712145, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 107, "beams": [{"orig_question": "What are the email addresses of the Canadian employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,Canada), Employee.Email),Employee.Email))", "score": -0.12406980376727006, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the Canadian employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Canada), Employee.Email),Employee.Email))", "score": -0.2550610167909326, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the Canadian employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Canada), Employee.Email),Employee.Email))", "score": -0.33343832325226685, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the Canadian employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Canada), Employee.Email),Employee.Email))", "score": -0.3607326013971033, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the Canadian employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,Canada), Employee.Email),Employee.Email))", "score": -0.3983488542962732, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the Canadian employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Canada), Employee.Email),Employee.Email))", "score": -0.40131919216401, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the Canadian employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Canada), Employee.Email),Employee.Email))", "score": -0.4014994962144556, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the Canadian employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Canada), Employee.Email),Employee.Email))", "score": -0.48648373913056275, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the Canadian employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Email))", "score": -0.5286974174905481, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the Canadian employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,Canada), Employee.Email),Track.UnitPrice))", "score": -0.5352759215984406, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the Canadian employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,Canada), Employee.Email),Track.Bytes))", "score": -0.5595918152484955, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the Canadian employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,Canada), Employee.BirthDate),Employee.Email))", "score": -0.6261758919808926, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the Canadian employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.TrackId,=,Canada), Employee.Email),Employee.Email))", "score": -0.6560970408845606, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the Canadian employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,Canada), Customer.Email),Employee.Email))", "score": -0.6604919549081387, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Email))"}, {"orig_question": "What are the email addresses of the Canadian employees?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Canada), Employee.Email),Track.UnitPrice))", "score": -0.6662671346221032, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 108, "beams": [{"orig_question": "On which album is the largest track on the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Bytes),Album.Title))", "score": -0.04426100997408955, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the largest track on the comedy genre?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.134678525212234, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the largest track on the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Comedy),Track.Bytes),Album.Title))", "score": -0.2329142344482949, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the largest track on the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),getData(Album),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Bytes),Album.Title))", "score": -0.35209046708360503, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the largest track on the comedy genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.4064752995503593, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the largest track on the comedy genre?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.4117336478320673, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the largest track on the comedy genre?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.42386619303702616, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the largest track on the comedy genre?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.42463633328359823, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the largest track on the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Album.Title,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Bytes),Album.Title))", "score": -0.4307200744270305, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the largest track on the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Track.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Bytes),Album.Title))", "score": -0.4453806310722315, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the largest track on the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),Track.Bytes),Album.Title))", "score": -0.45195969358455673, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the largest track on the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Bytes),Track.Bytes))", "score": -0.4608302822778001, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the largest track on the comedy genre?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Album),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.46339455324268003, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the largest track on the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Artist.ArtistId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),Track.Bytes),Album.Title))", "score": -0.4707303273356365, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the largest track on the comedy genre?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Comedy),Track.Bytes),Album.Title))", "score": -0.4757005300210632, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 109, "beams": [{"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.05557127474094159, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Playlist.Name))", "score": -0.30149805350447423, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Customer.State))", "score": -0.3783401827349735, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Employee.State))", "score": -0.3963760416045261, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.49948019059593207, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Customer.FirstName))", "score": -0.556689945889957, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Customer.Country))", "score": -0.5643702427878452, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),MediaType.Name))", "score": -0.5934983174338413, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.5971140653382463, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Playlist.PlaylistId))", "score": -0.6071968953147007, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Employee.State),Invoice.BillingState))", "score": -0.6114060360960138, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Track.UnitPrice))", "score": -0.616051165296085, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.6734168917428178, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Customer.Phone))", "score": -0.677357522679813, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Customer.Address))", "score": -0.685096232129581, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 110, "beams": [{"orig_question": "How many media types are there in playlists with name equal to Heavy Metal Classic", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.13076831010418707, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in playlists with name equal to Heavy Metal Classic", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.14512584969404074, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in playlists with name equal to Heavy Metal Classic", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(PlaylistTrack),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.1579787719757162, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in playlists with name equal to Heavy Metal Classic", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Heavy Metal Classic), MediaType.Name),MediaType.Name))", "score": -0.20194765368365836, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in playlists with name equal to Heavy Metal Classic", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.21461977565342327, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in playlists with name equal to Heavy Metal Classic", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2151863190740983, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in playlists with name equal to Heavy Metal Classic", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), MediaType.Name),MediaType.Name))", "score": -0.21825823909474382, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in playlists with name equal to Heavy Metal Classic", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.23220241420450868, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in playlists with name equal to Heavy Metal Classic", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), MediaType.Name),MediaType.Name))", "score": -0.2508881003208406, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in playlists with name equal to Heavy Metal Classic", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.2619230571583652, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in playlists with name equal to Heavy Metal Classic", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.27041540724274743, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in playlists with name equal to Heavy Metal Classic", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.29974703410283293, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in playlists with name equal to Heavy Metal Classic", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,Playlist.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.30148572066923035, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in playlists with name equal to Heavy Metal Classic", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,Playlist.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.3074925022192146, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types are there in playlists with name equal to Heavy Metal Classic", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.31364593859543793, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 111, "beams": [{"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Callahan),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.044920111939275954, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Album.ArtistId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Callahan),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.13927693693042015, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Album),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Callahan),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.19503380702073203, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Customer.SupportRepId),Employee.City,!=,Callahan),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.23490988043448283, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Album.ArtistId,!=,Callahan),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.25077590409680706, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Callahan),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.25490562671861455, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Employee),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Callahan),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2560883073277077, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,!=,Callahan),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.25750918915662835, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Callahan),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.26010984887908273, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Callahan),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.260319316388443, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Artist),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Callahan),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2629564938279635, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Callahan),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.27265221458289385, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Artist.Name,!=,Callahan),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2741082081998041, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Artist.ArtistId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Callahan),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.28246453109949876, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.City,!=,Callahan),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2839520393750023, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 112, "beams": [{"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.03896699102129548, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.17168702207417888, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Album.Title))", "score": -0.2951005558275978, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Album),Track.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.3455207876647365, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Album.Title),Album.Title))", "score": -0.35112447257742324, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Album),Track.AlbumId,MediaType.MediaTypeId), Album.Title),Album.Title))", "score": -0.35433662350953865, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.MediaTypeId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.35451700699039534, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Album.Title),Album.Title))", "score": -0.3695820024277491, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.36995954795693176, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,MediaType.MediaTypeId), Album.Title),Album.Title))", "score": -0.38102710868949186, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3922827005129408, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,MediaType.MediaTypeId), Album.Title),Album.Title))", "score": -0.3926004302777003, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Album),Track.MediaTypeId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.39459527508784376, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Album),Track.MediaTypeId,MediaType.MediaTypeId), Album.Title),Album.Title))", "score": -0.40341112948386443, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}, {"orig_question": "Which albums are of Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,Purchased AAC audio file), Album.Title),Album.Title))", "score": -0.42038754458329824, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 113, "beams": [{"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,J. Kay/Jay Kay),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.27726388397813295, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Track.Composer,=,J. Kay/Jay Kay),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3134027739876887, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Track.Composer,=,J. Kay/Jay Kay),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3473683761763178, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Track.Composer,=,J. Kay/Jay Kay),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.350564113019769, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Genre.GenreId,Track.GenreId),Track.Composer,=,J. Kay/Jay Kay),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3623280138155132, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.GenreId),Track.Composer,=,J. Kay/Jay Kay),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3653857891746204, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Track.Composer,=,J. Kay/Jay Kay),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.38019716869990516, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.GenreId),Track.Composer,=,J. Kay/Jay Kay),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3803453947263296, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,InvoiceLine.TrackId),Track.Composer,=,J. Kay/Jay Kay),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.38258387795782245, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Genre.GenreId,Track.GenreId),Track.Composer,=,J. Kay/Jay Kay),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3978821084136516, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,J. Kay/Jay Kay),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3999345062219464, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.GenreId),Track.Composer,=,J. Kay/Jay Kay),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.4014969492859343, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))", "score": -0.40578099222778347, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.TrackId),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))", "score": -0.40826887234444864, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,J. Kay/Jay Kay),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.4090348679192538, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 114, "beams": [{"orig_question": "What album in easy listening has the heaviest song?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Artist.ArtistId),Track.AlbumId,PlaylistTrack.TrackId),Track.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.19629840412427552, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What album in easy listening has the heaviest song?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,PlaylistTrack.TrackId),Track.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.22317143120183483, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What album in easy listening has the heaviest song?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Artist.ArtistId),Track.AlbumId,Track.TrackId),Track.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.29921527470424336, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What album in easy listening has the heaviest song?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Track.AlbumId,Artist.ArtistId),Track.AlbumId,PlaylistTrack.TrackId),Track.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.30571858099697213, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What album in easy listening has the heaviest song?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Artist.ArtistId),Track.AlbumId,PlaylistTrack.TrackId),Track.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.31519898350998427, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What album in easy listening has the heaviest song?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Track.TrackId),Track.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.3260883017818027, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What album in easy listening has the heaviest song?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Track.AlbumId,Album.AlbumId),Track.AlbumId,PlaylistTrack.TrackId),Track.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.3325916080745315, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What album in easy listening has the heaviest song?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,PlaylistTrack.TrackId),Track.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.3420720105875436, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What album in easy listening has the heaviest song?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Artist.ArtistId),Track.AlbumId,InvoiceLine.TrackId),Track.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.34745292607542627, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What album in easy listening has the heaviest song?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Artist.ArtistId),Track.AlbumId,PlaylistTrack.TrackId),Playlist.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.35162212027311635, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What album in easy listening has the heaviest song?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.35208919343814593, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What album in easy listening has the heaviest song?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Artist.ArtistId),Artist.ArtistId,PlaylistTrack.TrackId),Track.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.35943177900596224, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What album in easy listening has the heaviest song?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Artist.ArtistId),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.36045999925718164, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What album in easy listening has the heaviest song?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Track.AlbumId,PlaylistTrack.TrackId),Track.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.36419242245926425, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What album in easy listening has the heaviest song?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.4064757148225908, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 115, "beams": [{"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Company))", "score": -0.4538193479298486, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.Company))", "score": -0.4583098282780726, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.Company))", "score": -0.4990960621190115, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Company),Customer.Company))", "score": -0.5603618386267044, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))", "score": -0.5666945237890613, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.City))", "score": -0.5871827696422078, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -0.5916732499904318, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Company),Customer.Company))", "score": -0.61817805348619, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.City))", "score": -0.6324594838313706, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Company))", "score": -0.6330979134401343, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.City),Customer.Company))", "score": -0.6347731116293289, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Email),Customer.Company))", "score": -0.6446130636213638, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.LastName),Customer.Company))", "score": -0.6784844758985855, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Company),Customer.City))", "score": -0.6887262824056961, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.City),Customer.Company))", "score": -0.6925893860934593, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 116, "beams": [{"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Australia), Invoice.BillingCity),Customer.City))", "score": -0.1980201545034106, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Australia), Invoice.BillingCity),Album.Title))", "score": -0.22599225666863276, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Customer.City))", "score": -0.3046533408437426, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Album.Title))", "score": -0.3326254430089648, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Australia), Invoice.BillingCity),Customer.City))", "score": -0.4734155925784762, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Australia), Invoice.BillingCity),Customer.City))", "score": -0.48123414058727576, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Australia), Invoice.BillingCity),Customer.City))", "score": -0.49844236102444484, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Company,=,Australia), Invoice.BillingCity),Customer.City))", "score": -0.4997859689269717, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Australia), Invoice.BillingCity),Album.Title))", "score": -0.5013876947436984, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Australia), Invoice.BillingCity),Album.Title))", "score": -0.5092062427524979, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Australia), Customer.City),Customer.City))", "score": -0.524791153040951, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Australia), Invoice.BillingCity),Album.Title))", "score": -0.526414463189667, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Company,=,Australia), Invoice.BillingCity),Album.Title))", "score": -0.5277580710921939, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.PostalCode,=,Australia), Invoice.BillingCity),Customer.City))", "score": -0.5411479863200839, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the city names where invoices have been send to in Australia?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Australia), Customer.City),Album.Title))", "score": -0.5527632552061732, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Australia), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 117, "beams": [{"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.02462061489278068, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Album.Title)", "score": -0.7066746936106073, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.728210533603677, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -0.9889303870182566, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),InvoiceLine.Quantity)", "score": -1.11920765502037, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.AlbumId))", "score": -1.131231366774435, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Track.Milliseconds)", "score": -1.134619056029699, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Track.Bytes)", "score": -1.1491289169175902, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "sum(distinct(getData(Artist), Album.Title),Album.Title)", "score": -1.2004344487438405, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -1.2028410691076434, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "sum(distinct(getData(Genre), Album.Title),Album.Title)", "score": -1.2460566864730676, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Genre.Name)", "score": -1.3308269003539899, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Track.AlbumId)", "score": -1.3344751191448794, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Track.Bytes))", "score": -1.3669967030566987, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Customer.LastName)", "score": -1.3852603530097443, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 118, "beams": [{"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.05076887101709858, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.12565488577581413, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),Track.Milliseconds),Album.Title))", "score": -0.19944153159227562, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.22218924600154744, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.35390234366720447, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.38917876496323733, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Bossa Nova),Track.Milliseconds),Album.Title))", "score": -0.40435535037262127, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,MediaType.MediaTypeId),Track.Milliseconds),Album.Title))", "score": -0.4071983732270837, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Genre.GenreId),Track.Milliseconds),Album.Title))", "score": -0.4198688266581916, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name),Album.Title))", "score": -0.4212997733733712, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.4222588780252084, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.48240726719274635, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Bossa Nova),Track.Milliseconds),Album.Title))", "score": -0.4926396754705479, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Track.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.4955262554784838, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Artist.ArtistId),Track.Milliseconds),Album.Title))", "score": -0.49995540485511814, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 119, "beams": [{"orig_question": "How many different customer emails are there for customers that bought a track for the unit price of 0.99", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,0.99), Customer.LastName),MediaType.Name))", "score": -0.24471289279171135, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails are there for customers that bought a track for the unit price of 0.99", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,0.99), MediaType.Name),MediaType.Name))", "score": -0.263873393101355, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails are there for customers that bought a track for the unit price of 0.99", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,0.99), Customer.LastName),Customer.Email))", "score": -0.2863711767668309, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails are there for customers that bought a track for the unit price of 0.99", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,0.99), MediaType.Name),Customer.Email))", "score": -0.30553167707647455, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails are there for customers that bought a track for the unit price of 0.99", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,0.99), Customer.Company),MediaType.Name))", "score": -0.3061584668186312, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails are there for customers that bought a track for the unit price of 0.99", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,0.99), Customer.LastName),MediaType.MediaTypeId))", "score": -0.32239524636307043, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails are there for customers that bought a track for the unit price of 0.99", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,0.99), MediaType.Name),MediaType.MediaTypeId))", "score": -0.34155574667271404, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails are there for customers that bought a track for the unit price of 0.99", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,0.99), Customer.Company),Customer.Email))", "score": -0.34781675079375074, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails are there for customers that bought a track for the unit price of 0.99", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,0.99), Customer.LastName),MediaType.Name))", "score": -0.3518901409614937, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails are there for customers that bought a track for the unit price of 0.99", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,0.99), MediaType.Name),MediaType.Name))", "score": -0.37105064127113735, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails are there for customers that bought a track for the unit price of 0.99", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,0.99), Customer.LastName),MediaType.Name))", "score": -0.3761447139423908, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails are there for customers that bought a track for the unit price of 0.99", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,0.99), Customer.FirstName),MediaType.Name))", "score": -0.38173638345518235, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails are there for customers that bought a track for the unit price of 0.99", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,0.99), Customer.LastName),MediaType.Name))", "score": -0.3833608078885075, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails are there for customers that bought a track for the unit price of 0.99", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,MediaType.MediaTypeId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,0.99), Customer.LastName),MediaType.Name))", "score": -0.3837621344276816, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails are there for customers that bought a track for the unit price of 0.99", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,0.99), Customer.Company),MediaType.MediaTypeId))", "score": -0.38384082038999023, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 120, "beams": [{"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.01972916245358647, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Genre.GenreId),Album.AlbumId,InvoiceLine.TrackId),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.37679323262985254, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Genre.GenreId),Album.AlbumId,Album.AlbumId),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.4059242807956593, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.41771420811711757, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Genre.GenreId),InvoiceLine.TrackId,Album.AlbumId),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.4468452562829243, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.MediaTypeId,Genre.GenreId),Album.AlbumId,InvoiceLine.TrackId),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.4632592348512863, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.GenreId,Genre.GenreId),Album.AlbumId,InvoiceLine.TrackId),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.46624651042972604, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,InvoiceLine.TrackId),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.47833278322182093, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.4815543933620543, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.MediaTypeId,Genre.GenreId),Album.AlbumId,Album.AlbumId),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.49239028301709303, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.GenreId,Genre.GenreId),Album.AlbumId,Album.AlbumId),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.4953775585955328, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.5023517152229102, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.MediaTypeId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.5041802283360021, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.5071675039144418, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}, {"orig_question": "What are the names of the tracks with a track size of 6900619 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),getData(Track),Track.AlbumId,PlaylistTrack.TrackId),Track.Bytes,=,6900619), Track.Name),Track.Name))", "score": -0.5895510800029471, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6900619), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 121, "beams": [{"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.City),Employee.LastName))", "score": -0.13618563966156216, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.City),Employee.City))", "score": -0.2006907548129675, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.LastName),Employee.LastName))", "score": -0.3497821699202177, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.LastName),Employee.City))", "score": -0.41428728507162305, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.City),Employee.Email))", "score": -0.44681584195495816, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Title),Employee.LastName))", "score": -0.45196706162096234, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Country),Employee.LastName))", "score": -0.46792817221285077, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Title),Employee.City))", "score": -0.5164721767723677, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.LastName))", "score": -0.5175667415678618, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Country),Employee.City))", "score": -0.5324332873642561, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.City),Employee.Fax))", "score": -0.5330289538323996, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.LastName))", "score": -0.5479698191702482, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.City),Employee.Title))", "score": -0.5819072361409781, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.City))", "score": -0.5820718567192671, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Fax),Employee.LastName))", "score": -0.5934511731684324, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 122, "beams": [{"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.11539442830213911, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.18413594682885912, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)", "score": -0.20381192083263222, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.UnitPrice)", "score": -0.21749170445243313, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.25099099786944407, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.272468370289002, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.27528581110311107, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2818925435546513, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Track.UnitPrice)", "score": -0.2819666798601124, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice)", "score": -0.28357206961940234, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),Track.UnitPrice)", "score": -0.31614756435050667, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.31973251639616407, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3330574120232222, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Track.UnitPrice)", "score": -0.3366775091550208, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the cost of all the tracks on the Heavy Metal Classic playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.33966414447476245, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 123, "beams": [{"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))", "score": -0.1822816549529307, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Employee.LastName))", "score": -0.26978414195673395, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.FirstName),Customer.LastName))", "score": -0.3594325042058699, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Artist.ArtistId))", "score": -0.4171892150034182, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.FirstName))", "score": -0.42283848363058496, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.FirstName),Employee.LastName))", "score": -0.44693499120967317, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))", "score": -0.4793859912742846, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))", "score": -0.5049413933147662, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))", "score": -0.5085645212520831, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))", "score": -0.53338806766169, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.Email),Customer.LastName))", "score": -0.5564678019572966, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Employee.LastName),Customer.LastName))", "score": -0.5587959593822234, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,+32 02 219 03 03), Customer.LastName),Employee.LastName))", "score": -0.5668884782780879, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))", "score": -0.5727992250313036, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}, {"orig_question": "Find the last name of the customer whose phone number is +32 02 219 03 03.", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,+32 02 219 03 03), Customer.LastName),Employee.LastName))", "score": -0.5924438803185694, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+32 02 219 03 03), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 124, "beams": [{"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.19989416346470534, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Composer,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.28892025694767653, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(getData(Track), Track.Milliseconds),Track.Milliseconds))", "score": -0.3002842345901737, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Bytes),Track.Milliseconds))", "score": -0.4613803380034369, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.4683841687588672, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(InvoiceLine),Track.AlbumId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.47233727282593657, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.UnitPrice),Track.Milliseconds))", "score": -0.4901165717146796, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.4990975742093724, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Album.Title,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.5011385266534489, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Genre.Name,=,Respectable),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.5022121647822777, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Genre.Name,=,Respectable),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.5178841278371987, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Genre.Name,=,Respectable),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.TrackId,Track.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.5197963630731207, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Respectable),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.5319226350611135, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Genre.Name,=,Respectable),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.5363453297212496, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Respectable),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.5475945981160345, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 125, "beams": [{"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.1864929212168978, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Customer.SupportRepId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.1866602192111206, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(Album),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.1874477447255168, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(Album),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Customer.SupportRepId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.1876150427197396, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Invoice.CustomerId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.2256382395038604, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.22580553749808316, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(Album),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Invoice.CustomerId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.2265930630124794, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(Album),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.22676036100670216, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.26776541882517996, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Customer.SupportRepId),Employee.FirstName,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.2679327168194028, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(Album),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.268720242333799, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(Album),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Customer.SupportRepId),Employee.FirstName,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.26888754032802176, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Customer.SupportRepId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.2740720929729323, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Customer.SupportRepId),Customer.CustomerId,Customer.SupportRepId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.2742393909671551, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(Album),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Customer.SupportRepId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.2750269164815513, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 126, "beams": [{"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.005613244082342852, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.9434755461056424, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.AlbumId))", "score": -1.0638520964814098, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Customer.Email))", "score": -1.1707611488309033, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -1.1826413776504738, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Track.Bytes))", "score": -1.1959710264969037, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Customer.City))", "score": -1.3100775891543723, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Track.Name))", "score": -1.3298301449464247, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Customer.LastName))", "score": -1.3438271240034052, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Track.Bytes),Album.Title))", "score": -1.3682654382165789, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -1.4087518772451424, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.AlbumId),Album.Title))", "score": -1.41191722392334, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Artist.ArtistId))", "score": -1.4159375391085571, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Track.AlbumId))", "score": -1.419461335821402, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Artist.Name),Album.Title))", "score": -1.4298507250541912, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 127, "beams": [{"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)", "score": -0.13442214901190125, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (403) 246-9887), Track.TrackId),Track.UnitPrice)", "score": -0.14174536904081325, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.17018140818864277, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Phone,=,+1 (403) 246-9887),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.17961356201815942, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,+1 (403) 246-9887),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)", "score": -0.18504570255822902, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+1 (403) 246-9887),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.19359423930041186, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Phone,=,+1 (403) 246-9887), Track.TrackId),Track.UnitPrice)", "score": -0.19422229333653965, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.Phone,=,+1 (403) 246-9887), Track.TrackId),Track.UnitPrice)", "score": -0.20658896697966522, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Invoice.BillingCountry,=,+1 (403) 246-9887),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.2095206444209178, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (403) 246-9887), Track.TrackId),Track.Bytes)", "score": -0.2446675064996776, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,=,+1 (403) 246-9887),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.2618285772706502, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (403) 246-9887), Track.TrackId),Track.UnitPrice)", "score": -0.26235794743849783, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Employee),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)", "score": -0.2730680931830907, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,=,+1 (403) 246-9887),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.277770823320498, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the sum of all the tracks sold by our employee with the phone number +1 (403) 246-9887?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Employee),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Phone,=,+1 (403) 246-9887), Track.TrackId),Track.UnitPrice)", "score": -0.2798388770564517, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Phone,=,+1 (403) 246-9887),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 128, "beams": [{"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)", "score": -0.24615811288192754, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,7.96), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.2536413010699301, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,7.96), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.28167212840980266, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)", "score": -0.28902659762895977, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,7.96), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.2940525885211669, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)", "score": -0.301407057740324, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,7.96), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3018134903813209, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)", "score": -0.309167959600478, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,7.96), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3141939504926851, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)", "score": -0.3215484197118422, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(merge(filter(getData(Invoice),InvoiceLine.Quantity,>=,7.96),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,7.96), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.33269963956861925, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(merge(filter(getData(Invoice),InvoiceLine.Quantity,>=,7.96),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)", "score": -0.33666857883780343, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,7.96), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.34030473198501565, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(merge(filter(getData(Invoice),InvoiceLine.Quantity,>=,7.96),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,7.96), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3650555195676648, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(merge(filter(getData(Invoice),InvoiceLine.Quantity,>=,7.96),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,7.96), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3651789147001935, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 129, "beams": [{"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.040178345885600104, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),getData(Genre),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.18466565714056923, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))", "score": -0.23782554095547417, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))", "score": -0.2476452563297152, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.25437215690638615, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.28231052745154855, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))", "score": -0.28555776569227675, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.28795169176221586, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.30189007246770705, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))", "score": -0.30193602369637734, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Genre),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))", "score": -0.3143171172851657, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))", "score": -0.3467610881626289, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3502764498698463, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))", "score": -0.36169713127802305, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are in the playlist named Classical 101 - The Basics?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Track.GenreId))", "score": -0.36785956664702757, "correct_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 130, "beams": [{"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.TrackId),Track.UnitPrice)", "score": -0.14003402522791433, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.TrackId),Track.Bytes)", "score": -0.14976084010807036, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)", "score": -0.15653123104847702, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.1754705582667288, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.2213144583984866, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.27769255526370135, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.28874531627467603, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.290862895655122, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.29663188248195316, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.3265446806506937, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3493598383721173, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3546133889684071, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.36434020384856314, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.3718121046577535, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3960931179073291, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 131, "beams": [{"orig_question": "How many different media types do the tracks from the playlist Brazilian Music have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.0429668374996307, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks from the playlist Brazilian Music have?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Brazilian Music),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.13243852620986551, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks from the playlist Brazilian Music have?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.21430135318598598, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks from the playlist Brazilian Music have?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2159104837722558, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks from the playlist Brazilian Music have?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.23526736593969674, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks from the playlist Brazilian Music have?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2645066697109033, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks from the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.27099785780918867, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks from the playlist Brazilian Music have?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.31132599241135156, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks from the playlist Brazilian Music have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.3140901783682476, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks from the playlist Brazilian Music have?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name)", "score": -0.31596279590635057, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks from the playlist Brazilian Music have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.3223622892549204, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks from the playlist Brazilian Music have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.TrackId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.3261276461353858, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks from the playlist Brazilian Music have?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name)", "score": -0.3460541485216412, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks from the playlist Brazilian Music have?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(PlaylistTrack),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Brazilian Music),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.35686174419106187, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks from the playlist Brazilian Music have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Brazilian Music), MediaType.Name),Customer.Company))", "score": -0.3746076213280943, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 132, "beams": [{"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8271418), Track.Composer),Track.Composer))", "score": -0.019537484862667043, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8271418), Track.Composer),Track.Bytes))", "score": -0.4898907189563033, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8271418), Track.Composer),Track.Name))", "score": -0.49295713951141806, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.TrackId,Album.AlbumId),Track.Bytes,>,8271418), Track.Composer),Track.Composer))", "score": -0.5559531340778279, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,8271418),merge(getData(InvoiceLine),getData(Artist),Album.ArtistId,Invoice.InvoiceId),Track.TrackId,Album.AlbumId), Track.Composer),Track.Composer))", "score": -0.56719456949046, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,8271418),merge(getData(Track),getData(Artist),Album.ArtistId,Invoice.InvoiceId),Track.TrackId,Album.AlbumId), Track.Composer),Track.Composer))", "score": -0.5686827426998579, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,8271418),merge(getData(InvoiceLine),getData(Artist),Album.ArtistId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.5735923675277855, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,8271418),merge(getData(Track),getData(Artist),Album.ArtistId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.5750805407371835, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,8271418),merge(getData(InvoiceLine),getData(Artist),Album.ArtistId,Album.AlbumId),Track.TrackId,Album.AlbumId), Track.Composer),Track.Composer))", "score": -0.5773061730592547, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,8271418),merge(getData(Track),getData(Artist),Album.ArtistId,Album.AlbumId),Track.TrackId,Album.AlbumId), Track.Composer),Track.Composer))", "score": -0.5787943462686527, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,8271418),merge(getData(InvoiceLine),getData(Artist),Album.ArtistId,Album.AlbumId),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.5837039710965803, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8271418), Track.Composer),Track.Composer))", "score": -0.5845649311158923, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,8271418),merge(getData(Track),getData(Artist),Album.ArtistId,Album.AlbumId),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.5851921321230885, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,8271418),merge(getData(InvoiceLine),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.TrackId,Album.AlbumId), Track.Composer),Track.Composer))", "score": -0.604649862824179, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,8271418),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.TrackId,Album.AlbumId), Track.Composer),Track.Composer))", "score": -0.606138036033577, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 133, "beams": [{"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Playlist),Track.Name,>,7045314), Playlist.Name),Playlist.Name))", "score": -0.25079666431884107, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Playlist),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))", "score": -0.2508052473876887, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Playlist),Track.UnitPrice,>,7045314), Playlist.Name),Playlist.Name))", "score": -0.3346452897403651, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Playlist),Track.Name,=,7045314), Playlist.Name),Playlist.Name))", "score": -0.3970918131981307, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Playlist),Track.Bytes,=,7045314), Playlist.Name),Playlist.Name))", "score": -0.39710039626697835, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Playlist),Employee.Email,>,7045314), Playlist.Name),Playlist.Name))", "score": -0.4005613511417323, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Playlist),Employee.Title,>,7045314), Playlist.Name),Playlist.Name))", "score": -0.41276418026427564, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Playlist),Track.Composer,>,7045314), Playlist.Name),Playlist.Name))", "score": -0.44287704285125074, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Playlist),Playlist.Name,>,7045314), Playlist.Name),Playlist.Name))", "score": -0.46141599472503003, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Playlist),Track.Milliseconds,>,7045314), Playlist.Name),Playlist.Name))", "score": -0.4681752806518489, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Playlist),Track.UnitPrice,=,7045314), Playlist.Name),Playlist.Name))", "score": -0.48094043861965474, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Playlist),Track.TrackId,>,7045314), Playlist.Name),Playlist.Name))", "score": -0.502605724892419, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Playlist),Employee.Email,=,7045314), Playlist.Name),Playlist.Name))", "score": -0.5468565000210219, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Playlist),Employee.Title,=,7045314), Playlist.Name),Playlist.Name))", "score": -0.5590593291435653, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many different playlists with a track that is bigger than 7045314 bytes do exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Playlist),Track.Name,>=,7045314), Playlist.Name),Playlist.Name))", "score": -0.5654260886822158, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,7045314), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 134, "beams": [{"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.07257143820221038, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.13529861458087042, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.2348399498140751, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.2620262464149462, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u2019s Music),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.26889362763859387, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u2019s Music),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.28761812408369597, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u2019s Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.29205581426131344, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.2935532869978531, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.2968439446977454, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.31402528324088835, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.32323399535711095, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.3259400027877243, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Invoice.InvoiceDate,=,90\u2019s Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3268544935649621, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u2019s Music),getData(InvoiceLine),PlaylistTrack.PlaylistId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3459246438138216, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.36155449686707325, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 135, "beams": [{"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.030459431303859325, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.6028035416557022, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.6531014281533094, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.LastName))", "score": -0.6782527059897194, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.7281890507353841, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Artist.Name))", "score": -0.7743223931304635, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -0.8286267202956168, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Employee.LastName),Artist.Name))", "score": -0.8380216737931623, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Genre.Name))", "score": -0.8577589099044655, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -1.0135613959411323, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Track.Composer))", "score": -1.06590385662831, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.Fax))", "score": -1.1138486808072574, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.ArtistId),Artist.Name))", "score": -1.1209131728171433, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Genre), Artist.Name),Artist.Name))", "score": -1.122211996986978, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Employee.City),Artist.Name))", "score": -1.1288716356413633, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 136, "beams": [{"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.05331355134527343, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),Track.Bytes),Album.Title))", "score": -0.19454725371031883, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.20422052925146608, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Album.Title,!=,Protected AAC audio file),Track.Bytes),Album.Title))", "score": -0.2740440559992294, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.310963431690831, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),Album.Title,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.3148962004453039, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),Album.Title,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.32715533413696807, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,!=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.3276687532761969, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.34112241797023607, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.AlbumId),Track.Bytes),Album.Title))", "score": -0.36284132595867163, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),Track.MediaTypeId,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.37822117792779675, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),Customer.LastName,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.38722198548018405, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.388765252070558, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.3892724947150581, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the title of the album that is not a Protected AAC audio file with the most track bytes?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Employee.Email,!=,Protected AAC audio file),Track.Bytes),Album.Title))", "score": -0.40996609395364003, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 137, "beams": [{"orig_question": "Do there exist no media type names of the songs in the album of the artists named Leonard Bernstein & New York Philharmonic.", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Leonard Bernstein & New York Philharmonic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.0380965633982702, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do there exist no media type names of the songs in the album of the artists named Leonard Bernstein & New York Philharmonic.", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.13027159611381856, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do there exist no media type names of the songs in the album of the artists named Leonard Bernstein & New York Philharmonic.", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Leonard Bernstein & New York Philharmonic), MediaType.Name),MediaType.Name))", "score": -0.21607714022934396, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do there exist no media type names of the songs in the album of the artists named Leonard Bernstein & New York Philharmonic.", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),merge(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.25106372854742115, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do there exist no media type names of the songs in the album of the artists named Leonard Bernstein & New York Philharmonic.", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Leonard Bernstein & New York Philharmonic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),Customer.Company))", "score": -0.28808527150735064, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do there exist no media type names of the songs in the album of the artists named Leonard Bernstein & New York Philharmonic.", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Leonard Bernstein & New York Philharmonic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),Album.Title))", "score": -0.2896010375129804, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do there exist no media type names of the songs in the album of the artists named Leonard Bernstein & New York Philharmonic.", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.30608123595019365, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do there exist no media type names of the songs in the album of the artists named Leonard Bernstein & New York Philharmonic.", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Leonard Bernstein & New York Philharmonic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),Customer.LastName))", "score": -0.30614558149306037, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do there exist no media type names of the songs in the album of the artists named Leonard Bernstein & New York Philharmonic.", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),merge(merge(getData(Track),getData(Track),Album.AlbumId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.31626771901772255, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do there exist no media type names of the songs in the album of the artists named Leonard Bernstein & New York Philharmonic.", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),merge(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.3220935511202792, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do there exist no media type names of the songs in the album of the artists named Leonard Bernstein & New York Philharmonic.", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.3265264791907167, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do there exist no media type names of the songs in the album of the artists named Leonard Bernstein & New York Philharmonic.", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Leonard Bernstein & New York Philharmonic),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.34007934492581826, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do there exist no media type names of the songs in the album of the artists named Leonard Bernstein & New York Philharmonic.", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Leonard Bernstein & New York Philharmonic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.MediaTypeId))", "score": -0.34358380265014893, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do there exist no media type names of the songs in the album of the artists named Leonard Bernstein & New York Philharmonic.", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),merge(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.35271898156312775, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do there exist no media type names of the songs in the album of the artists named Leonard Bernstein & New York Philharmonic.", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Leonard Bernstein & New York Philharmonic),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), Genre.Name),MediaType.Name))", "score": -0.3548859522721867, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Leonard Bernstein & New York Philharmonic),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 138, "beams": [{"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))", "score": -0.03571576231479412, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.State),Employee.Email))", "score": -0.4899898160001612, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.FirstName))", "score": -0.4923686317852116, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.BirthDate),Employee.Email))", "score": -0.49296355133265024, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.FirstName),Employee.Email))", "score": -0.5130745757123805, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.State))", "score": -0.5389503769329167, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.LastName))", "score": -0.5600638322284794, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,+1 (403) 467-3351), Employee.Email),Employee.Email))", "score": -0.5717702307956642, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.BirthDate))", "score": -0.5885286859920598, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.LastName),Employee.Email))", "score": -0.6029754269620753, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Title))", "score": -0.6345291666439152, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Title),Employee.Email))", "score": -0.6549761879941798, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Country))", "score": -0.6669085554531193, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Track.UnitPrice))", "score": -0.6829969219616032, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}, {"orig_question": "Find the email of the employee whose phone number is +1 (403) 467-3351.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Country),Employee.Email))", "score": -0.7132978427907801, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-3351), Employee.Email),Employee.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 139, "beams": [{"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Quiet Songs),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.20740111137822087, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.21844888412100327, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Quiet Songs),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.22607603210130042, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2307183144110356, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Artist.Name,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.24981528722721752, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Quiet Songs),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2614931557195285, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2620847175172499, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Quiet Songs),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.28016807644260805, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Quiet Songs),getData(Album),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2921476660375558, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Quiet Songs),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.BillingCountry))", "score": -0.2923277160024437, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.BillingCountry))", "score": -0.2956684118269279, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Track),Artist.ArtistId,Track.AlbumId),Artist.Name,=,Quiet Songs),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.29615064630803634, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Quiet Songs),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.29646460439901595, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,Quiet Songs),getData(Album),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.30441700357835794, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.BillingCountry))", "score": -0.30793784680126474, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 140, "beams": [{"orig_question": "What are the different unit prices for tracks with a length greater than 412000 milliseconds that are in the playlist Classical?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,=,Classical), Track.UnitPrice),Track.UnitPrice))", "score": -0.3478330479520082, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds,>,412000),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the different unit prices for tracks with a length greater than 412000 milliseconds that are in the playlist Classical?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))", "score": -0.38608272674144023, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds,>,412000),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the different unit prices for tracks with a length greater than 412000 milliseconds that are in the playlist Classical?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Playlist.Name,=,Classical), Track.UnitPrice),Track.UnitPrice))", "score": -0.3920706690805673, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds,>,412000),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the different unit prices for tracks with a length greater than 412000 milliseconds that are in the playlist Classical?", "inferred_code": "done(extractValues(distinct(getData(Playlist), Employee.Email),Track.UnitPrice))", "score": -0.39484217467359145, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds,>,412000),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the different unit prices for tracks with a length greater than 412000 milliseconds that are in the playlist Classical?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))", "score": -0.40233709394854117, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds,>,412000),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the different unit prices for tracks with a length greater than 412000 milliseconds that are in the playlist Classical?", "inferred_code": "done(extractValues(distinct(getData(Playlist), Playlist.Name),Track.UnitPrice))", "score": -0.4280243305689723, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds,>,412000),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the different unit prices for tracks with a length greater than 412000 milliseconds that are in the playlist Classical?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.4469236262937115, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds,>,412000),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the different unit prices for tracks with a length greater than 412000 milliseconds that are in the playlist Classical?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Playlist.Name,=,Classical), Track.UnitPrice),Track.UnitPrice))", "score": -0.45360002234156127, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds,>,412000),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the different unit prices for tracks with a length greater than 412000 milliseconds that are in the playlist Classical?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.46317799350081246, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds,>,412000),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the different unit prices for tracks with a length greater than 412000 milliseconds that are in the playlist Classical?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))", "score": -0.482055369820924, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds,>,412000),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the different unit prices for tracks with a length greater than 412000 milliseconds that are in the playlist Classical?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,Track.GenreId), Track.UnitPrice),Track.UnitPrice))", "score": -0.4882925467015584, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds,>,412000),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the different unit prices for tracks with a length greater than 412000 milliseconds that are in the playlist Classical?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))", "score": -0.4983097325978832, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds,>,412000),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the different unit prices for tracks with a length greater than 412000 milliseconds that are in the playlist Classical?", "inferred_code": "done(extractValues(distinct(getData(Employee), Employee.Email),Track.UnitPrice))", "score": -0.5150309201122746, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds,>,412000),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the different unit prices for tracks with a length greater than 412000 milliseconds that are in the playlist Classical?", "inferred_code": "done(extractValues(distinct(getData(Playlist), Track.UnitPrice),Track.UnitPrice))", "score": -0.5480842276182399, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds,>,412000),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the different unit prices for tracks with a length greater than 412000 milliseconds that are in the playlist Classical?", "inferred_code": "done(extractValues(distinct(getData(Employee), Playlist.Name),Track.UnitPrice))", "score": -0.5482130760076555, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),filter(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds,>,412000),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 141, "beams": [{"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))", "score": -0.05482809742079553, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Country))", "score": -0.31711976167844114, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Country),Customer.Phone))", "score": -0.4006334369360047, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Fax))", "score": -0.48584006664441404, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Telus), Customer.Phone),Customer.Phone))", "score": -0.532720864127441, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Address),Customer.Phone))", "score": -0.5359535639463502, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,Telus), Customer.Phone),Customer.Phone))", "score": -0.5736131671174007, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Telus), Customer.Phone),Customer.Phone))", "score": -0.5783591869576412, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Company))", "score": -0.59952042934583, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.PostalCode),Customer.Phone))", "score": -0.6015769069372254, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Invoice.CustomerId))", "score": -0.6038037383286792, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Employee.Phone))", "score": -0.6067979776589709, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Fax),Customer.Phone))", "score": -0.6112798278509217, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Company),Customer.Phone))", "score": -0.6177092616735536, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the costumors phone numbers when the company is Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.PostalCode))", "score": -0.6240596019952136, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 142, "beams": [{"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Playlist),Track.Composer,>,9640349), Playlist.Name),Playlist.Name))", "score": -0.24356216379237594, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Playlist),Track.UnitPrice,>,9640349), Playlist.Name),Playlist.Name))", "score": -0.24530047365260543, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Playlist),Employee.Title,>,9640349), Playlist.Name),Playlist.Name))", "score": -0.27166372724605026, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Playlist),Invoice.InvoiceDate,>,9640349), Playlist.Name),Playlist.Name))", "score": -0.2954145688636345, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>,9640349), Playlist.Name),Playlist.Name))", "score": -0.3024433103533783, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Playlist),Track.TrackId,>,9640349), Playlist.Name),Playlist.Name))", "score": -0.304062919698481, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Playlist),Track.Bytes,>,9640349), Playlist.Name),Playlist.Name))", "score": -0.37596027740073623, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,>,9640349), Playlist.Name),Playlist.Name))", "score": -0.41815017730885273, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Playlist),Track.Composer,!=,9640349), Playlist.Name),Playlist.Name))", "score": -0.4193760212583584, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Playlist),Track.UnitPrice,!=,9640349), Playlist.Name),Playlist.Name))", "score": -0.42111433111858787, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,9640349), Playlist.Name),Playlist.Name))", "score": -0.430018507063549, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Playlist),Employee.Title,!=,9640349), Playlist.Name),Playlist.Name))", "score": -0.4474775847120327, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Playlist),Invoice.InvoiceDate,!=,9640349), Playlist.Name),Playlist.Name))", "score": -0.4712284263296169, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Playlist),Track.TrackId,!=,9640349), Playlist.Name),Playlist.Name))", "score": -0.4798767771644634, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Playlist),Playlist.Name,>,9640349), Playlist.Name),Playlist.Name))", "score": -0.4997522998673958, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 143, "beams": [{"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.1977675676708249, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Album.Title,=,Protected MPEG-4 video file),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.20728459126214266, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Protected MPEG-4 video file),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.25556790423989645, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Genre.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.26138429278446706, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Protected MPEG-4 video file),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.2709724549440324, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Artist),Album.ArtistId,Album.AlbumId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.28561714835879176, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.29980743019645234, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Genre),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.31503226599067374, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Genre.Name,=,Protected MPEG-4 video file),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.3191846293535386, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.3274404313287577, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Protected MPEG-4 video file),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.337029644005601, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.3408728919964236, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.35607583195757964, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Album.Title,=,Protected MPEG-4 video file),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.35658384295478573, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Album.Title,=,Protected MPEG-4 video file),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.36016906805273036, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 144, "beams": [{"orig_question": "Whats the different postal codes we have sent a higher invoice than 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.21625564709756873, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Whats the different postal codes we have sent a higher invoice than 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2322054924115946, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Whats the different postal codes we have sent a higher invoice than 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.28097246304605505, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Whats the different postal codes we have sent a higher invoice than 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,>,10.91), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.29692230836008093, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Whats the different postal codes we have sent a higher invoice than 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.431711074863415, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Whats the different postal codes we have sent a higher invoice than 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.47048803881261847, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Whats the different postal codes we have sent a higher invoice than 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,>,10.91), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.4964278908119013, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Whats the different postal codes we have sent a higher invoice than 10.91?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>,10.91), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.5168095970393941, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Whats the different postal codes we have sent a higher invoice than 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,>,10.91), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.5352048547611048, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Whats the different postal codes we have sent a higher invoice than 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Artist.Name))", "score": -0.5441579641446879, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Whats the different postal codes we have sent a higher invoice than 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,>,10.91), Invoice.BillingPostalCode),Artist.Name))", "score": -0.5601078094587137, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Whats the different postal codes we have sent a higher invoice than 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5676908595160057, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Whats the different postal codes we have sent a higher invoice than 10.91?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.5698613184040299, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Whats the different postal codes we have sent a higher invoice than 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,<,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5836407048300316, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Whats the different postal codes we have sent a higher invoice than 10.91?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.Quantity,>,10.91), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.5848015445795083, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 145, "beams": [{"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Email),Customer.Email))", "score": -0.14651192885139608, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Email),Customer.Email))", "score": -0.18542136412361288, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.4061931038474691, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Email),Album.Title))", "score": -0.45975596804419183, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), MediaType.Name),Customer.Email))", "score": -0.46323764298358583, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Album.Title),Customer.Email))", "score": -0.4633774754802289, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Email),Album.Title))", "score": -0.49866540331640863, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), MediaType.Name),Customer.Email))", "score": -0.5021470782558026, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Album.Title),Customer.Email))", "score": -0.5022869107524457, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,None), Customer.Email),Customer.Email))", "score": -0.5495078877756896, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,None), Customer.Email),Customer.Email))", "score": -0.5512568072626891, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Email),MediaType.Name))", "score": -0.5727060546378198, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.LastName),Customer.Email))", "score": -0.6030004319945874, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Email),MediaType.Name))", "score": -0.6116154899100366, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.LastName),Customer.Email))", "score": -0.6419098672668042, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 146, "beams": [{"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,Milton Nascimento, Caetano Veloso), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.18710143546597402, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(filter(getData(Track),Track.Composer,>,Milton Nascimento, Caetano Veloso),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,Milton Nascimento, Caetano Veloso), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2652131570152881, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(filter(getData(Track),Track.Composer,!=,Milton Nascimento, Caetano Veloso),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,Milton Nascimento, Caetano Veloso), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2984004743733512, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,Milton Nascimento, Caetano Veloso),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.30729817258415815, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(filter(getData(Track),Track.Composer,=,Milton Nascimento, Caetano Veloso),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,Milton Nascimento, Caetano Veloso), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.30883230017217284, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,Milton Nascimento, Caetano Veloso), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.31096268469875504, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(filter(getData(Genre),Track.Composer,>,Milton Nascimento, Caetano Veloso),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,Milton Nascimento, Caetano Veloso), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.32898712924663537, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,Milton Nascimento, Caetano Veloso),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.33827540501974795, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,14234427), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.33885392494303535, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,>,14234427), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.34914597469511055, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)", "score": -0.3535901343717978, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(filter(getData(Track),Track.Name,>,14234427),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,Milton Nascimento, Caetano Veloso), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.35949260352724133, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(filter(getData(Genre),Track.Composer,!=,Milton Nascimento, Caetano Veloso),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,Milton Nascimento, Caetano Veloso), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.36217449571526644, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(filter(getData(Genre),Track.Composer,=,Milton Nascimento, Caetano Veloso),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,Milton Nascimento, Caetano Veloso), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3726063283578833, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(filter(getData(Track),Track.Composer,>,Milton Nascimento, Caetano Veloso),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,Milton Nascimento, Caetano Veloso), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.38498649218308884, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 147, "beams": [{"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))", "score": -0.05246676105359871, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.PostalCode))", "score": -0.5618936277875957, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.FirstName))", "score": -0.5906506699374552, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Fax))", "score": -0.6036352561042682, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.LastName))", "score": -0.6285495667455592, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.LastName))", "score": -0.6820453417728569, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Artist.ArtistId))", "score": -0.6903041083321269, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Album.Title))", "score": -0.7265767308893443, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Employee.LastName))", "score": -0.7511195218490192, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.LastName))", "score": -0.782361327526444, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Company))", "score": -0.788274751433067, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Phone))", "score": -0.8505599661687008, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Email))", "score": -0.869758800521917, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.LastName))", "score": -0.8801117135965383, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Genre.GenreId))", "score": -0.9096930580628957, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 148, "beams": [{"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,cole porter), Track.Bytes),Track.Bytes))", "score": -0.060273999167748116, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))", "score": -0.31794535350627484, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,cole porter), Track.Bytes),Track.Bytes))", "score": -0.3794376103264767, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,cole porter), Track.Bytes),Track.Bytes))", "score": -0.40883027744121136, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,cole porter), Track.UnitPrice),Track.Bytes))", "score": -0.43492818605727734, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,cole porter), Track.Bytes),Track.Bytes))", "score": -0.4663197321874577, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,cole porter), Track.Composer),Track.Bytes))", "score": -0.4916956497413594, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,cole porter), Track.Milliseconds),Track.Bytes))", "score": -0.49193907511062207, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Playlist.Name,=,cole porter), Track.Bytes),Track.Bytes))", "score": -0.6058389170152623, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,cole porter), Track.Name),Track.Bytes))", "score": -0.621153570531078, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>=,cole porter), Track.Bytes),Track.Bytes))", "score": -0.6371089646650034, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,cole porter), Track.Bytes),Track.UnitPrice))", "score": -0.6596990798657316, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.UnitPrice),Track.Bytes))", "score": -0.6925995403958041, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,cole porter), Track.Bytes),Track.Bytes))", "score": -0.701387628732391, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,cole porter), Track.Bytes),Track.Bytes))", "score": -0.7268885595781285, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 149, "beams": [{"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))", "score": -0.431378702844589, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.Company))", "score": -0.44795918240289195, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Company))", "score": -0.49595468938248544, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Company))", "score": -0.5660380292973042, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.Company))", "score": -0.5870960224592733, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.PostalCode))", "score": -0.5890821843140381, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.PostalCode))", "score": -0.605662663872341, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Company))", "score": -0.6239847331414804, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.PostalCode))", "score": -0.6536581708519346, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Joakim), Customer.Company),Customer.Company))", "score": -0.6612941142539057, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Address),Customer.Company))", "score": -0.6902961516667702, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.Company))", "score": -0.6992443501166945, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.LastName))", "score": -0.702342592878007, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.FirstName))", "score": -0.7134623361836582, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.City))", "score": -0.71459835721372, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 150, "beams": [{"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.10677546202408324, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.17332382002243427, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2090145926091829, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.2626305424481541, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCountry,=,Norway), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.27113834356683164, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3291789004465051, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Customer.Email),Track.Milliseconds)", "score": -0.3500031843644902, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Norway), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.35499668247982513, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.35668793920782227, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.36181877713596106, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.Company,=,Norway), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.36389149611641286, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Milliseconds)", "score": -0.36389973341839704, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.36486967303325374, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCountry,=,Norway), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.36594763759363375, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Norway), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3727187896803268, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 151, "beams": [{"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))", "score": -0.0534374215640809, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))", "score": -0.48163099034515355, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Fax))", "score": -0.7541210068287619, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.Fax))", "score": -0.7577643265325389, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.PostalCode))", "score": -0.7916662453004931, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Company))", "score": -0.8278917375898198, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Phone))", "score": -0.8401103187493577, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.Fax))", "score": -0.8932380316468843, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Country))", "score": -0.9230572218817826, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))", "score": -0.9431069399846563, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Employee.Fax))", "score": -0.955980437611868, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Employee.Fax),Customer.Fax))", "score": -0.9580524128689731, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Album.Title),Customer.Fax))", "score": -0.9795479201760848, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Fax))", "score": -0.9999301426627705, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "how many customer fax numbers are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Fax))", "score": -1.0248926061586376, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 152, "beams": [{"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.10150079927274197, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,=,CA),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.17709333122448037, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,=,CA), MediaType.Name),MediaType.Name))", "score": -0.21458219968329717, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA), MediaType.Name),MediaType.Name))", "score": -0.21545724575162487, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Customer.State,=,CA),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.21686973892074934, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.23305030494875917, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,CA),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.23389356595328195, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),InvoiceLine.UnitPrice,=,CA),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.24358661374743196, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.24371310356180406, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,=,CA), MediaType.Name),MediaType.Name))", "score": -0.2783708874909324, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,CA), MediaType.Name),MediaType.Name))", "score": -0.2797536005099377, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,CA),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2813150772322895, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Customer.State,=,CA),merge(getData(InvoiceLine),getData(MediaType),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.28765184797376925, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,CA),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.30765696229544237, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}, {"orig_question": "What types of media are there for the tracks for which the invoice was invoiced in the state CA?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,=,CA), MediaType.Name),MediaType.Name))", "score": -0.31990711627767243, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,!=,CA), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 153, "beams": [{"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.4287820599327564, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Tucson), MediaType.Name),Track.Name))", "score": -0.4488346992550199, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.Name))", "score": -0.4554535687233751, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Tucson), MediaType.Name),Track.Name))", "score": -0.45554581145938117, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Tucson), MediaType.Name),Track.Name))", "score": -0.45682011832326214, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.UnitPrice))", "score": -0.4580867032021898, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),Playlist.PlaylistId,Track.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.48139045812216846, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Tucson), MediaType.Name),Track.Name))", "score": -0.48225063450730066, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(MediaType),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Tucson), MediaType.Name),Track.Name))", "score": -0.4831367904820044, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.Name))", "score": -0.48342091148866856, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Tucson), MediaType.Name),Track.UnitPrice))", "score": -0.4908777294514473, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Tucson), MediaType.Name),MediaType.Name))", "score": -0.4962894577888731, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,PlaylistTrack.PlaylistId),MediaType.Name,=,Tucson), MediaType.Name),Track.Name))", "score": -0.4997450242909234, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Tucson), MediaType.Name),Customer.Email))", "score": -0.5021948293828001, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Tucson), Track.UnitPrice),Track.Name))", "score": -0.5092837598506493, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 154, "beams": [{"orig_question": "What postal codes in Argentina did we send invoices to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.09732820336762416, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal codes in Argentina did we send invoices to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.19495035206023204, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal codes in Argentina did we send invoices to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.33252646272126185, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal codes in Argentina did we send invoices to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Argentina), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.43014861141386973, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal codes in Argentina did we send invoices to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.47217674982789504, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal codes in Argentina did we send invoices to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.5019775802368258, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal codes in Argentina did we send invoices to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5697988985205029, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal codes in Argentina did we send invoices to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Artist.Name))", "score": -0.5711844140762423, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal codes in Argentina did we send invoices to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Genre.Name))", "score": -0.5884532505745028, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal codes in Argentina did we send invoices to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Argentina), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.5995997289294337, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal codes in Argentina did we send invoices to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingAddress),Invoice.BillingPostalCode))", "score": -0.6266988689178561, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal codes in Argentina did we send invoices to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6374936295771931, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal codes in Argentina did we send invoices to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingAddress))", "score": -0.6393526369804476, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal codes in Argentina did we send invoices to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.661581595065627, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal codes in Argentina did we send invoices to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6615823103213643, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Argentina), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 155, "beams": [{"orig_question": "What are the email addresses of all customers that work at Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Telus), Customer.Email),Customer.Email))", "score": -0.1514395318172319, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of all customers that work at Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Email),Customer.Email))", "score": -0.20466457225302292, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of all customers that work at Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Telus), Customer.Email),Customer.Email))", "score": -0.2588800630710466, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of all customers that work at Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),InvoiceLine.Quantity,=,Telus), Customer.Email),Customer.Email))", "score": -0.34907174028376176, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of all customers that work at Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,Telus), Customer.Email),Customer.Email))", "score": -0.3928607694051607, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of all customers that work at Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,Telus), Customer.Email),Customer.Email))", "score": -0.4386029235265596, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of all customers that work at Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Telus), Customer.Email),Customer.Email))", "score": -0.46754267729738785, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of all customers that work at Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Telus), Customer.Email),Customer.Email))", "score": -0.4893956176183565, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of all customers that work at Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Telus), Customer.Email),Customer.Email))", "score": -0.4932516507051332, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of all customers that work at Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.Total,=,Telus), Customer.Email),Customer.Email))", "score": -0.5448347321889742, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of all customers that work at Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),InvoiceLine.InvoiceLineId,=,Telus), Customer.Email),Customer.Email))", "score": -0.5491223327062471, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of all customers that work at Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingAddress,=,Telus), Customer.Email),Customer.Email))", "score": -0.5623222581289156, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of all customers that work at Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),InvoiceLine.UnitPrice,=,Telus), Customer.Email),Customer.Email))", "score": -0.5630400172613008, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of all customers that work at Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Telus), Customer.Email),InvoiceLine.UnitPrice))", "score": -0.601305692567621, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of all customers that work at Telus?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Email),InvoiceLine.UnitPrice))", "score": -0.654530733003412, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Telus), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 156, "beams": [{"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Jailbait), Track.Composer),Track.Composer))", "score": -0.17758280985708552, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Jailbait), Invoice.BillingCity),Track.Composer))", "score": -0.34924651139135676, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Artist.Name,=,Jailbait), Track.Composer),Track.Composer))", "score": -0.37987189941759425, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,Jailbait), Track.Composer),Track.Composer))", "score": -0.38651702754850703, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Jailbait), Track.Composer),InvoiceLine.Quantity))", "score": -0.40202065014000254, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Composer,=,Jailbait), Track.Composer),Track.Composer))", "score": -0.44643248074407893, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(InvoiceLine),Track.Composer,=,Jailbait), Track.Composer),Track.Composer))", "score": -0.4661116098677667, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Track.Composer,=,Jailbait), Track.Composer),Track.Composer))", "score": -0.5027015303885491, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Track.Composer,=,Jailbait), Track.Composer),Track.Composer))", "score": -0.5064948295866998, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Artist.Name,=,Jailbait), Invoice.BillingCity),Track.Composer))", "score": -0.5515356009518655, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,Jailbait), Invoice.BillingCity),Track.Composer))", "score": -0.5581807290827783, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.BillingCity,=,Jailbait), Track.Composer),Track.Composer))", "score": -0.5618792717968972, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Jailbait), InvoiceLine.InvoiceLineId),Track.Composer))", "score": -0.5687326883589776, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Jailbait), Employee.City),Track.Composer))", "score": -0.571267761445597, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}, {"orig_question": "Who is the composer of Jailbait?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Jailbait), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.5736843516742738, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Jailbait), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 157, "beams": [{"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith), Track.TrackId),Track.UnitPrice)", "score": -0.09188086148713383, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.20533181533357145, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Aerosmith), Track.TrackId),Track.UnitPrice)", "score": -0.20639893577409735, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.TrackId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.26376907645503134, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.3137878092775256, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Composer,!=,Aerosmith), Track.TrackId),Track.UnitPrice)", "score": -0.35007190687246964, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.35609450383818925, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Composer,!=,Aerosmith), Track.TrackId),Track.UnitPrice)", "score": -0.36059318728758516, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.TrackId),Artist.Name,!=,Aerosmith), Track.TrackId),Track.UnitPrice)", "score": -0.36967087794250564, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.TrackId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.3722250800398897, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith), Track.TrackId),Track.UnitPrice)", "score": -0.37350023971278024, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Aerosmith),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.4041385108257392, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(filter(getData(Track),Artist.Name,!=,Aerosmith), Track.TrackId),Track.UnitPrice)", "score": -0.42551856369838487, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.47267797338175155, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks by Aerosmith?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5223487394451835, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 158, "beams": [{"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.039300709275266854, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.280592005012295, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5196956799009058, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingAddress))", "score": -0.5565338221022103, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.5724768724867317, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.5852633204885933, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5946139558327559, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5992579778419209, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6087270244133833, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingAddress),Invoice.BillingPostalCode))", "score": -0.6380629823652271, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6489519671471576, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6511890772742375, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Genre.Name))", "score": -0.6786746468969795, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.6987171457258228, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "what is the billing postal code from spain?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.7418820723069075, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Spain), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 159, "beams": [{"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.05394948864362852, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.1182210786765559, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.17255568032651464, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Genre),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.1994443474297276, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.22427379376002332, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.22826241937284938, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.24375589144562823, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.31554634333391274, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.31625974216904457, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.33560151970629537, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.3422842109753071, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),Track.GenreId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.34507781411216637, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Genre),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.36397574435171054, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.392793843187177, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.3931496670533164, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 160, "beams": [{"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Track),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Title,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.3169148639737108, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Track),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Employee.Title,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.32538622796509675, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Track),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.325390019431092, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.3302339387132183, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Track),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Title,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.330258627841603, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Track),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Employee.FirstName,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.3338613834224779, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Track),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,InvoiceLine.InvoiceId),Employee.Title,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.33666126339380187, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Track),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Employee.Title,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.33872999183298885, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Track),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.3387337832989841, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Title,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.33926655080108054, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Track),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId),Employee.Title,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.33994692167726515, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Title,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.3402548115956176, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Track),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,InvoiceLine.InvoiceId),Employee.FirstName,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.34513642526051735, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Track),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Employee.FirstName,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.34720515369970434, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the unite price of tracks purchased by employees with the status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Track),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.InvoiceId),Employee.FirstName,=,AB), Track.UnitPrice),Track.UnitPrice))", "score": -0.34842208354398063, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 161, "beams": [{"orig_question": "Which playlists contain tracks shorter than or as long as 2907615 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615), Playlist.Name),Playlist.Name))", "score": -0.06300034514700259, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks shorter than or as long as 2907615 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,2907615), Playlist.Name),Playlist.Name))", "score": -0.1836253793511925, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks shorter than or as long as 2907615 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,<=,2907615),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.23787159562325574, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks shorter than or as long as 2907615 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,<=,2907615), Playlist.Name),Playlist.Name))", "score": -0.2550617636296161, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks shorter than or as long as 2907615 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,2907615), Playlist.Name),Playlist.Name))", "score": -0.3040996813056805, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks shorter than or as long as 2907615 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,2907615), Playlist.Name),Playlist.Name))", "score": -0.3080897781983278, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks shorter than or as long as 2907615 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,2907615),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3105597662515175, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks shorter than or as long as 2907615 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615), Playlist.Name),Playlist.Name))", "score": -0.3456999913168215, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks shorter than or as long as 2907615 milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,2907615),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.37676738454179676, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks shorter than or as long as 2907615 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615), Playlist.Name),Employee.FirstName))", "score": -0.4152472801535018, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks shorter than or as long as 2907615 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.Name),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615), Playlist.Name),Playlist.Name))", "score": -0.4214848547777983, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks shorter than or as long as 2907615 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,<,2907615), Playlist.Name),Playlist.Name))", "score": -0.4251998659654167, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks shorter than or as long as 2907615 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Playlist),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615), Playlist.Name),Playlist.Name))", "score": -0.42584313939968255, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks shorter than or as long as 2907615 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,null,2907615), Playlist.Name),Playlist.Name))", "score": -0.4360979514531051, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks shorter than or as long as 2907615 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,2907615), Playlist.Name),Playlist.Name))", "score": -0.4426759957596529, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,2907615),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 162, "beams": [{"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.02394440920955294, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.45006534297468387, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -1.0847666976971577, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Track.Bytes))", "score": -1.1044834075625338, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Album.Title)", "score": -1.1612231179971588, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.AlbumId))", "score": -1.1937048729930346, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Album.Title),Album.Title))", "score": -1.288865546447915, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Track.Name))", "score": -1.301584161510663, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -1.309950854639516, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Artist.ArtistId))", "score": -1.3723331671187047, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Employee.LastName))", "score": -1.4034844584554795, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Track.Bytes),Album.Title))", "score": -1.4263490111910218, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.AlbumId),Album.Title))", "score": -1.43818368197744, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Track), Album.Title),Album.Title)", "score": -1.4600695286925134, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -1.4754062460788402, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 163, "beams": [{"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))", "score": -0.018603786076710094, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Employee.Email))", "score": -0.5262954427817021, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))", "score": -0.5306289020882105, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))", "score": -0.6088746610985254, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))", "score": -0.6232787791595911, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))", "score": -0.6247677031860803, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))", "score": -0.6353143278465723, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.State),Customer.Email))", "score": -0.6624936314256047, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))", "score": -0.665339452396438, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),InvoiceLine.UnitPrice))", "score": -0.6835121705153142, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Album.Title))", "score": -0.699052829942957, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))", "score": -0.6993915008570184, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))", "score": -0.7350452367172693, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Employee.Email),Customer.Email))", "score": -0.7452228518159245, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}, {"orig_question": "What are the distinct email address of the customer with the phone number +33 04 78 30 30 30?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.State))", "score": -0.7453250481703435, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+33 04 78 30 30 30), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 164, "beams": [{"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.092032563792414, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.20898910727733894, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.21234118809824507, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.22339032045196303, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.2278333238964036, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Playlist.Name))", "score": -0.2408261347424001, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.28000376196424787, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.2958512521623817, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.30256136590871296, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Playlist.Name))", "score": -0.30582770905563794, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), MediaType.Name),Invoice.BillingState))", "score": -0.3083993434736237, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Customer.State))", "score": -0.30841103018750315, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(PlaylistTrack),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.31371709953842025, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Playlist.Name))", "score": -0.3151214821588395, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.31870736898454066, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 165, "beams": [{"orig_question": "What is the last name of the employee at 590 Columbia Boulevard West?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))", "score": -0.03314171655620157, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee at 590 Columbia Boulevard West?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))", "score": -0.3820444282009703, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee at 590 Columbia Boulevard West?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.FirstName),Employee.LastName))", "score": -0.45802448241556704, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee at 590 Columbia Boulevard West?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))", "score": -0.4918710525944334, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee at 590 Columbia Boulevard West?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.Email),Employee.LastName))", "score": -0.5176113650068146, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee at 590 Columbia Boulevard West?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.Email))", "score": -0.5271487712725502, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee at 590 Columbia Boulevard West?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.FirstName))", "score": -0.5820455431803566, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee at 590 Columbia Boulevard West?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Milliseconds,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))", "score": -0.5845751400902373, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee at 590 Columbia Boulevard West?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))", "score": -0.608845972628842, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee at 590 Columbia Boulevard West?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingAddress,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))", "score": -0.6254161234810454, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee at 590 Columbia Boulevard West?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.Total,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))", "score": -0.6911961074783903, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee at 590 Columbia Boulevard West?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.Title),Employee.LastName))", "score": -0.7141044244035584, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee at 590 Columbia Boulevard West?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.Fax),Employee.LastName))", "score": -0.7145226701959473, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee at 590 Columbia Boulevard West?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))", "score": -0.7199326392128569, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee at 590 Columbia Boulevard West?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.City),Employee.LastName))", "score": -0.7238023385270935, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 166, "beams": [{"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Scorpions),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.09187329777819525, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Artist.Name,=,Scorpions),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.22257062690362397, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Album.Title,=,Scorpions),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.27340991056955877, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Scorpions),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2865033858736358, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Scorpions),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.30589770463356164, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Scorpions),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.3149877492623358, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Scorpions),merge(getData(Album),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3295855186855769, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Scorpions),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Album.AlbumId), Genre.Name),Genre.Name))", "score": -0.34486451875513924, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Album),Genre.GenreId,Track.GenreId),Genre.Name,=,Scorpions),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.34956322601889755, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Genre.GenreId,Track.GenreId),Artist.Name,=,Scorpions),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.36447536660570035, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Album),Genre.GenreId,Track.GenreId),Genre.Name,=,Scorpions),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3689575358839295, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.GenreId),Genre.Name,=,Scorpions),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3736476853991883, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Genre.Name,=,Scorpions),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.38242722323844514, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Scorpions),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.383743956459856, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Scorpions), Genre.Name),Genre.Name))", "score": -0.3970527766200091, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 167, "beams": [{"orig_question": "how old are you?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)", "score": -0.15156807722202553, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NT), Invoice.Total),Invoice.Total))"}, {"orig_question": "how old are you?", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),Track.Milliseconds)", "score": -0.4386951996826881, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NT), Invoice.Total),Invoice.Total))"}, {"orig_question": "how old are you?", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),Track.Bytes)", "score": -0.6312114949864005, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NT), Invoice.Total),Invoice.Total))"}, {"orig_question": "how old are you?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)", "score": -0.7665899040839635, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NT), Invoice.Total),Invoice.Total))"}, {"orig_question": "how old are you?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Name,=,NT), Track.TrackId),Track.Bytes)", "score": -0.8330986513552087, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NT), Invoice.Total),Invoice.Total))"}, {"orig_question": "how old are you?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)", "score": -0.8996431330841526, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NT), Invoice.Total),Invoice.Total))"}, {"orig_question": "how old are you?", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)", "score": -0.9115412704721709, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NT), Invoice.Total),Invoice.Total))"}, {"orig_question": "how old are you?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,NT), Track.Bytes),Track.Bytes))", "score": -1.0219962930423208, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NT), Invoice.Total),Invoice.Total))"}, {"orig_question": "how old are you?", "inferred_code": "sum(distinct(getData(Track), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -1.0800449227221214, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NT), Invoice.Total),Invoice.Total))"}, {"orig_question": "how old are you?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,NT), Track.Bytes),Employee.Email))", "score": -1.0949412917834707, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NT), Invoice.Total),Invoice.Total))"}, {"orig_question": "how old are you?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Employee.Email)", "score": -1.1196714955963825, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NT), Invoice.Total),Invoice.Total))"}, {"orig_question": "how old are you?", "inferred_code": "sum(distinct(getData(InvoiceLine), Track.TrackId),Track.Bytes)", "score": -1.121815662281312, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NT), Invoice.Total),Invoice.Total))"}, {"orig_question": "how old are you?", "inferred_code": "avg(distinct(getData(Track), Employee.Email),Track.Milliseconds)", "score": -1.1411031453773814, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NT), Invoice.Total),Invoice.Total))"}, {"orig_question": "how old are you?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,NT), Track.UnitPrice),Track.Bytes))", "score": -1.1480980178457685, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NT), Invoice.Total),Invoice.Total))"}, {"orig_question": "how old are you?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,NT), Track.Bytes),Track.Name))", "score": -1.149530339811463, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NT), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 168, "beams": [{"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))", "score": -0.025720272165472124, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.LastName),Employee.Email))", "score": -0.4892946788563677, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.LastName))", "score": -0.512528332833881, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Margaret), Employee.Email),Employee.Email))", "score": -0.5351851409755, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.BirthDate),Employee.Email))", "score": -0.5456902393593737, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Track.Bytes))", "score": -0.5676097301288792, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Track.Bytes),Employee.Email))", "score": -0.6200569280877062, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.FirstName),Employee.Email))", "score": -0.6369845279946276, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Track.UnitPrice))", "score": -0.638293269042606, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Title),Employee.Email))", "score": -0.6598017820610949, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.FirstName,=,Margaret), Employee.Email),Employee.Email))", "score": -0.6635611480555781, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.FirstName))", "score": -0.678444030646915, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.City),Employee.Email))", "score": -0.6788797983422228, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Customer.Email),Employee.Email))", "score": -0.6931958207383104, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.State),Employee.Email))", "score": -0.698236108709807, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 169, "beams": [{"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Milliseconds),Track.Milliseconds))", "score": -0.14529531970765674, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Milliseconds),Track.Bytes))", "score": -0.2696283437326201, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Milliseconds),InvoiceLine.Quantity))", "score": -0.36473972872045124, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Milliseconds),Track.Composer))", "score": -0.4002271123245009, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Bytes),Track.Milliseconds))", "score": -0.4726691838368424, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Milliseconds))", "score": -0.4894044991597184, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), InvoiceLine.Quantity),Track.Milliseconds))", "score": -0.5198079939946183, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,0.99), Track.Milliseconds),Track.Milliseconds))", "score": -0.5659530634075054, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Bytes),Track.Bytes))", "score": -0.5970022078618058, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.Milliseconds,=,0.99), Track.Milliseconds),InvoiceLine.Quantity))", "score": -0.6002730879328664, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.Milliseconds,=,0.99), Track.Milliseconds),InvoiceLine.Quantity))", "score": -0.6007420095745322, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,=,0.99), Track.Milliseconds),InvoiceLine.Quantity))", "score": -0.6103156707838631, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,=,0.99), Track.Milliseconds),InvoiceLine.Quantity))", "score": -0.6108974348376128, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,=,0.99), Track.Milliseconds),InvoiceLine.Quantity))", "score": -0.6152534748529949, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,=,0.99), Track.Milliseconds),InvoiceLine.Quantity))", "score": -0.6157224230755111, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 170, "beams": [{"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Blackened), Invoice.InvoiceId),Invoice.Total)", "score": -0.170605191904626, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Blackened), Invoice.InvoiceId),Invoice.Total)", "score": -0.17428036810815012, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.GenreId),Genre.Name,=,Blackened),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.228949664789073, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Blackened), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.26048524359202196, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Blackened), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.26416041979554605, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.GenreId),Genre.Name,=,Blackened),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2647475097981022, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)", "score": -0.2718371088707235, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Album.Title,=,Blackened),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.29694587100514186, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.GenreId),Track.Name,=,Blackened),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2993400660080242, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Blackened), Invoice.InvoiceId),Invoice.Total)", "score": -0.30873092750263437, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.GenreId),Album.Title,=,Blackened),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.31897201223702093, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Name,=,Blackened),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.32388762963331097, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Blackened),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.32562352739234796, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Blackened), Invoice.InvoiceId),Invoice.Total)", "score": -0.326139760042439, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices containing the track Blackened?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)", "score": -0.34358082538620727, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Blackened), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 171, "beams": [{"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))", "score": -0.058792739730051835, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,260154), Track.UnitPrice),Track.UnitPrice))", "score": -0.20687731690304645, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,260154), Track.UnitPrice),Track.UnitPrice))", "score": -0.36102036721604236, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,260154), Track.UnitPrice),Track.UnitPrice))", "score": -0.4617546606768883, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,260154), Track.UnitPrice),Track.UnitPrice))", "score": -0.49853862411873706, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,260154), Track.UnitPrice),Track.UnitPrice))", "score": -0.686657737564019, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,null,260154), Track.UnitPrice),Track.UnitPrice))", "score": -0.6932448852767266, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,260154),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice)", "score": -0.7603752890318878, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,260154),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice)", "score": -0.7672992503326336, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))", "score": -0.7948823159931635, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,>,260154),getData(InvoiceLine),Track.TrackId,InvoiceLine.UnitPrice), Track.UnitPrice),InvoiceLine.UnitPrice)", "score": -0.806155086187515, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,>,260154),getData(InvoiceLine),Track.TrackId,InvoiceLine.UnitPrice), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice)", "score": -0.848275077364036, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,260154),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.8525260345335784, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,260154), Track.UnitPrice),Track.UnitPrice))", "score": -0.875670961862852, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the price of the tracks, which run longer than 260154 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,260154), Track.UnitPrice),Track.UnitPrice))", "score": -0.8939071184395289, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,260154), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 172, "beams": [{"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))", "score": -0.029435146503601572, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Invoice.BillingCity),Customer.City))", "score": -0.4499275692705851, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.Fax),Customer.City))", "score": -0.4531435378794413, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.State,!=,FL), Customer.City),Customer.City))", "score": -0.49653636398397794, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.Company),Customer.City))", "score": -0.5010317572359781, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.State,!=,FL), Customer.City),Customer.City))", "score": -0.5266841774773638, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Employee.City),Customer.City))", "score": -0.578755945802186, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),InvoiceLine.UnitPrice,!=,FL), Customer.City),Customer.City))", "score": -0.5870180254769366, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Album.Title),Customer.City))", "score": -0.6256000109915476, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,!=,FL), Customer.City),Customer.City))", "score": -0.6517154103112262, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.Fax))", "score": -0.6678580559291731, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.Company))", "score": -0.6863677419223677, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,!=,FL), Customer.City),Customer.City))", "score": -0.7107914883144986, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Album.Title))", "score": -0.7151387847461592, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,FL), Customer.City),Customer.City))", "score": -0.7172768836808245, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 173, "beams": [{"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.15489692922223416, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.17894606218776937, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Genre.Name))", "score": -0.2203087922652593, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Genre.Name))", "score": -0.26712277971619175, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2692934859474781, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2742683190677461, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Invoice),Track.GenreId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2898980197414285, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.29022159992772, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,=,LOST, Season 4),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.30471001278530574, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.31692591134308906, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Genre.Name),Invoice.BillingAddress))", "score": -0.3264745340326497, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Genre.GenreId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3264938197829395, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,=,LOST, Season 4),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3287591457508409, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Genre.Name))", "score": -0.33271722056077924, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3329704873186556, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 174, "beams": [{"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.Name),Track.Name))", "score": -0.12879389168914562, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.Name),Track.Name))", "score": -0.1446357587149306, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.Name),Track.Name))", "score": -0.20613505928566134, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.25489248332666337, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.Name),Track.Name))", "score": -0.26995266160030507, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.27529186514304294, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.2835570685794636, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Track.AlbumId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.Name),Track.Name))", "score": -0.28540028920614596, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Album.Title,!=,One By One),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.3001200438895053, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Album.Title,!=,One By One),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.3135497234267764, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Album.Title,!=,One By One),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.3287846291423056, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Track),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.Name),Track.Name))", "score": -0.3305580384880967, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.34471923859589826, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Album),Track.AlbumId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.Name),Track.Name))", "score": -0.34689962963949966, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.Name),Track.Name))", "score": -0.3568255144361538, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 175, "beams": [{"orig_question": "How are you?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)", "score": -0.14556306885568324, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)", "score": -0.7464136125331002, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,None), Employee.Email),Track.Name))", "score": -0.8242186102906999, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "count(extractValues(distinct(getData(Track), Employee.Email),Track.Name))", "score": -0.8275516350319123, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,None), Track.Bytes),Track.Name))", "score": -0.8284388575593766, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),Track.Milliseconds)", "score": -0.8300665124077257, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "count(extractValues(distinct(getData(Track), Track.Bytes),Track.Name))", "score": -0.8789143312387088, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Employee.Email)", "score": -0.8825818271550985, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)", "score": -0.8836608431488245, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "sum(distinct(getData(Track), Employee.Email),Track.Bytes)", "score": -0.8901622868139392, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,None), Employee.Email),Employee.Email))", "score": -0.9022694621125993, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,None), Track.Bytes),Employee.Email))", "score": -0.906489709381276, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),Track.Bytes)", "score": -0.9941033146897637, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.Name)", "score": -0.9961022804222602, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}, {"orig_question": "How are you?", "inferred_code": "count(extractValues(distinct(getData(Track), Track.Name),Track.Name))", "score": -1.0063911074936085, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 176, "beams": [{"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,RM), MediaType.Name),MediaType.Name))", "score": -0.194093773462563, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,RM), MediaType.Name),MediaType.Name))", "score": -0.20528591863300874, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.Company,=,RM), MediaType.Name),MediaType.Name))", "score": -0.21615296557234193, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,RM), MediaType.Name),MediaType.Name))", "score": -0.25047702733323696, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,RM), MediaType.Name),MediaType.Name))", "score": -0.26166917250368266, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.Company,=,RM), MediaType.Name),MediaType.Name))", "score": -0.27253621944301587, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,RM), MediaType.Name),MediaType.Name))", "score": -0.2952179125327596, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,RM), MediaType.Name),MediaType.Name))", "score": -0.30641005770320534, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.Company,=,RM), MediaType.Name),MediaType.Name))", "score": -0.3172771046425385, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,RM), MediaType.Name),MediaType.Name))", "score": -0.3425785868679075, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.Company,=,RM),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.34459916692469034, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,RM), MediaType.Name),MediaType.Name))", "score": -0.35160116640343353, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Invoice.BillingCity,=,RM),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.35621672096088364, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.360696973300663, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks ordered by customers from Rome? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3734346241895072, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,RM),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 177, "beams": [{"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street), MediaType.Name),MediaType.Name))", "score": -0.16564035863120807, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,230 Elgin Street),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))", "score": -0.33955234950532975, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street), MediaType.Name),Customer.Email))", "score": -0.38121486157615436, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,230 Elgin Street),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))", "score": -0.4028267651399826, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,230 Elgin Street), MediaType.Name),MediaType.Name))", "score": -0.4102904829395848, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Invoice.BillingAddress,=,230 Elgin Street), MediaType.Name),MediaType.Name))", "score": -0.4212910564681635, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,230 Elgin Street), MediaType.Name),Customer.Email))", "score": -0.4237144503169897, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,230 Elgin Street),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))", "score": -0.4300261386079632, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,230 Elgin Street),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.LastName),Customer.Email))", "score": -0.4335513447860656, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Invoice.BillingAddress,=,230 Elgin Street), MediaType.Name),Customer.Email))", "score": -0.4347150238455684, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingAddress,=,230 Elgin Street), MediaType.Name),MediaType.Name))", "score": -0.44720249470272727, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.LastName),Customer.Email))", "score": -0.45581988300099785, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,230 Elgin Street),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.State),Customer.Email))", "score": -0.4560551534442921, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,230 Elgin Street),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.LastName),Customer.Email))", "score": -0.45810275545057266, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}, {"orig_question": "What is the status of the customer rep that did the minimal invoice purchased from the address 230 Elgin Street?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),MediaType.Name))", "score": -0.5388217415852505, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,230 Elgin Street),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 178, "beams": [{"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.016571722050452032, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.6366280894712422, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.7481041689018726, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.8310072850150271, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Track.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.842961930917496, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Track.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.8474798894286472, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.8750590093314018, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.8795769678425529, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.895621798119636, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.GenreId), Album.Title),Album.Title))", "score": -0.9371465432251016, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.9785249142327905, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.GenreId), Album.Title),Album.Title))", "score": -0.9941754032139977, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -1.0027327398011285, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Album.Title,Track.AlbumId), Album.Title),Album.Title))", "score": -1.0271791189739616, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many albums with different names exist?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Album.Title)", "score": -1.085821649945524, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 179, "beams": [{"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.25065320525290397, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Composer,<,Easy Listening), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.27472834372296395, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.29917628835593824, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),InvoiceLine.Quantity,=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3105608364894636, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3109296033780782, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Composer,!=,Easy Listening), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3130495633003717, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Composer,=,Easy Listening), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.31329202410182533, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))", "score": -0.31810121757838294, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Composer,=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3324617215826288, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))", "score": -0.3528919401475828, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.GenreId),Track.Composer,<,Easy Listening), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.35514391974192605, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),InvoiceLine.Quantity,=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.35908391959249786, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.35945268648111245, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Composer,<,Easy Listening), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3631033754035224, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.36552062696819515, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 180, "beams": [{"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.09813994615314223, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.11663014668067156, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.11936472451299154, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.16887294974053396, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.2124278219939723, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(Playlist),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.24924423563772563, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.TrackId,MediaType.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.26529601160217514, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.2739740940520667, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.2859887318753928, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.2887426471614064, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.3064748155019901, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.30822688382029634, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.3082759524024082, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(MediaType),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.3128686921247571, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.3161677289751092, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 181, "beams": [{"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.013602510740382788, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.5313660480795537, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.5916926679840733, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -0.6700256041636866, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),getData(Album),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.6772789627679877, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.6868267336890496, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Album),getData(Album),Artist.ArtistId,Track.AlbumId),Album.Title,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.7161158465991284, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,Track.AlbumId), Album.Title),Album.Title))", "score": -0.7248016189642205, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Artist.ArtistId,Track.AlbumId),Album.Title,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.7369061102166476, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.7372655928990933, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.7471533452135061, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),getData(Album),Track.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.7496223183491666, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),getData(Album),Album.Title,Track.AlbumId), Album.Title),Album.Title))", "score": -0.7507822184706177, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Album.ArtistId), Album.Title),Album.Title))", "score": -0.7746054226226203, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),getData(Album),Artist.ArtistId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.8493663463920424, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 182, "beams": [{"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.034881880276020086, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.11509114174158809, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.21614246102253976, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3725027088860173, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3829493699996931, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.3926657945161321, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.415469458528611, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.4519227431049038, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.48061900387106204, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Genre.Name),Track.Name))", "score": -0.4853214824361405, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.4941112237911295, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.5065466599027051, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.516359767011307, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.5179947829725322, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Genre.Name))", "score": -0.5213829701315547, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 183, "beams": [{"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.14963511029964138, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.20868981282001187, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.24678746263271023, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.2863865236449783, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.3454412261653488, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.38353887597804714, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.4617182503152435, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.502118874590451, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.InvoiceDate,>=,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.520772952835614, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,>=,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.5588706026483123, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.InvoiceDate,<=,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.5611735771108215, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,<=,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.5992712269235199, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.TrackId),Track.Name))", "score": -0.6565232789307629, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.TrackId),Track.Name))", "score": -0.7155779814511334, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.TrackId),Track.Name))", "score": -0.7536756312638317, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 184, "beams": [{"orig_question": "What are the unit prices of the tracks that weren't composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))", "score": -0.012649120017158566, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of the tracks that weren't composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.Bytes),Track.UnitPrice))", "score": -0.41565161123799044, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of the tracks that weren't composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))", "score": -0.5246423861935909, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of the tracks that weren't composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.Name),Track.UnitPrice))", "score": -0.6337976969771262, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of the tracks that weren't composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.Milliseconds),Track.UnitPrice))", "score": -0.7021223820738669, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of the tracks that weren't composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))", "score": -0.7058655402615841, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of the tracks that weren't composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))", "score": -0.7091894744189631, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of the tracks that weren't composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.Bytes))", "score": -0.7497724980748899, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of the tracks that weren't composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Title,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))", "score": -0.755631782765704, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of the tracks that weren't composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))", "score": -0.7670274755910214, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of the tracks that weren't composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Customer.Email),Track.UnitPrice))", "score": -0.8145465172819968, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of the tracks that weren't composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,<,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))", "score": -0.8190812466891657, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of the tracks that weren't composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Employee.Email),Track.UnitPrice))", "score": -0.8296524204306479, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of the tracks that weren't composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.8884079970412131, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of the tracks that weren't composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.TrackId),Track.UnitPrice))", "score": -0.8977588333182211, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 185, "beams": [{"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Composer,!=,0.99), Genre.Name),Genre.Name))", "score": -0.1852170972415479, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Composer,>,0.99), Genre.Name),Genre.Name))", "score": -0.2532717807480367, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Composer,<,0.99), Genre.Name),Genre.Name))", "score": -0.3059440924116643, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,0.99), Genre.Name),Genre.Name))", "score": -0.36145480333652813, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.Quantity,>,0.99), Genre.Name),Genre.Name))", "score": -0.39751318912265127, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.TrackId),InvoiceLine.Quantity,>,0.99), Genre.Name),Genre.Name))", "score": -0.41605307345712844, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,0.99), Genre.Name),Genre.Name))", "score": -0.42950948684301693, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId),InvoiceLine.Quantity,>,0.99), Genre.Name),Genre.Name))", "score": -0.432903631417468, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.TrackId),InvoiceLine.Quantity,!=,0.99), Genre.Name),Genre.Name))", "score": -0.4380900825115771, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId),InvoiceLine.Quantity,!=,0.99), Genre.Name),Genre.Name))", "score": -0.45494063147319136, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.TrackId),InvoiceLine.Quantity,<,0.99), Genre.Name),Genre.Name))", "score": -0.4585429126167902, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,0.99), Genre.Name),Genre.Name))", "score": -0.4660603588708909, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,0.99), Genre.Name),Genre.Name))", "score": -0.48218179850664455, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.Quantity,>,0.99), Genre.Name),Genre.Name))", "score": -0.48450577379426185, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(getData(Genre),Track.Composer,!=,0.99), Genre.Name),Genre.Name))", "score": -0.501522191640106, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 186, "beams": [{"orig_question": "What are the distinct states of invoices issued to the postal code \"76110\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Invoice.BillingState))", "score": -0.04056549722054115, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the distinct states of invoices issued to the postal code \"76110\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Customer.State))", "score": -0.2850545840124141, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the distinct states of invoices issued to the postal code \"76110\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Playlist.Name))", "score": -0.4495956795076381, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the distinct states of invoices issued to the postal code \"76110\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Employee.State))", "score": -0.500279982552911, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the distinct states of invoices issued to the postal code \"76110\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Track.UnitPrice))", "score": -0.5186535613397609, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the distinct states of invoices issued to the postal code \"76110\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.Total),Invoice.BillingState))", "score": -0.5228377454700421, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the distinct states of invoices issued to the postal code \"76110\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Customer.State),Invoice.BillingState))", "score": -0.5576917999210309, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the distinct states of invoices issued to the postal code \"76110\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Customer.Country))", "score": -0.6312698023180019, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the distinct states of invoices issued to the postal code \"76110\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,76110), Invoice.BillingState),Invoice.BillingState))", "score": -0.6638408747753601, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the distinct states of invoices issued to the postal code \"76110\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Customer.Address))", "score": -0.6938114659646999, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the distinct states of invoices issued to the postal code \"76110\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),MediaType.Name))", "score": -0.7087005870203029, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the distinct states of invoices issued to the postal code \"76110\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Playlist.PlaylistId))", "score": -0.7157383458475124, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the distinct states of invoices issued to the postal code \"76110\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Customer.FirstName))", "score": -0.7164813177446376, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the distinct states of invoices issued to the postal code \"76110\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Employee.State),Invoice.BillingState))", "score": -0.7310992353382062, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the distinct states of invoices issued to the postal code \"76110\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Customer.Address),Invoice.BillingState))", "score": -0.7422185414257001, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,76110), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 187, "beams": [{"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.13598781357632106, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.14277705083713954, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.40140015910492366, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.41797975729332393, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.4819674966774983, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>=,Ireland), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.48875673393831676, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.6086104391060871, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>=,Ireland), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.6153996763669056, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingCountry))", "score": -0.6672149179421467, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingAddress))", "score": -0.668742048545937, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingAddress),Invoice.BillingPostalCode))", "score": -0.6729742921806974, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>=,Ireland), Invoice.BillingPostalCode),Invoice.BillingCountry))", "score": -0.6740041552029652, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>=,Ireland), Invoice.BillingPostalCode),Invoice.BillingAddress))", "score": -0.6755312858067555, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>=,Ireland), Invoice.BillingAddress),Invoice.BillingPostalCode))", "score": -0.6797635294415159, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.690505806348483, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 188, "beams": [{"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Black Eyed Peas), Track.TrackId),Track.Milliseconds)", "score": -0.2052404161761041, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Employee.Title,=,Black Eyed Peas), Track.TrackId),Track.Milliseconds)", "score": -0.2885139055455636, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Genre.Name,=,Black Eyed Peas), Track.TrackId),Track.Milliseconds)", "score": -0.3245032603385408, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(InvoiceLine),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Black Eyed Peas), Track.TrackId),Track.Milliseconds)", "score": -0.32585981949425064, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(PlaylistTrack),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Black Eyed Peas), Track.TrackId),Track.Milliseconds)", "score": -0.33199536352738274, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId),Artist.Name,=,Black Eyed Peas), Track.TrackId),Track.Milliseconds)", "score": -0.34752705628463465, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.35883411372661894, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Composer,=,Black Eyed Peas), Track.TrackId),Track.Milliseconds)", "score": -0.36286863298880784, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3664209785755627, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Milliseconds)", "score": -0.3664517940537465, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Artist.Name,=,Black Eyed Peas),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Milliseconds)", "score": -0.37310506144859934, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Black Eyed Peas), Track.TrackId),Track.Milliseconds)", "score": -0.3829030573751288, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Black Eyed Peas), Track.TrackId),Track.Milliseconds)", "score": -0.3886607087207055, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.4342728092334097, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks by the Black Eyed Peas?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Black Eyed Peas),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.4400104735490252, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Black Eyed Peas),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 189, "beams": [{"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.09908462160016608, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.1624168224071155, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.16729530336032422, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.2715265368860855, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),InvoiceLine.Quantity,!=,0.99), Customer.Address),Customer.Address))", "score": -0.3388442611139908, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,!=,0.99), Customer.Address),Customer.Address))", "score": -0.35090695242928366, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.36925083698301825, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.37107639206588283, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,!=,0.99), Customer.Address),Customer.Address))", "score": -0.3850222063268792, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,!=,0.99), Customer.Address),Customer.Address))", "score": -0.3966216109731667, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,>,0.99), Customer.Address),Customer.Address))", "score": -0.4029909910357241, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.PostalCode))", "score": -0.4150829333016959, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,0.99), Customer.Address),Customer.Address))", "score": -0.4320555242013378, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.43305552444109474, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),Invoice.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.4374615187431764, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 190, "beams": [{"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.020128846134673636, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.6513266489167683, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Album.Title)", "score": -0.8482005540374222, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -1.0673611939828562, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Track.Bytes))", "score": -1.0879707484988899, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.AlbumId))", "score": -1.1569800393439384, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Track.Bytes)", "score": -1.2120639293339674, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Track), Album.Title),Album.Title)", "score": -1.218846917473113, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Album.Title),Album.Title))", "score": -1.2844616810576535, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Artist), Album.Title),Album.Title)", "score": -1.3043750248214654, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Track.Name))", "score": -1.3046127220127004, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -1.31719819145514, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Artist.ArtistId))", "score": -1.36080479045631, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Employee.LastName))", "score": -1.3658800176961023, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -1.3695236762126686, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 191, "beams": [{"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.24208210134114364, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2488847008823904, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Purchased AAC audio file), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2498280637325472, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.25967724098128386, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.2633360427604317, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.264924234392253, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2701386423016785, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Customer.PostalCode),Customer.PostalCode))", "score": -0.2735911396473833, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,MediaType.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Customer.PostalCode),Customer.PostalCode))", "score": -0.27560758750718295, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,MediaType.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.2789362232263614, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Customer.PostalCode),Invoice.BillingPostalCode))", "score": -0.2803937391886301, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Purchased AAC audio file), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.2926951163083974, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Customer.PostalCode),Customer.PostalCode))", "score": -0.2948450810666714, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,MediaType.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Customer.PostalCode),Customer.PostalCode))", "score": -0.3007335084516039, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which different postal codes were invoices that inlcude tracks with the media type Purchased AAC audio file sent?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Customer.PostalCode),Invoice.BillingPostalCode))", "score": -0.3016476806079182, "correct_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 192, "beams": [{"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))", "score": -0.059042715776740806, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.State),Customer.Address))", "score": -0.41020906840640237, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))", "score": -0.4104930342473381, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Company),Customer.Address))", "score": -0.45673752700167825, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Company))", "score": -0.4809200599156611, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Country),Customer.Address))", "score": -0.49098546181994607, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))", "score": -0.5465039194859855, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.FirstName),Customer.Address))", "score": -0.5640688923485868, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.PostalCode))", "score": -0.5739823117219203, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))", "score": -0.5786152066029899, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.PostalCode),Customer.Address))", "score": -0.5840476540215604, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))", "score": -0.608903485659539, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.City),Customer.Address))", "score": -0.6191624191887968, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))", "score": -0.6461676539220207, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}, {"orig_question": "What is the address of the customer having +55 (21) 2271-7070 as fax number ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))", "score": -0.6595749876760237, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (21) 2271-7070), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 193, "beams": [{"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))", "score": -0.1622103140625768, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Email))", "score": -0.22052058437202504, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Email),Employee.Title))", "score": -0.3182016783330255, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Email),Employee.Email))", "score": -0.3765119486424737, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.LastName))", "score": -0.42220152774189046, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Track.Milliseconds))", "score": -0.4619040326151662, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.FirstName),Employee.Title))", "score": -0.48802139097188046, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.City))", "score": -0.5089432434115224, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.LastName),Employee.Title))", "score": -0.5248907082650476, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.FirstName),Employee.Email))", "score": -0.5463316612813287, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Track.TrackId))", "score": -0.5539184645685964, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.FirstName))", "score": -0.5592889324698262, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.City),Employee.Title))", "score": -0.5655490332219415, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Email),Employee.LastName))", "score": -0.5781928920123391, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.LastName),Employee.Email))", "score": -0.5832009785744958, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 194, "beams": [{"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.03855354621906173, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.Name,=,Eggtown),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2240636533585672, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Playlist.Name,=,Eggtown),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.25502119302844634, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Eggtown),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2557897779383511, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.PlaylistId),Track.Name,=,Eggtown),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2788535502443846, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))", "score": -0.31070462431688534, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Invoice.BillingState))", "score": -0.329015016411316, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))", "score": -0.3462029117027835, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.35152889007466553, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown),getData(PlaylistTrack),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.38294675289644137, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Employee.FirstName))", "score": -0.39327464747509583, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.Name), Playlist.Name),Playlist.Name))", "score": -0.40094431995921165, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,Playlist.PlaylistId),Track.Name,=,Eggtown),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.40145237096613523, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Eggtown),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Invoice.BillingState))", "score": -0.4080538111648081, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with a track called Eggtown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.PlaylistId))", "score": -0.4108311219390027, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Eggtown), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 195, "beams": [{"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -0.0022961810745982802, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -0.8683283667478463, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -0.9256243448171517, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.Bytes),Track.UnitPrice))", "score": -0.9319304040245697, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.Bytes))", "score": -0.9368929733745972, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.9414020647518555, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Album.Title,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -0.9574805240545174, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -0.9640933017644784, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Playlist.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -0.9706362824354073, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Email,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -1.0233948569211861, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -1.0289702611244138, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -1.0355890801720307, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Genre.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -1.056888614169111, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),MediaType.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -1.07015207814311, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Employee.BirthDate))", "score": -1.090001570176355, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 196, "beams": [{"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))", "score": -0.07438141390593955, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Company),Customer.Address))", "score": -0.3177401414504857, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.FirstName))", "score": -0.3871256737402291, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Company))", "score": -0.4198522000006051, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.PostalCode))", "score": -0.45221716448577354, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.FirstName),Customer.Address))", "score": -0.48257142215879867, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Album.Title,=,Zimmermann), Customer.Address),Customer.Address))", "score": -0.5201138211778016, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.State),Customer.Address))", "score": -0.5419576159110875, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Phone))", "score": -0.587305757253489, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.PostalCode),Customer.Address))", "score": -0.6094575813403935, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Phone),Customer.Address))", "score": -0.629406659900269, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Company),Customer.FirstName))", "score": -0.6304844012847752, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.State))", "score": -0.6393460957697243, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.LastName,=,Zimmermann), Customer.Address),Customer.Address))", "score": -0.6611183239510865, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Company),Customer.Company))", "score": -0.6632109275451512, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 197, "beams": [{"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.06710137476348921, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.13102614327892664, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,>,Bruce Dickinson/Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.18768023470797962, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2105010001707392, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,>=,Bruce Dickinson/Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.26278171618249374, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,Bruce Dickinson/Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.30800908071156424, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,Bruce Dickinson/Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.33698038429387434, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,!=,Bruce Dickinson/Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.346277465645079, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Bruce Dickinson/Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.34641523941224156, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.35302405327032693, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Bruce Dickinson/Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.35742897742494995, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.Name), Playlist.Name),Playlist.Name))", "score": -0.3772487143885366, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.392330848404025, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,Bruce Dickinson/Steve Harris),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.39412143112176046, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists that contain tracks, which are composed by Bruce Dickinson/Steve Harris?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Invoice.BillingState))", "score": -0.3971524138490143, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Bruce Dickinson/Steve Harris),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 198, "beams": [{"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.08291655706580059, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.12532752679999248, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5200298123281755, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.561045556537465, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5724336199682512, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5892017903084302, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6047030334217063, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6054397516172685, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6075268766416443, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Milliseconds,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.655183922498189, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6646428995054521, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,WA), Invoice.BillingCountry),Customer.Country))", "score": -0.7090356605813213, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.7383756928365983, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,WA), Invoice.BillingCountry),Customer.Country))", "score": -0.7514466303155132, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,WA), Invoice.BillingState),Invoice.BillingCountry))", "score": -0.7604582449175723, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 199, "beams": [{"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.29807696607623474, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Trampled Under Foot),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.Milliseconds),Track.Milliseconds))", "score": -0.3217406689158646, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Trampled Under Foot),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.GenreId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.Milliseconds),Track.Milliseconds))", "score": -0.3267263279006004, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.3338040744121374, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Composer,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.34249502013147476, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Trampled Under Foot),getData(Track),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.Milliseconds),Track.Milliseconds))", "score": -0.34264036823481114, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Genre.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.34412134288053053, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Trampled Under Foot),getData(Track),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.GenreId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.Milliseconds),Track.Milliseconds))", "score": -0.3476260272195469, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Trampled Under Foot),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Milliseconds),Track.Milliseconds))", "score": -0.36013355239631595, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.36718517461492517, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Trampled Under Foot),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId), Track.Milliseconds),Track.Milliseconds))", "score": -0.3793496703810189, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Trampled Under Foot),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.GenreId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId), Track.Milliseconds),Track.Milliseconds))", "score": -0.3843353293657547, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Trampled Under Foot),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),InvoiceLine.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.Milliseconds),Track.Milliseconds))", "score": -0.3973956838692221, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Trampled Under Foot),getData(Track),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId), Track.Milliseconds),Track.Milliseconds))", "score": -0.40024938094229634, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Trampled Under Foot),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.Milliseconds),Track.Milliseconds))", "score": -0.4023813428539578, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 200, "beams": [{"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.10809998815898927, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.25929548006084413, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.26283540917468684, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Canada),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.2652567233877922, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total),Track.UnitPrice))", "score": -0.2682543707197329, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCity,=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.2715115050589507, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.30967972781059305, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,Canada),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.3351989504082678, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.Total,=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.35266110462388583, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Canada),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.35998754264092286, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.3622682070726008, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Name))", "score": -0.36637207651809306, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),Invoice.Total),Track.UnitPrice))", "score": -0.3710921639474575, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Employee.HireDate,=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.3711756946996732, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Invoice),Invoice.Total,=,Canada),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.3845637026556056, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 201, "beams": [{"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,!=,0.99), Track.Name),Playlist.Name))", "score": -0.08282934971066425, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,0.99), Playlist.Name),Playlist.Name))", "score": -0.2720113730450662, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,0.99), Playlist.Name),Employee.FirstName))", "score": -0.2796461729763574, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,!=,0.99), Playlist.Name),Playlist.Name))", "score": -0.3634007246735021, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,!=,0.99), Playlist.Name),Employee.FirstName))", "score": -0.37103552460479333, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.38279935220011585, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,!=,0.99), Track.Name),Playlist.Name))", "score": -0.39450965359719703, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Employee.FirstName))", "score": -0.41030216822578186, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,!=,0.99), Track.Name),Playlist.Name))", "score": -0.428559409097943, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,0.99), Playlist.Name),Employee.FirstName))", "score": -0.4457406450597847, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Track.Name))", "score": -0.4523701295572335, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,0.99), Playlist.Name),Playlist.Name))", "score": -0.4723061315142861, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,0.99), Playlist.Name),Playlist.Name))", "score": -0.4840824274739199, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Employee.FirstName))", "score": -0.49003662483931487, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,0.99), Playlist.Name),Playlist.Name))", "score": -0.4961699026111847, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 202, "beams": [{"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))", "score": -0.044572138347575674, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.PostalCode,!=,2010), Customer.Fax),Customer.Fax))", "score": -0.3889094741352892, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Country),Customer.Fax))", "score": -0.46605329134399653, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,2010), Customer.Fax),Customer.Fax))", "score": -0.47207094740952016, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Country))", "score": -0.49079061963493587, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.City),Customer.Fax))", "score": -0.6045577965014672, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Employee.Fax),Customer.Fax))", "score": -0.6067007026904321, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Employee.Fax))", "score": -0.6108260593646264, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,2010), Customer.Fax),Customer.Fax))", "score": -0.6182499082096911, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Company))", "score": -0.622047348999331, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.City))", "score": -0.6383704385989404, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Artist.Name,!=,2010), Customer.Fax),Customer.Fax))", "score": -0.6674753577717638, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Company),Customer.Fax))", "score": -0.6882198295825219, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Fax,!=,2010), Customer.Fax),Customer.Fax))", "score": -0.6990964562901354, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Album.Title),Customer.Fax))", "score": -0.7067639074557519, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 203, "beams": [{"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.014284673523727587, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))", "score": -0.22722552825269, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Track.Name))", "score": -0.284779700393989, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Track.Name))", "score": -0.3557329920802827, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Employee.Email),Track.Name))", "score": -0.41306391692200767, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),Track.Name))", "score": -0.432734703106635, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Name))", "score": -0.43875257218933456, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Bytes))", "score": -0.4556850657593825, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.4625490550520394, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Genre.Name))", "score": -0.4681551704609661, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Bytes),Track.Name))", "score": -0.48579784205404014, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.49026385346324, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Employee.FirstName),Track.Name))", "score": -0.49291445716764604, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Employee.FirstName,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.49454597559038194, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.5001859049040073, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 204, "beams": [{"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,240325), Playlist.Name),Playlist.Name))", "score": -0.12309875939899939, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,240325), Playlist.Name),Playlist.Name))", "score": -0.12509695296103018, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,240325), Playlist.Name),Playlist.Name))", "score": -0.34025469277912634, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,240325), Track.Name),Playlist.Name))", "score": -0.4004439287346031, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,240325), Track.Name),Playlist.Name))", "score": -0.4024421222966339, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,240325), Playlist.Name),Playlist.Name))", "score": -0.40777973468116213, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325), Playlist.Name),Playlist.Name))", "score": -0.4878151358808424, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,240325), Playlist.Name),Playlist.Name))", "score": -0.49177104090267676, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>,240325), Playlist.Name),Playlist.Name))", "score": -0.6068346855238886, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,!=,240325), Playlist.Name),Playlist.Name))", "score": -0.612398660096908, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,240325), Playlist.Name),Playlist.Name))", "score": -0.6175052944350322, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,240325), Track.Name),Playlist.Name))", "score": -0.6175998621147301, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,240325), Track.UnitPrice),Playlist.Name))", "score": -0.6279740505378868, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,240325), Track.UnitPrice),Playlist.Name))", "score": -0.6299722440999176, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the playlist names when the tracks are less than 240325 Milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,240325), Playlist.Name),Employee.FirstName))", "score": -0.6827858439073696, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,240325),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 205, "beams": [{"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.28158276251329645, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.28162978786547616, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3002216383241259, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,1),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3019810491641235, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>=,1),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3196138129405034, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,1),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.32058879170280025, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.34359826701937735, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3489120865904561, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>=,1),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3563117281152896, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.35908772100422315, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.35929073028115405, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,1),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3735716839746819, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3779296060919835, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>=,1),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.39120444775106183, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3967331114803577, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 206, "beams": [{"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Name),Track.Name))", "score": -0.24338898749601867, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.BillingAddress,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Name),Track.Name))", "score": -0.28345594496977355, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Name),Track.UnitPrice))", "score": -0.35491065622818496, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Playlist.Name),Track.Name))", "score": -0.3902693161512616, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.BillingAddress,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Name),Track.UnitPrice))", "score": -0.39497761370193984, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.BillingAddress,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Playlist.Name),Track.Name))", "score": -0.4303362736250165, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.UnitPrice),Track.Name))", "score": -0.47629510553133514, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Playlist.Name),Track.UnitPrice))", "score": -0.5017909848834279, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), MediaType.Name),Track.Name))", "score": -0.5103614846016171, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.BillingAddress,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.UnitPrice),Track.Name))", "score": -0.51636206300509, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.BillingAddress,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Playlist.Name),Track.UnitPrice))", "score": -0.5418579423571828, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.BillingAddress,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), MediaType.Name),Track.Name))", "score": -0.550428442075372, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Name),Playlist.Name))", "score": -0.5538392359162572, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Invoice.BillingAddress),Track.Name))", "score": -0.5538703718925717, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}, {"orig_question": "Who wrote Lamentations of Jeremiah, First Set  Incipit Lamentatio?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Name),Track.Name))", "score": -0.5554538177098038, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Lamentations of Jeremiah, First Set  Incipit Lamentatio), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 207, "beams": [{"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.Email),Customer.Email))", "score": -0.16264232338335205, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.State),Customer.Email))", "score": -0.23128554315235306, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.Email),Customer.City))", "score": -0.27128418625261475, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.State),Customer.City))", "score": -0.33992740602161575, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.City),Customer.Email))", "score": -0.40390487105514694, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.Email),Customer.State))", "score": -0.4315216177787988, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), InvoiceLine.UnitPrice),Customer.Email))", "score": -0.4971565464225023, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.State),Customer.State))", "score": -0.5001648375477998, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.City),Customer.City))", "score": -0.5125467339244096, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.Email),InvoiceLine.UnitPrice))", "score": -0.5236548417892664, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.Email),InvoiceLine.InvoiceLineId))", "score": -0.5789590710487573, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.State),InvoiceLine.UnitPrice))", "score": -0.5922980615582674, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Rogers Canada), Customer.Email),Customer.Email))", "score": -0.5976502606358736, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.FirstName),Customer.Email))", "score": -0.59994633586075, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}, {"orig_question": "What is the status of the customer employed with Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), InvoiceLine.UnitPrice),Customer.City))", "score": -0.605798409291765, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 208, "beams": [{"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)", "score": -0.32987783732296033, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),Invoice.Total)", "score": -0.36299686593148894, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(getData(Track), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.42869977149326877, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(getData(Track), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4618188001017974, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),InvoiceLine.Quantity)", "score": -0.47718705107074866, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(getData(Track), Track.UnitPrice),Track.UnitPrice)", "score": -0.5516746943296615, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(getData(Track), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5760089852410571, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(getData(Track), Track.UnitPrice),Invoice.Total)", "score": -0.5847937229381902, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.6588555470563178, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(getData(Track), Track.UnitPrice),InvoiceLine.Quantity)", "score": -0.6989839080774499, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(getData(InvoiceLine), Track.TrackId),Track.UnitPrice)", "score": -0.7411427734258621, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(getData(Track), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.7576774812266263, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(getData(InvoiceLine), Track.TrackId),Invoice.Total)", "score": -0.7742618020343907, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.8399647075961706, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.8730837362046991, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 209, "beams": [{"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))", "score": -0.046590159632614814, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.FirstName,!=,Michael), Employee.Address),Employee.Address))", "score": -0.3679588483500993, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,Michael), Employee.Address),Employee.Address))", "score": -0.3838623808551347, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Title))", "score": -0.4901212081167614, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,Michael), Employee.Address),Employee.Address))", "score": -0.5066399620700395, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Invoice.BillingAddress))", "score": -0.5162081345770275, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Title),Employee.Address))", "score": -0.5230343583825743, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.FirstName),Employee.Address))", "score": -0.548414433360449, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Track.Milliseconds),Employee.Address))", "score": -0.614729130626074, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.FirstName))", "score": -0.6148759946081555, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Phone))", "score": -0.6200084313604748, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.State),Employee.Address))", "score": -0.6303057316545164, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Track.Milliseconds))", "score": -0.657740317270509, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingAddress,!=,Michael), Employee.Address),Employee.Address))", "score": -0.6886678086448228, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.State))", "score": -0.7081930860731518, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 210, "beams": [{"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.12969608033832652, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.1369223283627026, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,R.E.M.),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.1381627153634912, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,R.E.M.),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.14338144604763473, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,R.E.M.),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.20577856669707562, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,R.E.M.),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.22069686102270175, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.22775060766035443, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,R.E.M.),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2304419788987796, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.23156710253869292, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,R.E.M.),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2356607095829231, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.238793350563069, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,R.E.M.),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.24490063968510795, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,R.E.M.),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2501193703692514, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,R.E.M.),merge(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.25068279855867504, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "How many invoice dates of tracks sold by the artist REM are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,R.E.M.),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2508320355593361, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,R.E.M.), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 211, "beams": [{"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.07320133555872536, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.10620734228110632, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.11815840851181, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), MediaType.Name),MediaType.Name))", "score": -0.15521743996407905, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.20248705431591724, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), MediaType.Name),MediaType.Name))", "score": -0.24280142900926158, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical 101 - Next Steps), MediaType.Name),MediaType.Name))", "score": -0.30082352845417154, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3019296859429367, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), MediaType.Name),MediaType.Name))", "score": -0.31476703885082713, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3260159598194665, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), MediaType.Name),MediaType.Name))", "score": -0.36535579042507044, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3755047153047612, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.38084656120330207, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3948680263259097, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),Customer.Company))", "score": -0.4238317785919775, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 212, "beams": [{"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Genre.Name),Genre.Name))", "score": -0.12405419041389337, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))", "score": -0.31904537562261587, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Funk Como Le Gusta),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.32490154927156395, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))", "score": -0.347218733470148, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))", "score": -0.3552015697657626, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Genre),Track.GenreId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))", "score": -0.3575146642982667, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,=,Funk Como Le Gusta), Genre.Name),Genre.Name))", "score": -0.362852677048756, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))", "score": -0.3833749276132947, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,=,Funk Como Le Gusta), Genre.Name),Genre.Name))", "score": -0.39900887119190276, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))", "score": -0.40682864723462914, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))", "score": -0.411509373448316, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Funk Como Le Gusta),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.41556186727551686, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))", "score": -0.43741300288454305, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Genre),Track.GenreId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))", "score": -0.45728195230112356, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Artist),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))", "score": -0.47137970667972695, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 213, "beams": [{"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)", "score": -0.026899450255444313, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(getData(Invoice),Invoice.Total,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.7625859179644034, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.7811679486155427, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.809183190832414, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(getData(InvoiceLine), Invoice.InvoiceId),Invoice.Total)", "score": -0.822917976340841, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),Customer.CustomerId,Invoice.InvoiceId),Customer.Address,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.9370450623306246, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.Address,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.9630628545484593, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),Customer.CustomerId,Invoice.InvoiceId),Customer.Address,=,None), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.9744914982119848, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.Address,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.9824442489808133, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),Customer.CustomerId,Invoice.InvoiceId),Invoice.Total,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.9860606188442428, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.InvoiceId),Customer.Address,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.9863260703538579, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),Customer.CustomerId,Invoice.InvoiceId),Customer.Address,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.9919631424380555, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.Address,=,None), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.9937523123318577, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Customer.Address,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.9963476812132119, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Address,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -1.0012434919016115, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 214, "beams": [{"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.BirthDate))", "score": -0.07580950686678989, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.BirthDate),Employee.BirthDate))", "score": -0.19322944635496242, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.Country))", "score": -0.416122529823042, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.HireDate))", "score": -0.48524782450840576, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.Country),Employee.BirthDate))", "score": -0.5104759001915227, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.City))", "score": -0.5212864616696606, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.BirthDate),Employee.Country))", "score": -0.5335424693112145, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,1973-07-01 00:00:00), Employee.BirthDate),Employee.BirthDate))", "score": -0.5766676610146533, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.City),Employee.BirthDate))", "score": -0.5902841353599797, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.BirthDate),Employee.HireDate))", "score": -0.6026677639965783, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.HireDate),Employee.BirthDate))", "score": -0.6268403196518193, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.Country),Employee.BirthDate))", "score": -0.6278958396796952, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Invoice.InvoiceDate))", "score": -0.6381458381001721, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.BirthDate),Employee.City))", "score": -0.6387064011578332, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.6901790166084538, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 215, "beams": [{"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.14572306092669948, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>,0.99),getData(PlaylistTrack),PlaylistTrack.PlaylistId,Playlist.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.19049196973299318, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>,0.99),getData(PlaylistTrack),PlaylistTrack.PlaylistId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.24557280787030628, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),PlaylistTrack.PlaylistId,Playlist.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.25780102240337854, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>,0.99),getData(PlaylistTrack),Track.TrackId,Playlist.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.26717489219071283, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.28768025534592734, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.30202636029167845, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3053209620186424, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),PlaylistTrack.PlaylistId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3128818605406916, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.31590602173391735, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.32225573032802596, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>,0.99),getData(PlaylistTrack),Playlist.PlaylistId,Playlist.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.32385241542891885, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3316967062755131, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,Playlist.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3344839629969909, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many distinct playlists are there where the unit price of a track is more than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.UnitPrice,>,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.34997500475390436, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 216, "beams": [{"orig_question": "What are the email addresses of customers working at Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.Email),Customer.Email))", "score": -0.02048553788154095, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers working at Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Rogers Canada), Customer.Email),Customer.Email))", "score": -0.4558267684751627, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers working at Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rogers Canada), Customer.Email),Customer.Email))", "score": -0.4883741827779886, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers working at Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.State),Customer.Email))", "score": -0.5375449325056252, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers working at Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.Email),InvoiceLine.UnitPrice))", "score": -0.559836434722456, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers working at Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), InvoiceLine.UnitPrice),Customer.Email))", "score": -0.6015191341848549, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers working at Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.FirstName),Customer.Email))", "score": -0.6101278926344094, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers working at Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))", "score": -0.6349588723951456, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers working at Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Rogers Canada), Customer.Email),Customer.Email))", "score": -0.6452698613848042, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers working at Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,<=,Rogers Canada), Customer.Email),Customer.Email))", "score": -0.6853285338129353, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers working at Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.Email),Customer.State))", "score": -0.7000950449710217, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers working at Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.Email),Customer.City))", "score": -0.7303544157748547, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers working at Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.LastName),Customer.Email))", "score": -0.7309218908758339, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers working at Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,>=,Rogers Canada), Customer.Email),Customer.Email))", "score": -0.763373484775002, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers working at Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Rogers Canada), Customer.Email),Employee.Email))", "score": -0.8034506314997998, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 217, "beams": [{"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.26910556581424316, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.2713368058230117, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,!=,Out Of Time), InvoiceLine.Quantity),Album.Title))", "score": -0.4343060414175852, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Album.Title,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.4417386176864966, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.4780357738637295, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Album.Title,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.49310328141109494, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),InvoiceLine.Quantity,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.5060753420020774, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.5127146397844294, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,!=,Out Of Time), Album.Title),InvoiceLine.Quantity))", "score": -0.5594346735651925, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "sum(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5623476510568126, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "sum(distinct(getData(Track), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5917574296947673, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Album.Title,!=,Out Of Time), InvoiceLine.Quantity),Album.Title))", "score": -0.6069390932898386, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,!=,Out Of Time), Album.Title),InvoiceLine.Quantity))", "score": -0.6119460175614222, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),InvoiceLine.Quantity,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.6125957640688284, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,!=,Out Of Time), InvoiceLine.Quantity),Album.Title))", "score": -0.6326033080022171, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 218, "beams": [{"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))", "score": -0.07144620955069023, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.Country))", "score": -0.5194881646296726, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.Phone))", "score": -0.5876554262664768, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.FirstName))", "score": -0.6271608536312709, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Address),Customer.State))", "score": -0.6735574297605309, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.State))", "score": -0.6801730352031421, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),Invoice.BillingState))", "score": -0.6885434092662983, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,None), Customer.State),Customer.State))", "score": -0.6961063408525661, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.Address))", "score": -0.7168360959124175, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),Employee.State))", "score": -0.7205199934347803, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.State))", "score": -0.7797361208480637, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),InvoiceLine.UnitPrice))", "score": -0.8187277878334486, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(getData(Customer), InvoiceLine.UnitPrice),Customer.State))", "score": -0.9076171161216688, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.State),Customer.State))", "score": -0.9156107884927553, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}, {"orig_question": "Whats the different customer states?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),Playlist.Name))", "score": -0.9201525190600518, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 219, "beams": [{"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.2530806871288915, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.UnitPrice),Customer.Address))", "score": -0.3260689864513395, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.3667448290238344, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.37230203424905, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total),Customer.Address))", "score": -0.3749908157381149, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,1),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.3756246542389194, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.38548528544550154, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.3950776121666749, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Customer.Address))", "score": -0.4218365917731633, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.GenreId),Track.UnitPrice,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.43791675152703, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.44376395936746266, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.UnitPrice),Customer.Address))", "score": -0.44746345971536255, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.UnitPrice),Customer.Address))", "score": -0.4475737924643289, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Customer.Address))", "score": -0.450008897462035, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceDate,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.4581537973155173, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 220, "beams": [{"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.18084900821486372, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.19830160583296674, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.2598574086550798, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.28887289012709516, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.3460595532778825, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.3590397759799089, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.38639479125777143, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.39751069988051313, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.6186450346831407, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.6307431086424913, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.6323799117926683, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.6739177926901903, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingAddress,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.6983457580026879, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),InvoiceLine.UnitPrice,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))", "score": -0.7165037169870629, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with the mail address jacksmith@microsoft.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,jacksmith@microsoft.com), Customer.Country),Customer.Fax))", "score": -0.8905690286301251, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jacksmith@microsoft.com), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 221, "beams": [{"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.17214010951283854, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.24505243551032452, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.27405008224013727, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.2743552060305649, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.30526087728503626, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.31157232582688005, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.3288917346626354, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.Total,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.35479462676154344, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.Total,<,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.35566042135421794, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.3580201360060984, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.Total,>,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.36594706776656777, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,!=,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.3678772019137136, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.Total,>,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.36973840542188324, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.Total,!=,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.37693407432708004, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genres where the invoice date is earlier than  2011-03-05 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,!=,2011-03-05 00:00:00), Genre.Name),Genre.Name))", "score": -0.38010663806980854, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-03-05 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 222, "beams": [{"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))", "score": -0.11654986230518438, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Customer),Customer.Company,=,None),getData(Customer),Customer.CustomerId,Invoice.CustomerId), Customer.Address),Customer.Address))", "score": -0.42747931478276524, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Customer),Customer.Phone,=,None),getData(Customer),Customer.CustomerId,Invoice.CustomerId), Customer.Address),Customer.Address))", "score": -0.5071198475876787, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Customer),Customer.Company,=,None),getData(Customer),Customer.CustomerId,Invoice.CustomerId), Customer.FirstName),Customer.Address))", "score": -0.5221829763112757, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Address))", "score": -0.5446850002583132, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Customer),Customer.Company,=,None),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId), Customer.Address),Customer.Address))", "score": -0.5909675881563032, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Customer),Customer.Address,=,None),getData(Customer),Customer.CustomerId,Invoice.CustomerId), Customer.Address),Customer.Address))", "score": -0.5948904167832844, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Customer),Customer.Phone,=,None),getData(Customer),Customer.CustomerId,Invoice.CustomerId), Customer.FirstName),Customer.Address))", "score": -0.6018235091161892, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.FirstName))", "score": -0.6097053630037549, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Customer),Customer.Company,=,None),getData(Customer),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Customer.Address))", "score": -0.6187001801143394, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Customer),Customer.Company,=,None),getData(Customer),Customer.CustomerId,Invoice.CustomerId), Customer.Address),Invoice.BillingAddress))", "score": -0.6346084729242426, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.State),Customer.Address))", "score": -0.6488559182501513, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Customer),Customer.Company,=,None),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Customer.Address),Customer.Address))", "score": -0.655615278970364, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Customer),Customer.Company,=,None),getData(Customer),Customer.CustomerId,Invoice.CustomerId), Customer.Address),Customer.FirstName))", "score": -0.6665735366215652, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Customer),Customer.Phone,=,None),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId), Customer.Address),Customer.Address))", "score": -0.6706081786791765, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 223, "beams": [{"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.13288241535246925, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.21961525738061027, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.4089625431579407, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.41091788470566826, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.4182457412016447, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Track.Composer))", "score": -0.46726375356138306, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Artist.Name))", "score": -0.4734741999191101, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.4956953851860817, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.5049785832297857, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCountry))", "score": -0.521892364172345, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCountry),Invoice.BillingCity))", "score": -0.5538143599760588, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Track.Composer))", "score": -0.5539965955895241, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Artist.Name))", "score": -0.5602070419472511, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5633154576999004, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5644412106257732, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 224, "beams": [{"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))", "score": -0.041165832142923416, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))", "score": -0.09593907123590123, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))", "score": -0.2861671378882387, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.3140702411927717, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))", "score": -0.3285937462674638, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(Track),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))", "score": -0.3720099527051935, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.3822607773701299, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.4023690677228674, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(PlaylistTrack),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))", "score": -0.4041148042253962, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.Bytes))", "score": -0.4691882484829162, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))", "score": -0.4747455579549043, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Bytes),Track.UnitPrice))", "score": -0.47641798551772696, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Invoice.InvoiceId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.UnitPrice))", "score": -0.4837303099714537, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.UnitPrice),Track.Bytes))", "score": -0.5038687872220502, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the distinct unit prices of tracks belonging to the playlist named \"TV Shows\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,Track.UnitPrice),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))", "score": -0.5087762764201751, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 225, "beams": [{"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.04232266443432309, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.3450542808568571, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Customer.PostalCode))", "score": -0.49994476782740094, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.5179791093396489, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Customer.PostalCode),Employee.PostalCode))", "score": -0.5240314313268755, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.Fax))", "score": -0.5354174886888359, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.5555789590871427, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.5742668219900224, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.5934276850020979, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.6025313408172224, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Artist.Name))", "score": -0.6157764707750175, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.Fax),Employee.PostalCode))", "score": -0.6174592086172197, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.6538145215308759, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.6720830322301481, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.6823834096139763, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 226, "beams": [{"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.FirstName,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.14703586244716588, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.15692131561188094, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Address,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.18436578514925883, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.18496045217405435, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.FirstName,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.18944276247730307, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.19844704112362982, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.2227252298828463, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.22659465192892964, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Email,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.22875870508880272, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.22973121573969368, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Address,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.23074201380035878, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.2341435844606559, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.24623537642693205, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.2465302522993287, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,=,AB),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2572304265298339, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 227, "beams": [{"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,153600),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.15189823217983414, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,153600),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.1528484089777374, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,153600),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.17219116236429832, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,<,153600),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.18474826471279052, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,<=,153600),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2131115914677774, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,153600),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2149125430198359, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,null,153600),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2467282334459798, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,153600),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2494276206943424, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>=,153600),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2503777974922457, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,153600),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.26228005105722707, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,153600),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.26450309322274057, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,153600),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2822776532272988, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,153600),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.307224474085941, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,153600),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.31064095318944607, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,153600),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.33240594485870434, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 228, "beams": [{"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))", "score": -0.3742895067852817, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))", "score": -0.41380226729596936, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))", "score": -0.4234279964659389, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Address),Customer.Company))", "score": -0.4302662303336168, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1), Customer.Company),Customer.Company))", "score": -0.43474049930851966, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,!=,1), Customer.Company),Customer.Company))", "score": -0.4512258333498648, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Customer.Address),Customer.Company))", "score": -0.45220568184182974, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,=,1), Customer.Company),Customer.Company))", "score": -0.46739477856415906, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Address))", "score": -0.47184363542627217, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1), Customer.Address),Customer.Company))", "score": -0.47314391385438004, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Address),Customer.Company))", "score": -0.479404720014274, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,<=,1), Customer.Company),Customer.Company))", "score": -0.48827750090085276, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,!=,1), Customer.Company),Customer.Company))", "score": -0.500364323030522, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<,1), Customer.Company),Customer.Company))", "score": -0.5013230242409464, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,1), Customer.Company),Customer.Company))", "score": -0.5051706023320458, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 229, "beams": [{"orig_question": "Customers from states other than Illinois have ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,IL),merge(getData(Track),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), Invoice.BillingState),Customer.State))", "score": -0.28304121540561383, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,IL),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Customers from states other than Illinois have ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,IL),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Customer.State))", "score": -0.29713939360154007, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,IL),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Customers from states other than Illinois have ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,IL),merge(getData(Track),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), Invoice.BillingState),Invoice.BillingState))", "score": -0.30180112900975203, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,IL),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Customers from states other than Illinois have ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,IL),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Customer.State))", "score": -0.3225257005561884, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,IL),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Customers from states other than Illinois have ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,IL),merge(getData(Track),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Invoice.BillingState),Customer.State))", "score": -0.32959739762350604, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,IL),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Customers from states other than Illinois have ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,IL),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), Invoice.BillingState),Customer.State))", "score": -0.3341311714422687, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,IL),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Customers from states other than Illinois have ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,IL),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), Invoice.BillingState),Customer.State))", "score": -0.33688572946064577, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,IL),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Customers from states other than Illinois have ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,IL),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.34187900506399294, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,IL),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Customers from states other than Illinois have ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,IL),merge(getData(Track),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Invoice.BillingState),Invoice.BillingState))", "score": -0.34835731122764424, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,IL),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Customers from states other than Illinois have ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,IL),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3528910850464069, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,IL),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Customers from states other than Illinois have ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,IL),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), Invoice.BillingState),Invoice.BillingState))", "score": -0.35564564306478397, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,IL),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Customers from states other than Illinois have ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,IL),merge(getData(Track),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,InvoiceLine.TrackId), Invoice.BillingState),Customer.State))", "score": -0.358798267038023, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,IL),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Customers from states other than Illinois have ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,IL),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.36726531201864127, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,IL),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Customers from states other than Illinois have ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,IL),merge(getData(Track),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingState),Customer.State))", "score": -0.3796337130868302, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,IL),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Customers from states other than Illinois have ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,IL),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Customer.State))", "score": -0.38211311336810017, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,IL),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 230, "beams": [{"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.11776330891461839, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.BillingCity),Customer.City))", "score": -0.20221617642255296, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.281559258805828, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Customer.City))", "score": -0.36601212631376256, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.42884615074308385, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.4417584967932271, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Finland), Invoice.BillingCity),Customer.City))", "score": -0.5132990182510184, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5595900119415091, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5795274079910087, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5926421006342935, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.BillingCity),Artist.Name))", "score": -0.595284504922347, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.6055544466844367, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.BillingCity),Album.Title))", "score": -0.6372201872190999, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,Finland), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6389870942703055, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which finnish cities were invoices issued to?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Finland), Invoice.BillingCity),Customer.City))", "score": -0.6440428794494437, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 231, "beams": [{"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313), Playlist.Name),Employee.FirstName))", "score": -0.06685702385782905, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313), Playlist.Name),Playlist.Name))", "score": -0.12259224265998311, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,6854313),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Employee.FirstName))", "score": -0.2566867837417881, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Employee),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313), Playlist.Name),Employee.FirstName))", "score": -0.29134283900441527, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),PlaylistTrack.PlaylistId,PlaylistTrack.TrackId),Track.Bytes,=,6854313), Playlist.Name),Employee.FirstName))", "score": -0.33396753292426634, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313), Playlist.Name),Employee.State))", "score": -0.34410396300730695, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Employee),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313), Playlist.Name),Playlist.Name))", "score": -0.3470780578065693, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),Customer.SupportRepId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313), Playlist.Name),Employee.FirstName))", "score": -0.3473893356236692, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313), Playlist.Name),Employee.Country))", "score": -0.36057108334077165, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313), Employee.FirstName),Employee.FirstName))", "score": -0.3655011716855524, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,6854313), Playlist.Name),Employee.FirstName))", "score": -0.3698337657078909, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313), Playlist.Name),Employee.Phone))", "score": -0.3800686687043861, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313), Playlist.Name),Employee.Title))", "score": -0.3834522337508548, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3837241117980292, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In which playlist occure tracks with exactly 6854313 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,6854313),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3884459392044942, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,6854313),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 232, "beams": [{"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.17504215678885554, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.Name,=,Audiobooks), Playlist.Name),Playlist.Name))", "score": -0.20556243334324, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.Name,=,Audiobooks), Playlist.Name),Playlist.Name))", "score": -0.2218963147788024, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.Name,=,Audiobooks), Playlist.Name),Playlist.Name))", "score": -0.24728139320294887, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),getData(Playlist),PlaylistTrack.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2780209075884854, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,Playlist.PlaylistId),Playlist.Name,=,Audiobooks), Playlist.Name),Playlist.Name))", "score": -0.2942159448568802, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Playlist.Name),Playlist.Name))", "score": -0.2964488691922363, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.TrackId),Playlist.Name,=,Audiobooks), Playlist.Name),Playlist.Name))", "score": -0.3120262398609729, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.Name,=,Audiobooks), Playlist.Name),Employee.FirstName))", "score": -0.3186798264122842, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(PlaylistTrack),PlaylistTrack.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.Name,=,Audiobooks), Playlist.Name),Playlist.Name))", "score": -0.322287713382461, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(PlaylistTrack),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.Name,=,Audiobooks), Playlist.Name),Playlist.Name))", "score": -0.3247044013779838, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.Name,=,Audiobooks), Playlist.Name),Playlist.Name))", "score": -0.3344890310736582, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.Name,=,Audiobooks), Playlist.Name),Employee.FirstName))", "score": -0.3350137078478466, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(PlaylistTrack),PlaylistTrack.PlaylistId,Playlist.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.Name,=,Audiobooks), Playlist.Name),Playlist.Name))", "score": -0.33862156858591785, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(PlaylistTrack),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.Name,=,Audiobooks), Playlist.Name),Playlist.Name))", "score": -0.34103827877333354, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 233, "beams": [{"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))", "score": -0.019793716050250855, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))", "score": -0.18850836951269473, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(PlaylistTrack),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))", "score": -0.31106451457534445, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))", "score": -0.38348020912893915, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Bytes))", "score": -0.38425167892420803, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks), Track.Name),Track.Name))", "score": -0.38512878987913185, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))", "score": -0.4078124544349517, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))", "score": -0.43277337035986757, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))", "score": -0.44579114254408636, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.Bytes),Track.Name))", "score": -0.45117046106248065, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))", "score": -0.456245782959015, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Track.Name),Track.Name))", "score": -0.476196924286785, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))", "score": -0.47827428959458423, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(Playlist),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))", "score": -0.4982029134845252, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))", "score": -0.5147141104057176, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 234, "beams": [{"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.048800091544762836, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.30509135621286987, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.35146264108516334, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3838796366999304, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Rome), Invoice.BillingCountry),Customer.Country))", "score": -0.5433365966255224, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Employee.HireDate,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5712908834125159, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Employee.HireDate,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5726314753105163, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5995273663495357, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6008679582475361, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Rome), Invoice.InvoiceDate),Invoice.BillingCountry))", "score": -0.6037354518721259, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6039150850407263, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6052557406306667, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6077539057532704, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Employee.HireDate,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6514409737912163, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which country does invoice billing come from when they come from Rome?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6865421862403309, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Rome), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 235, "beams": [{"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))", "score": -0.04127715365575568, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), MediaType.Name),Customer.FirstName))", "score": -0.4361781359239103, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),MediaType.Name))", "score": -0.4364022968857171, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.Email))", "score": -0.47701541171954887, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.Email),Customer.FirstName))", "score": -0.5347562909646513, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.State),Customer.FirstName))", "score": -0.5860494256539823, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.LastName),Customer.FirstName))", "score": -0.5882468104882719, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.LastName))", "score": -0.5926410018055321, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Track.Name))", "score": -0.5991343318073632, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),MediaType.MediaTypeId))", "score": -0.60134041891979, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))", "score": -0.647975940748438, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Employee.LastName))", "score": -0.6599218903629662, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))", "score": -0.6759069872841792, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Employee.FirstName))", "score": -0.6834115444271447, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Genre.GenreId))", "score": -0.7083491741268517, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 236, "beams": [{"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -0.011504173216448773, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,None), Customer.City),Customer.City))", "score": -0.7818136807200062, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Album.Title))", "score": -0.8280554846264829, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,None), Customer.City),Customer.City))", "score": -0.8415079783317196, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.City))", "score": -0.8665956194561809, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.Fax))", "score": -0.90723891350282, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(getData(Customer), Album.Title),Customer.City))", "score": -0.9351957374729593, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.City))", "score": -0.9529638484677453, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(getData(Customer), Invoice.BillingCity),Customer.City))", "score": -1.0212500804792752, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.Company))", "score": -1.0957586429976067, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Invoice.BillingCity))", "score": -1.170000577756106, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.City))", "score": -1.2111354825104788, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),InvoiceLine.Quantity))", "score": -1.261793919011301, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.City))", "score": -1.2647051502190925, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "What are the different cities of the customers ? ", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.City))", "score": -1.3124629532847516, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 237, "beams": [{"orig_question": "What is the most expensive MPEG audio file title?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)", "score": -0.3310338304223475, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What is the most expensive MPEG audio file title?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),Track.UnitPrice),Track.UnitPrice))", "score": -0.3803115664208095, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What is the most expensive MPEG audio file title?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.49198840973912455, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What is the most expensive MPEG audio file title?", "inferred_code": "sum(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Track.UnitPrice),InvoiceLine.UnitPrice)", "score": -0.5239004091597866, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What is the most expensive MPEG audio file title?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId),Track.UnitPrice),Track.UnitPrice))", "score": -0.5343502236057507, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What is the most expensive MPEG audio file title?", "inferred_code": "sum(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId), Track.UnitPrice),InvoiceLine.UnitPrice)", "score": -0.5745439247497556, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What is the most expensive MPEG audio file title?", "inferred_code": "sum(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5833329495950538, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What is the most expensive MPEG audio file title?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),Track.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.5887493061249477, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What is the most expensive MPEG audio file title?", "inferred_code": "sum(distinct(getData(Track), MediaType.Name),Track.UnitPrice)", "score": -0.591058390395535, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What is the most expensive MPEG audio file title?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.MediaTypeId),Track.UnitPrice),Track.UnitPrice))", "score": -0.5985540326686821, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What is the most expensive MPEG audio file title?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Customer.CustomerId,Track.MediaTypeId),Track.UnitPrice),Track.UnitPrice))", "score": -0.605477812573135, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What is the most expensive MPEG audio file title?", "inferred_code": "sum(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.6073156242163329, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What is the most expensive MPEG audio file title?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.MediaTypeId),Track.UnitPrice),Track.UnitPrice))", "score": -0.6147465905383886, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What is the most expensive MPEG audio file title?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),Track.UnitPrice),Customer.State))", "score": -0.6265808735463669, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "What is the most expensive MPEG audio file title?", "inferred_code": "sum(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.6339764844668312, "correct_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 238, "beams": [{"orig_question": "What country does the employee who made an invoice on 2013-07-07 at 00:00:00 and isn't named Nancy come from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,>=,2013-07-07 00:00:00),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))", "score": -0.31781947844780223, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),filter(getData(Employee),Employee.FirstName,!=,Nancy),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee who made an invoice on 2013-07-07 at 00:00:00 and isn't named Nancy come from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,>,2013-07-07 00:00:00),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))", "score": -0.3883322855721847, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),filter(getData(Employee),Employee.FirstName,!=,Nancy),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee who made an invoice on 2013-07-07 at 00:00:00 and isn't named Nancy come from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,=,2013-07-07 00:00:00),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.Country))", "score": -0.39569974981224365, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),filter(getData(Employee),Employee.FirstName,!=,Nancy),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee who made an invoice on 2013-07-07 at 00:00:00 and isn't named Nancy come from?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.BirthDate,=,2013-07-07 00:00:00),Employee.HireDate,=,2013-07-07 00:00:00), Employee.Country),Employee.Country))", "score": -0.39672059183997777, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),filter(getData(Employee),Employee.FirstName,!=,Nancy),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee who made an invoice on 2013-07-07 at 00:00:00 and isn't named Nancy come from?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.BirthDate,=,Nancy),Employee.Country,=,2013-07-07 00:00:00), Employee.Country),Employee.Country))", "score": -0.4010971929723744, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),filter(getData(Employee),Employee.FirstName,!=,Nancy),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee who made an invoice on 2013-07-07 at 00:00:00 and isn't named Nancy come from?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.BirthDate,=,Nancy),Employee.BirthDate,=,2013-07-07 00:00:00), Employee.Country),Employee.Country))", "score": -0.41521477104105925, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),filter(getData(Employee),Employee.FirstName,!=,Nancy),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee who made an invoice on 2013-07-07 at 00:00:00 and isn't named Nancy come from?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,=,2013-07-07 00:00:00),Employee.HireDate,=,2013-07-07 00:00:00), Employee.Country),Employee.Country))", "score": -0.42149508798175517, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),filter(getData(Employee),Employee.FirstName,!=,Nancy),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee who made an invoice on 2013-07-07 at 00:00:00 and isn't named Nancy come from?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,=,2013-07-07 00:00:00),Employee.Country,=,Nancy), Employee.Country),Employee.Country))", "score": -0.4258716891141518, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),filter(getData(Employee),Employee.FirstName,!=,Nancy),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee who made an invoice on 2013-07-07 at 00:00:00 and isn't named Nancy come from?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.BirthDate,=,2013-07-07 00:00:00),Employee.HireDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))", "score": -0.42688354073366797, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),filter(getData(Employee),Employee.FirstName,!=,Nancy),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee who made an invoice on 2013-07-07 at 00:00:00 and isn't named Nancy come from?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.BirthDate,=,Nancy),Employee.Country,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))", "score": -0.43126014186606465, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),filter(getData(Employee),Employee.FirstName,!=,Nancy),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee who made an invoice on 2013-07-07 at 00:00:00 and isn't named Nancy come from?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,=,2013-07-07 00:00:00),Employee.BirthDate,=,Nancy), Employee.Country),Employee.Country))", "score": -0.43998926718283665, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),filter(getData(Employee),Employee.FirstName,!=,Nancy),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee who made an invoice on 2013-07-07 at 00:00:00 and isn't named Nancy come from?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.BirthDate,=,2013-07-07 00:00:00),Invoice.InvoiceDate,=,2013-07-07 00:00:00), Employee.Country),Employee.Country))", "score": -0.4435284037258409, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),filter(getData(Employee),Employee.FirstName,!=,Nancy),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee who made an invoice on 2013-07-07 at 00:00:00 and isn't named Nancy come from?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.BirthDate,=,Nancy),Employee.BirthDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))", "score": -0.4453777020558277, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),filter(getData(Employee),Employee.FirstName,!=,Nancy),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee who made an invoice on 2013-07-07 at 00:00:00 and isn't named Nancy come from?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,=,2013-07-07 00:00:00),Employee.HireDate,<,Nancy), Employee.Country),Employee.Country))", "score": -0.4516580189965236, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),filter(getData(Employee),Employee.FirstName,!=,Nancy),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))"}, {"orig_question": "What country does the employee who made an invoice on 2013-07-07 at 00:00:00 and isn't named Nancy come from?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.BirthDate,=,Nancy),Employee.HireDate,=,2013-07-07 00:00:00), Employee.Country),Employee.Phone))", "score": -0.4767958525736265, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),filter(getData(Employee),Employee.FirstName,!=,Nancy),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceDate,<,2013-07-07 00:00:00), Employee.Country),Employee.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 239, "beams": [{"orig_question": "What is the average total of distinct invoices of tracks with the genre R&B/Soul?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.13412570031538185, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of distinct invoices of tracks with the genre R&B/Soul?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21784708071311185, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of distinct invoices of tracks with the genre R&B/Soul?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2179273701634192, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of distinct invoices of tracks with the genre R&B/Soul?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21870647772023272, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of distinct invoices of tracks with the genre R&B/Soul?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21878676717054005, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of distinct invoices of tracks with the genre R&B/Soul?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.22284183228647028, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of distinct invoices of tracks with the genre R&B/Soul?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),Track.TrackId,Invoice.InvoiceId),Genre.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24078151118342445, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of distinct invoices of tracks with the genre R&B/Soul?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.25966380504350006, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of distinct invoices of tracks with the genre R&B/Soul?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)", "score": -0.2638640874908665, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of distinct invoices of tracks with the genre R&B/Soul?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Genre.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.288595244447173, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of distinct invoices of tracks with the genre R&B/Soul?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),Track.TrackId,Invoice.InvoiceId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)", "score": -0.28875283580170485, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of distinct invoices of tracks with the genre R&B/Soul?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2889035401479548, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of distinct invoices of tracks with the genre R&B/Soul?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.29595784764703287, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of distinct invoices of tracks with the genre R&B/Soul?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2975541284140614, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of distinct invoices of tracks with the genre R&B/Soul?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3161441795077536, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 240, "beams": [{"orig_question": "all albums", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.17988677992252633, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.3250103411741097, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.4382911877182778, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.5011675915411581, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Track.Bytes),Album.Title))", "score": -0.5589184515993111, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "sum(distinct(getData(Track), Album.Title),Album.Title)", "score": -0.5645715629394525, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.5646904499153607, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.6337614781866484, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.6722263968840707, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "sum(distinct(getData(Album), Album.Title),Album.Title)", "score": -0.7194582300994095, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "sum(distinct(filter(getData(Album),Album.Title,!=,None), Album.Title),Album.Title)", "score": -0.7275488354890848, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.7311001598718576, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.7355717645841651, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.768330915219849, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "all albums", "inferred_code": "sum(distinct(getData(Track), Album.Title),Track.Bytes)", "score": -0.7924865254255504, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 241, "beams": [{"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Album),Album.Title,=,Renato Russo - Marisa Monte),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3004042766013393, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Album),Album.Title,=,Renato Russo - Marisa Monte),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.30934640578828165, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Album),Artist.Name,=,Renato Russo - Marisa Monte),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3182935420530351, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Album),Album.Title,=,Renato Russo - Marisa Monte),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.32569405259661727, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Album),Artist.Name,=,Renato Russo - Marisa Monte),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3272356712399775, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Album),Album.Title,=,Renato Russo - Marisa Monte),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3429593987967617, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Album),Album.Title,=,Renato Russo - Marisa Monte),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3491422133750554, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Album),Album.Title,=,Renato Russo - Marisa Monte),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3499222639815774, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Renato Russo - Marisa Monte), Track.TrackId),Track.UnitPrice)", "score": -0.35191218755844134, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Renato Russo - Marisa Monte), Track.TrackId),Track.UnitPrice)", "score": -0.35237484002047526, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Album),Album.Title,=,Renato Russo - Marisa Monte),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3580843425619978, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Album),Artist.Name,=,Renato Russo - Marisa Monte),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.36703147882675125, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Album),Album.Title,=,Renato Russo - Marisa Monte),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.36887324894827056, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Album.Title,=,Renato Russo - Marisa Monte),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.36898249567116065, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much money in total has been spent on the albums of Renato Russo and Marisa Monte?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Album),Artist.Name,=,Renato Russo - Marisa Monte),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.37597356218231776, "correct_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Renato Russo - Marisa Monte), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 242, "beams": [{"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.12296581675519741, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.16579526415042245, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.19663965072208245, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.22680891146221888, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.24135678586047637, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Customer.Country))", "score": -0.26896405608847884, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2715260466006128, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2830081290701678, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Customer.City))", "score": -0.2908903188772735, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3066523313625643, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.32172996116220215, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3311479284192648, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(InvoiceLine),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.33239889641452514, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3368215921027007, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Customer.Country))", "score": -0.3461588058693349, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 243, "beams": [{"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)", "score": -0.03415506779535079, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.60661305979381, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.8135697920910776, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),Customer.CustomerId,Invoice.InvoiceId),Customer.Address,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.8267560618946894, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),Customer.CustomerId,Invoice.InvoiceId),Customer.Address,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.8275303027846894, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.Address,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.8416737650222001, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.Address,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.8519036407322522, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.Address,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.8596057139122842, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.InvoiceId),Customer.Address,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.859795472982119, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.InvoiceId),Customer.Address,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.8605697138721191, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.Address,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.8698355896223363, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(getData(InvoiceLine), Invoice.InvoiceId),Invoice.Total)", "score": -0.8700232861697622, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.Address,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.8723180791056677, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.Address,=,None), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.8730923199956677, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an invoice?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),Customer.CustomerId,Invoice.InvoiceId),Customer.Address,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -0.8864819583585375, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 244, "beams": [{"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NS), Invoice.BillingCity),Customer.City))", "score": -0.20214034644232015, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NS), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.293422714148619, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NS), Customer.City),Customer.City))", "score": -0.3238459977255843, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,=,NS), Invoice.BillingCity),Customer.City))", "score": -0.3380924056218646, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NS), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.39186014262304525, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NS), Customer.City),Invoice.BillingCity))", "score": -0.41512836543188314, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,=,NS), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.42937477332816343, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,=,NS), Customer.City),Customer.City))", "score": -0.45979805690512876, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NS), Employee.HireDate),Customer.City))", "score": -0.4898880722867034, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NS), Customer.City),InvoiceLine.Quantity))", "score": -0.5135657939063094, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,=,NS), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.5278122018025897, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.State,=,NS), Invoice.BillingCity),Customer.City))", "score": -0.5359399395929358, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,=,NS), Customer.City),Invoice.BillingCity))", "score": -0.5510804246114276, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.State,=,NS), Invoice.BillingCity),Customer.City))", "score": -0.5533927122996829, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,NS), Invoice.BillingCity),Customer.City))", "score": -0.5571829157815955, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 245, "beams": [{"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Genre),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.12341136577606449, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Genre),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.13726133558207054, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.19599704064529838, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.20984701045130444, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.23195115702062466, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Employee),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.24911865746351822, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.2620052043478531, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Employee),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.2629686272695243, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Artist),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.3113869575409575, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.3134370181547637, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Artist),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.3252369273469636, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.33100660289142536, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),Track.GenreId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.3345908792170871, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Genre),PlaylistTrack.TrackId,Track.AlbumId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Genre.Name),Genre.Name))", "score": -0.3347272116545109, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are represented in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Genre),PlaylistTrack.PlaylistId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.38073397746784343, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 246, "beams": [{"orig_question": "How much do the tracks cost with a bytes size above 11774865?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Bytes,<=,11774865), Track.TrackId),Track.UnitPrice)", "score": -0.2161190875881424, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How much do the tracks cost with a bytes size above 11774865?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Bytes,>=,11774865), Track.TrackId),Track.UnitPrice)", "score": -0.28950872430866315, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How much do the tracks cost with a bytes size above 11774865?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Bytes,=,11774865), Track.TrackId),Track.UnitPrice)", "score": -0.2957500619436704, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How much do the tracks cost with a bytes size above 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,11774865), Track.UnitPrice),Track.UnitPrice))", "score": -0.30873127613813267, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How much do the tracks cost with a bytes size above 11774865?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Bytes,<=,11774865), Track.TrackId),Track.Bytes)", "score": -0.3468782101425576, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How much do the tracks cost with a bytes size above 11774865?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Bytes,>=,11774865), Track.TrackId),Track.Bytes)", "score": -0.4202678468630783, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How much do the tracks cost with a bytes size above 11774865?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Bytes,=,11774865), Track.TrackId),Track.Bytes)", "score": -0.4265091844980855, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How much do the tracks cost with a bytes size above 11774865?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Track),Track.Bytes,=,11774865),getData(Track),Track.TrackId,Track.TrackId),Track.Bytes,<=,11774865), Track.TrackId),Track.UnitPrice)", "score": -0.49611500337177245, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How much do the tracks cost with a bytes size above 11774865?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Track),Track.Bytes,=,11774865),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11774865), Track.TrackId),Track.UnitPrice)", "score": -0.530570324239466, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How much do the tracks cost with a bytes size above 11774865?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Track),Track.Bytes,=,11774865),getData(Track),Track.TrackId,Track.TrackId),Track.Bytes,=,11774865), Track.TrackId),Track.UnitPrice)", "score": -0.5411006679173133, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How much do the tracks cost with a bytes size above 11774865?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,=,11774865), Track.UnitPrice),Track.UnitPrice))", "score": -0.5613818876881851, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How much do the tracks cost with a bytes size above 11774865?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Track),Track.Bytes,=,11774865),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,=,11774865), Track.TrackId),Track.UnitPrice)", "score": -0.5755559887850068, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How much do the tracks cost with a bytes size above 11774865?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Track),Track.Bytes,=,11774865),getData(Track),Track.TrackId,Track.TrackId),Track.Bytes,<=,11774865), Track.UnitPrice),Track.UnitPrice)", "score": -0.5888520609091704, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How much do the tracks cost with a bytes size above 11774865?", "inferred_code": "sum(distinct(filter(merge(filter(getData(InvoiceLine),Track.Bytes,=,11774865),getData(Track),Track.TrackId,Track.TrackId),Track.Bytes,<=,11774865), Track.TrackId),Track.UnitPrice)", "score": -0.5944329607019275, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "How much do the tracks cost with a bytes size above 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,11774865), Track.UnitPrice),Track.UnitPrice))", "score": -0.6142451908126532, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 247, "beams": [{"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.14876291006176431, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.18349528149466626, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2238412043797481, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2531140610569066, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2585735758126501, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId),Genre.Name,=,Opera), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3017926322004257, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3098707988443721, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Opera),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.31320975776882315, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3240953363474282, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3281923553748904, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId),Genre.Name,=,Opera), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.33652500363332766, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3376699454248216, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)", "score": -0.3399744533766684, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera),getData(Invoice),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3479535047199344, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "How much revenue is generated by orders that contain tracks of the Opera genre?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Opera), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.365070202919734, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Opera), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 248, "beams": [{"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Jane), Employee.City),Employee.City))", "score": -0.26849854999090894, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Jane), Employee.City),Employee.LastName))", "score": -0.2974408965637849, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Jane), Employee.City),Employee.Title))", "score": -0.3874767076304124, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Jane), Employee.City),Artist.Name))", "score": -0.39167275541331037, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Jane), Employee.City),Employee.Fax))", "score": -0.44660371058489545, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Jane), Employee.City),Employee.City))", "score": -0.4493780236771272, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Jane), Employee.LastName),Employee.City))", "score": -0.4599179204633401, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Jane), Employee.City),Employee.LastName))", "score": -0.4783203702500032, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Jane), Employee.LastName),Employee.LastName))", "score": -0.4888602670362161, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Jane), Employee.Title),Employee.City))", "score": -0.5021792825391458, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Jane), Employee.Title),Employee.LastName))", "score": -0.5311216291120218, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Jane), Employee.City),Album.ArtistId))", "score": -0.5511426877310441, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Jane), Employee.City),Employee.Title))", "score": -0.5683561813166307, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Jane), Employee.City),Artist.Name))", "score": -0.5725522290995286, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}, {"orig_question": "What Employee Title does every Employee have except Jane?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Jane), Employee.LastName),Employee.Title))", "score": -0.5788960781028436, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Jane), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
