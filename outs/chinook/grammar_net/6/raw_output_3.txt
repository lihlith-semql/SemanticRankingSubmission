{"index": 0, "beams": [{"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.11768890259563695, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.15326412100775025, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.16332972449053654, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.18075583505417098, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.1985636692148445, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.20131960653433045, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.2085365843016142, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.2652873240085972, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),MediaType.Name,=,Brazilian Music),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.27210474118881245, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2822970657640162, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.28683268024417524, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.30423767783401867, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.34621340302306247, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.36243197158898227, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),getData(MediaType),PlaylistTrack.TrackId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3779804165282483, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 1, "beams": [{"orig_question": "To what countries were invoices sent that aren't dated from 2012-06-12 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2012-06-12 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.05299633765935141, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2012-06-12 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To what countries were invoices sent that aren't dated from 2012-06-12 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2012-06-12 00:00:00), Invoice.BillingCountry),Employee.Phone))", "score": -0.3997940302488132, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2012-06-12 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To what countries were invoices sent that aren't dated from 2012-06-12 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,!=,2012-06-12 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.44752228470861155, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2012-06-12 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To what countries were invoices sent that aren't dated from 2012-06-12 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,2012-06-12 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4556737563234492, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2012-06-12 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To what countries were invoices sent that aren't dated from 2012-06-12 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2012-06-12 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5218787544999941, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2012-06-12 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To what countries were invoices sent that aren't dated from 2012-06-12 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,2012-06-12 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5316219946962519, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2012-06-12 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To what countries were invoices sent that aren't dated from 2012-06-12 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.HireDate,!=,2012-06-12 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5451365134340449, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2012-06-12 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To what countries were invoices sent that aren't dated from 2012-06-12 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,2012-06-12 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5631742498499079, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2012-06-12 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To what countries were invoices sent that aren't dated from 2012-06-12 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2012-06-12 00:00:00), Invoice.BillingCountry),Invoice.BillingState))", "score": -0.5850377560254856, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2012-06-12 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To what countries were invoices sent that aren't dated from 2012-06-12 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2012-06-12 00:00:00), Invoice.BillingCountry),Customer.Phone))", "score": -0.5864617109891697, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2012-06-12 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To what countries were invoices sent that aren't dated from 2012-06-12 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,2012-06-12 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5875352046114131, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2012-06-12 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To what countries were invoices sent that aren't dated from 2012-06-12 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2012-06-12 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5906023591996927, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2012-06-12 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To what countries were invoices sent that aren't dated from 2012-06-12 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.BirthDate,!=,2012-06-12 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6100738665682002, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2012-06-12 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To what countries were invoices sent that aren't dated from 2012-06-12 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2012-06-12 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.6361642441692897, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2012-06-12 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To what countries were invoices sent that aren't dated from 2012-06-12 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2012-06-12 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Phone))", "score": -0.6497898715981706, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2012-06-12 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 2, "beams": [{"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,!=,Rock And Roll), Track.Name),Track.Name))", "score": -0.1409215244531428, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Rock And Roll),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Track.Name))", "score": -0.18347448428512947, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll), Track.Name),Track.Name))", "score": -0.19644913063674918, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,!=,Rock And Roll), Track.Name),Track.Name))", "score": -0.24283042118653722, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Rock And Roll),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Track.Name),Track.Name))", "score": -0.24992115892145547, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Track.Name))", "score": -0.2559682605571732, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Track.Name))", "score": -0.27268979826046924, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll), Track.Name),Track.Name))", "score": -0.2812432461014507, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,!=,Rock And Roll),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll), Track.Name),Track.Name))", "score": -0.2826624065313022, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll), Track.Name),Track.Name))", "score": -0.2896270780976487, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.Name,!=,Rock And Roll),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll), Track.Name),Track.Name))", "score": -0.3018229414664595, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,!=,Rock And Roll),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll), Track.Name),Track.Name))", "score": -0.3079696987640716, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Rock And Roll),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Track.Milliseconds),Track.Name))", "score": -0.3085711939039399, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Track.Name))", "score": -0.3277397925672758, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(PlaylistTrack),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,!=,Rock And Roll), Track.Name),Track.Name))", "score": -0.34449959104630684, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 3, "beams": [{"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.060404177420423366, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.3437048111745221, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.3971273485949496, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.41204326193837915, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.41991236932177034, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.Total),Invoice.BillingState))", "score": -0.4314907748630503, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,>=,11.94),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.45822744845365815, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.Total)", "score": -0.47832418505565355, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.5136259790888289, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.5222464216665038, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.5231908556452254, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,11.94),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.5399692841245917, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,11.94),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.5539188219197108, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.Total))", "score": -0.584266674835817, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.5855841563352442, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 4, "beams": [{"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.1136421207131035, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.15666130363330724, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.17047958748175823, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.17588329383871373, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.189897997937594, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.21507861735304817, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.2184668578304716, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25213168243113243, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2582473464243975, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.2609751880692942, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.2639695150746335, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.26626465296571544, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.27339853985585794, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2848190885842961, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28644019013013694, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 5, "beams": [{"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.10487698191326511, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.19156100020754102, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.19929820743563062, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.2117291142432015, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.22965110787406634, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.25049327966014573, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2622495795486654, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Genre),PlaylistTrack.TrackId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.2629241864677166, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),Track.GenreId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.26429200158663785, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2691217663377848, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.2767229083942087, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2888892057282114, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),getData(Track),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2924946137344683, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.31548708703235717, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are the tracks in the playlist 90's Music?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Bytes,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.3334870335062956, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 6, "beams": [{"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.Country),Customer.Country))", "score": -0.043424095172667876, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,jane@chinookcorp.com), Customer.Country),Customer.Country))", "score": -0.3097945034096483, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.State),Customer.Country))", "score": -0.47653622381039895, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.Country),Customer.State))", "score": -0.49501844789483584, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,jane@chinookcorp.com), Customer.Country),Customer.Country))", "score": -0.5306208014080767, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.Country),Customer.Fax))", "score": -0.5498424127290491, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Album.Title,=,jane@chinookcorp.com), Customer.Country),Customer.Country))", "score": -0.5850754260609392, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),InvoiceLine.UnitPrice,=,jane@chinookcorp.com), Customer.Country),Customer.Country))", "score": -0.609740066487575, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.Country),Customer.Phone))", "score": -0.622163529653335, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.Company),Customer.Country))", "score": -0.6369780396635178, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,jane@chinookcorp.com), Customer.Country),Customer.Country))", "score": -0.6444999664381612, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.Phone),Customer.Country))", "score": -0.6870972608739976, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.Country),Customer.Company))", "score": -0.7077520444581751, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,jane@chinookcorp.com), Customer.Country),Employee.Country))", "score": -0.7089216664026026, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}, {"orig_question": "From which country is the customer with email jane@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,jane@chinookcorp.com), Customer.Country),Customer.Country))", "score": -0.7218445419857744, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,jane@chinookcorp.com), Employee.Country),Employee.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 7, "beams": [{"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))", "score": -0.03427850778825814, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.LastName))", "score": -0.3711303374511772, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.LastName),Customer.FirstName))", "score": -0.4367090570522123, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.Address),Customer.FirstName))", "score": -0.46586216564901406, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.Email),Customer.FirstName))", "score": -0.4824062394691282, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.Email))", "score": -0.5468716225368553, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.Phone),Customer.FirstName))", "score": -0.5779258119655424, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Album.Title,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))", "score": -0.6642100736280554, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))", "score": -0.7243790838765563, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))", "score": -0.7340269456763053, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), MediaType.MediaTypeId),Customer.FirstName))", "score": -0.7342509734226041, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))", "score": -0.7466512247701758, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Employee.FirstName))", "score": -0.750131507847982, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), MediaType.Name),Customer.FirstName))", "score": -0.7504012691570097, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address ellie.sullivan@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))", "score": -0.7604800984045141, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,ellie.sullivan@shaw.ca), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 8, "beams": [{"orig_question": "What metal albums do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Album.AlbumId),Artist.Name,=,Metal), Album.Title),Album.Title))", "score": -0.23333095890440528, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What metal albums do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Album.AlbumId),Album.Title,=,Metal), Album.Title),Album.Title))", "score": -0.2394508674415347, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What metal albums do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.AlbumId),Artist.Name,=,Metal), Album.Title),Album.Title))", "score": -0.2987465047630253, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What metal albums do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Album.ArtistId),Artist.Name,=,Metal), Album.Title),Album.Title))", "score": -0.3020844238441956, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What metal albums do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.AlbumId),Album.Title,=,Metal), Album.Title),Album.Title))", "score": -0.30486641330015474, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What metal albums do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Album.ArtistId),Album.Title,=,Metal), Album.Title),Album.Title))", "score": -0.308204332381325, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What metal albums do we have?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Album.Title,=,Metal), Album.Title),Album.Title))", "score": -0.310289302138699, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What metal albums do we have?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Metal), Album.Title),Album.Title))", "score": -0.33651653793276637, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What metal albums do we have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,Metal),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.3483936960433094, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What metal albums do we have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,Metal),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3653275362380008, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What metal albums do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Album.AlbumId),Genre.Name,=,Metal), Album.Title),Album.Title))", "score": -0.36542849080739603, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What metal albums do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Metal), Album.Title),Album.Title))", "score": -0.3674999697028156, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What metal albums do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.TrackId),Artist.Name,=,Metal), Album.Title),Album.Title))", "score": -0.37077966370813364, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What metal albums do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Album.Title,=,Metal), Album.Title),Album.Title))", "score": -0.37361989623739583, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What metal albums do we have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,Metal),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.41423921595259006, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 9, "beams": [{"orig_question": "To which country belongs the 89503 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3149278829623654, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country belongs the 89503 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3377051944662526, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country belongs the 89503 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,89503), Customer.Country),Invoice.BillingCountry))", "score": -0.3821508283544972, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country belongs the 89503 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingPostalCode,=,89503), Customer.Country),Invoice.BillingCountry))", "score": -0.4049281398583844, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country belongs the 89503 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,89503), Invoice.BillingCountry),Customer.Country))", "score": -0.4173867250610783, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country belongs the 89503 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,89503), Invoice.BillingCountry),Customer.Phone))", "score": -0.43957216989292647, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country belongs the 89503 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Customer.Country))", "score": -0.4401640365649655, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country belongs the 89503 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Customer.Phone))", "score": -0.46234948139681364, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country belongs the 89503 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.PostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.47766376983418013, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country belongs the 89503 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.PostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.48055680047764326, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country belongs the 89503 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.PostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.48342432033314253, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country belongs the 89503 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,89503), Customer.Country),Customer.Country))", "score": -0.48460967045321013, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country belongs the 89503 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5004410813380673, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country belongs the 89503 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5062016318370297, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country belongs the 89503 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,89503), Customer.Country),Customer.Phone))", "score": -0.5067951152850583, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 10, "beams": [{"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.21153361086167827, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.22555492140997838, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),Track.UnitPrice),Album.Title))", "score": -0.23790583522823353, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),Track.UnitPrice),Album.Title))", "score": -0.2632924434325194, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.UnitPrice),Album.Title))", "score": -0.2652021499471121, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),Track.UnitPrice),Album.Title))", "score": -0.2674279856939151, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),Track.UnitPrice),Album.Title))", "score": -0.30361703819826125, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.31771225599686304, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,!=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3220855077071045, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),InvoiceLine.UnitPrice),Album.Title))", "score": -0.34481621719797534, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.3469205486989793, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.UnitPrice),Album.Title))", "score": -0.35482887937177643, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.36073603959177675, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),Track.Bytes),Album.Title))", "score": -0.36358298257871685, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),InvoiceLine.UnitPrice),Album.Title))", "score": -0.3702028342798499, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 11, "beams": [{"orig_question": "Who are the track composers for Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Battlestar Galactica), Track.Composer),Track.Composer))", "score": -0.11283958009335038, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the track composers for Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Battlestar Galactica), Track.Composer),Track.Composer))", "score": -0.24458932927700516, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the track composers for Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Genre.GenreId,InvoiceLine.InvoiceId),Track.Composer,=,Battlestar Galactica), Track.Composer),Track.Composer))", "score": -0.4256086316448726, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the track composers for Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Genre.GenreId,InvoiceLine.InvoiceId),Track.Composer,=,Battlestar Galactica), Track.Composer),Track.Composer))", "score": -0.4366822892215444, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the track composers for Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Battlestar Galactica), Track.Composer),Track.Composer))", "score": -0.4466158719751259, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the track composers for Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Battlestar Galactica), Track.Composer),Track.Composer))", "score": -0.45768952955179776, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the track composers for Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,InvoiceLine.InvoiceId),Track.Composer,=,Battlestar Galactica), Track.Composer),Track.Composer))", "score": -0.463273129561431, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the track composers for Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,InvoiceLine.InvoiceId),Track.Composer,=,Battlestar Galactica), Track.Composer),Track.Composer))", "score": -0.47434678713810285, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the track composers for Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Genre.GenreId,InvoiceLine.InvoiceId),Track.Composer,=,Battlestar Galactica), Track.Composer),Track.Composer))", "score": -0.47575535956092524, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the track composers for Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Battlestar Galactica), Track.Composer),Track.Composer))", "score": -0.48428040422528273, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the track composers for Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Genre.GenreId,InvoiceLine.InvoiceId),Track.Composer,=,Battlestar Galactica), Track.Composer),Track.Composer))", "score": -0.48682905147119543, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the track composers for Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Battlestar Galactica), Track.UnitPrice),Track.Composer))", "score": -0.5061290334433579, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the track composers for Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Battlestar Galactica), Track.Milliseconds),Track.Composer))", "score": -0.5279459725588822, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the track composers for Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Battlestar Galactica),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Composer),Track.Composer))", "score": -0.5424427393231298, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the track composers for Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Battlestar Galactica),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.GenreId), Track.Composer),Track.Composer))", "score": -0.557943344495997, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 12, "beams": [{"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Customer.Address))", "score": -0.29879740659098436, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),MediaType.Name))", "score": -0.325799677335439, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),MediaType.Name))", "score": -0.33255801802718726, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Customer.Address))", "score": -0.33291736583123166, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Company),MediaType.Name))", "score": -0.3374096720738324, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total),Customer.Address))", "score": -0.3461074583592215, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total),Customer.Address))", "score": -0.34647236027310485, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Company),Customer.Address))", "score": -0.3547015372850832, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3641495570445263, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Company),MediaType.Name))", "score": -0.3727322850018637, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total),Customer.Address))", "score": -0.3783971578023491, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Company),Customer.Address))", "score": -0.3986627963139296, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Customer.Address))", "score": -0.4073325417517216, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Customer.Address))", "score": -0.41409088244346987, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers bought tracks that cost any other price than 99 cents?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),InvoiceLine.Quantity))", "score": -0.41465377310922474, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 13, "beams": [{"orig_question": "What is the size of all the tracks that have been purchased from the address 113 Lupus St?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,113 Lupus St), Track.TrackId),Track.Bytes)", "score": -0.11133031220511645, "correct_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,113 Lupus St),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all the tracks that have been purchased from the address 113 Lupus St?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,113 Lupus St), Track.TrackId),Track.Bytes)", "score": -0.20799792574078257, "correct_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,113 Lupus St),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all the tracks that have been purchased from the address 113 Lupus St?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,113 Lupus St),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.2386011903772852, "correct_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,113 Lupus St),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all the tracks that have been purchased from the address 113 Lupus St?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,113 Lupus St),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.24566162469224506, "correct_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,113 Lupus St),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all the tracks that have been purchased from the address 113 Lupus St?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,113 Lupus St), Track.Bytes),Track.Bytes))", "score": -0.27324470200881407, "correct_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,113 Lupus St),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all the tracks that have been purchased from the address 113 Lupus St?", "inferred_code": "sum(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,113 Lupus St),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.3078958555131097, "correct_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,113 Lupus St),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all the tracks that have been purchased from the address 113 Lupus St?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,113 Lupus St), Track.TrackId),Track.Bytes)", "score": -0.31320767348762946, "correct_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,113 Lupus St),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all the tracks that have been purchased from the address 113 Lupus St?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,113 Lupus St), Track.Bytes),Track.Bytes))", "score": -0.31658466956469056, "correct_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,113 Lupus St),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all the tracks that have been purchased from the address 113 Lupus St?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,113 Lupus St),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.31710923750418524, "correct_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,113 Lupus St),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all the tracks that have been purchased from the address 113 Lupus St?", "inferred_code": "sum(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,113 Lupus St),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.34007268410998753, "correct_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,113 Lupus St),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all the tracks that have been purchased from the address 113 Lupus St?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,113 Lupus St),getData(Track),Track.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.38248461028214176, "correct_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,113 Lupus St),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all the tracks that have been purchased from the address 113 Lupus St?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,113 Lupus St),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.38482554432187904, "correct_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,113 Lupus St),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all the tracks that have been purchased from the address 113 Lupus St?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,113 Lupus St),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.38772984312130726, "correct_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,113 Lupus St),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all the tracks that have been purchased from the address 113 Lupus St?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,113 Lupus St),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.4147322127568661, "correct_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,113 Lupus St),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all the tracks that have been purchased from the address 113 Lupus St?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,113 Lupus St), Track.Bytes),Track.Bytes))", "score": -0.4410103266582155, "correct_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,113 Lupus St),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 14, "beams": [{"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))", "score": -0.26622106929062284, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Invoice.CustomerId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.Address,=,590 Columbia Boulevard West), Track.TrackId),Track.UnitPrice)", "score": -0.3926877320396538, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Invoice.CustomerId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Invoice.CustomerId),Employee.Address,=,590 Columbia Boulevard West), Track.TrackId),Track.UnitPrice)", "score": -0.39810885104369076, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.Address,=,590 Columbia Boulevard West), Track.TrackId),Track.UnitPrice)", "score": -0.40060878514419945, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Invoice.CustomerId),Employee.Address,=,590 Columbia Boulevard West), Track.TrackId),Track.UnitPrice)", "score": -0.40602990414823636, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.Address,=,590 Columbia Boulevard West), Track.TrackId),Track.UnitPrice)", "score": -0.43273371618657275, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Invoice.CustomerId),Employee.Address,=,590 Columbia Boulevard West), Track.TrackId),Track.UnitPrice)", "score": -0.4381548351906097, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.Address,=,590 Columbia Boulevard West), Track.TrackId),Track.UnitPrice)", "score": -0.4406547692911184, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Invoice.CustomerId),Employee.Address,=,590 Columbia Boulevard West), Track.TrackId),Track.UnitPrice)", "score": -0.4460758882951553, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Invoice.CustomerId,Customer.SupportRepId),getData(Employee),Customer.CustomerId,Employee.EmployeeId),Employee.Address,=,590 Columbia Boulevard West), Track.TrackId),Track.UnitPrice)", "score": -0.4535242807585078, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Invoice.CustomerId,Customer.SupportRepId),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId),Employee.Address,=,590 Columbia Boulevard West), Track.TrackId),Track.UnitPrice)", "score": -0.45610566575472583, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),InvoiceLine.InvoiceId,Employee.EmployeeId),Invoice.Total,=,590 Columbia Boulevard West), Track.TrackId),Track.UnitPrice)", "score": -0.4995874026905876, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Invoice.CustomerId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.Address,=,590 Columbia Boulevard West), Track.TrackId),Track.Bytes)", "score": -0.5152801021707816, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),InvoiceLine.InvoiceId,Employee.EmployeeId),Invoice.Total,=,590 Columbia Boulevard West), Employee.BirthDate),Track.UnitPrice)", "score": -0.5363646627692021, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.Total,=,590 Columbia Boulevard West), Track.TrackId),Track.UnitPrice)", "score": -0.5375788065720508, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 15, "beams": [{"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))", "score": -0.027960393636021763, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))", "score": -0.5014343048096634, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Employee.City),Customer.City))", "score": -0.5565053076134063, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Album.Title))", "score": -0.574937084747944, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.Email),Customer.City))", "score": -0.5817944259033538, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Employee.City))", "score": -0.5869223271147348, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.Company),Customer.City))", "score": -0.6210926622734405, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,+1 (520) 622-4200), Customer.City),Customer.City))", "score": -0.642679461336229, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.City))", "score": -0.6432555765495636, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.Country),Customer.City))", "score": -0.6592520923004486, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.Fax),Customer.City))", "score": -0.6648065895424224, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,+1 (520) 622-4200), Customer.City),Customer.City))", "score": -0.6723744357586838, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.Company))", "score": -0.6894188318983652, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200),filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200),Invoice.CustomerId,Invoice.CustomerId), Customer.Fax),Customer.City))", "score": -0.704991991518812, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200),filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200),Invoice.CustomerId,Customer.Phone), Customer.Fax),Customer.City))", "score": -0.7064951392760669, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 16, "beams": [{"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.FirstName,=,Fernanda),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.21497920964680406, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.FirstName,=,Fernanda),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2623156573207002, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.FirstName,=,Fernanda),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2807871397458072, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.FirstName,=,Fernanda),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2821779781159341, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.FirstName,=,Fernanda),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.29633753672738505, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.FirstName,=,Fernanda),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3081663874311267, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.FirstName,=,Fernanda),merge(getData(Customer),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3198317118836147, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Customer.FirstName,=,Fernanda),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.32553897471991944, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3262041840008626, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.FirstName,=,Fernanda),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3281235874197034, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.FirstName,=,Fernanda),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.34177430516989665, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.34341317987808667, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3678035333194762, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.38501252919670026, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of tracks bought by customers with the first name Fernanda?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),Invoice.InvoiceId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.39485011239517315, "correct_code": "sum(distinct(filter(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.FirstName,=,Fernanda), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 17, "beams": [{"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Album.Title))", "score": -0.2664612662177448, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Customer), Album.Title),Album.Title))", "score": -0.3546288135974237, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Customer), Artist.Name),Album.Title))", "score": -0.38844324137812525, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.LastName),Album.Title))", "score": -0.39762709116750294, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,None), Employee.LastName),Album.Title))", "score": -0.5176917344060712, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Genre.Name,=,None),merge(getData(Invoice),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Artist.Name),Album.Title))", "score": -0.5319806370129209, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.FirstName,=,None),merge(getData(Invoice),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Artist.Name),Album.Title))", "score": -0.5410206779004547, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Genre.Name,=,None),merge(getData(PlaylistTrack),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Artist.Name),Album.Title))", "score": -0.5535802476529399, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.FirstName,=,None),merge(getData(PlaylistTrack),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Artist.Name),Album.Title))", "score": -0.5626202885404737, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,None), Employee.LastName),Employee.LastName))", "score": -0.5705428153005414, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Genre.Name,=,None),merge(getData(Invoice),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.5853914091817521, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.FirstName,=,None),merge(getData(Invoice),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.5944314594833372, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.FirstName,=,None), Employee.LastName),Album.Title))", "score": -0.6034480288353734, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Genre.Name,=,None),merge(getData(PlaylistTrack),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.6069910198217712, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,None), Artist.Name),Album.Title))", "score": -0.6373763709989362, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 18, "beams": [{"orig_question": "Are there any playlists which contain tracks that are longer than 205766 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,205766),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.11119458385806757, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists which contain tracks that are longer than 205766 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.14107692713974346, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists which contain tracks that are longer than 205766 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,205766),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.189521525478507, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists which contain tracks that are longer than 205766 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,205766), Playlist.Name),Playlist.Name))", "score": -0.24048198172177493, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists which contain tracks that are longer than 205766 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2497598221054359, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists which contain tracks that are longer than 205766 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,205766),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.25803759330850395, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists which contain tracks that are longer than 205766 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>,205766), Playlist.Name),Playlist.Name))", "score": -0.26395433353639874, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists which contain tracks that are longer than 205766 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,205766), Playlist.Name),Playlist.Name))", "score": -0.28328988646629766, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists which contain tracks that are longer than 205766 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,205766), Playlist.Name),Playlist.Name))", "score": -0.3238622994114855, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists which contain tracks that are longer than 205766 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.34566270623507755, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists which contain tracks that are longer than 205766 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,205766), Playlist.Name),Playlist.Name))", "score": -0.3486152024223767, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists which contain tracks that are longer than 205766 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,205766),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Employee.FirstName))", "score": -0.3486492523846249, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists which contain tracks that are longer than 205766 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,<=,205766), Playlist.Name),Playlist.Name))", "score": -0.360513202042187, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists which contain tracks that are longer than 205766 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,205766),merge(getData(PlaylistTrack),getData(MediaType),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3704915185001388, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists which contain tracks that are longer than 205766 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,205766),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Customer.FirstName))", "score": -0.3733851082101453, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>,205766),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 19, "beams": [{"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,TV Shows),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.1346533448890886, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.13687268201383349, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,TV Shows), Album.Title),Album.Title))", "score": -0.14396844094114547, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,TV Shows), Album.Title),Album.Title))", "score": -0.160624037448189, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,TV Shows),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.17374929087089974, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Artist.Name),Album.Title))", "score": -0.24271720510978967, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,TV Shows),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.27125931605519776, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,=,TV Shows),Genre.GenreId,Track.GenreId),Genre.Name,=,TV Shows), Album.Title),Album.Title))", "score": -0.3171756347910389, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Composer),Album.Title))", "score": -0.3398232182697417, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,!=,TV Shows),Genre.GenreId,Track.GenreId),Genre.Name,=,TV Shows), Album.Title),Album.Title))", "score": -0.3438558809651068, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,TV Shows), Album.Title),Album.Title))", "score": -0.3524790520465738, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,TV Shows),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Artist.Name),Album.Title))", "score": -0.3539084886266161, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.4006664406316888, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.40461202090269327, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,TV Shows),getData(Album),Track.AlbumId,Album.AlbumId), Artist.Name),Album.Title))", "score": -0.43056582648672287, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 20, "beams": [{"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))", "score": -0.06802711622776769, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Employee.State))", "score": -0.21340165274204992, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Ireland), Invoice.BillingState),Invoice.BillingState))", "score": -0.3322764466142871, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Ireland), Invoice.BillingState),Employee.State))", "score": -0.47765098312856935, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Ireland), Invoice.BillingState),Invoice.BillingState))", "score": -0.5138356516695239, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Playlist.Name))", "score": -0.5940930022484281, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Customer.State))", "score": -0.6092237009293058, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.6492791557766343, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Employee.State))", "score": -0.6561528928001233, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Ireland), Invoice.BillingState),Employee.State))", "score": -0.6592101881838062, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,Ireland), Invoice.BillingState),Invoice.BillingState))", "score": -0.6655892262792804, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.6657209512049087, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Employee.State))", "score": -0.6725946882283979, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Employee.Country))", "score": -0.6787231935745694, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Employee.State),Invoice.BillingState))", "score": -0.6812771736736067, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 21, "beams": [{"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.11419592632615443, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.13654837753245985, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.17982955574269302, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))", "score": -0.1968974347688397, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.20345524386959823, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Artist.Name,!=,Music Videos), Genre.Name),Genre.Name))", "score": -0.22824248868860694, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.22954887384875242, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.23584463515992873, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.24503333699852672, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2579897682210447, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2822614664438132, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,MediaType.MediaTypeId), Genre.Name),Genre.Name))", "score": -0.3041883175913242, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))", "score": -0.3074467974570259, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.3079585738566006, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre that the playlist Music Videos does not contain?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.31581286593659685, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 22, "beams": [{"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.13210556157624892, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,The Black Crowes),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.1387946606834122, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,The Black Crowes),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.14927964151636713, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes), MediaType.Name),MediaType.Name))", "score": -0.1638824643761472, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,=,The Black Crowes), MediaType.Name),MediaType.Name))", "score": -0.1833521819480059, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,The Black Crowes), MediaType.Name),MediaType.Name))", "score": -0.202450114109761, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.Title,=,The Black Crowes), MediaType.Name),MediaType.Name))", "score": -0.2631907851995727, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes), MediaType.Name),MediaType.Name))", "score": -0.26430676366128925, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,The Black Crowes),merge(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2914241355180696, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Artist.Name,=,The Black Crowes),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.30506970086315677, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes), MediaType.Name),MediaType.Name))", "score": -0.30545064822570916, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Album.ArtistId),Artist.Name,=,The Black Crowes), MediaType.Name),MediaType.Name))", "score": -0.3065106925384763, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Album.Title,=,The Black Crowes), MediaType.Name),MediaType.Name))", "score": -0.3155847345249056, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,The Black Crowes),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.34079710299464006, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the distinct media type names of tracks in albums created by The Black Crowes.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.353352912350394, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,The Black Crowes),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 23, "beams": [{"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Track.Name),Track.Name))", "score": -0.103897527195598, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.19196237359173246, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.19281672705434016, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Track.Name),Track.Name))", "score": -0.20920328318357492, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(min(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),Track.Bytes),Track.Name))", "score": -0.21301327160457925, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.2658489705112805, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos),Track.Bytes),Track.Name))", "score": -0.29983792059365777, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(max(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),Track.Bytes),Track.Name))", "score": -0.3200597577250599, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos),Track.Bytes),Track.Name))", "score": -0.3265529881501117, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.33001086399780444, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Name),Track.Name))", "score": -0.35971424372691657, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.3597163647508255, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.36493181524416857, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Milliseconds),Track.Name))", "score": -0.3879598622883808, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the different track names of the tracks in the playlist Music Videos", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes),Track.Name))", "score": -0.4607746368347558, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 24, "beams": [{"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2508852675211683, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Invoice.BillingAddress),MediaType.Name))", "score": -0.26573293154424377, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Comedy),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingAddress),MediaType.Name))", "score": -0.3156598104922255, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),Track.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.3166276965825074, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3230702039969593, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Comedy),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Track),Track.GenreId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingAddress),MediaType.Name))", "score": -0.3314500929691872, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Comedy),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.GenreId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3366117150616509, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3370312002448831, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingAddress),MediaType.Name))", "score": -0.3379178736412002, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Track),Track.GenreId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingAddress),MediaType.Name))", "score": -0.33928739760723314, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Comedy),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingAddress),MediaType.Name))", "score": -0.34067433424656396, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Comedy),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.GenreId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingAddress),MediaType.Name))", "score": -0.34292497987703185, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Comedy),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.34336191164880897, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingAddress),MediaType.Name))", "score": -0.34697645415136463, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.35185932550130394, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 25, "beams": [{"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.07603901260293179, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197), Playlist.Name),Playlist.Name))", "score": -0.10516381555895317, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,254197),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.21457047478864866, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.23110775053611127, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,=,254197), Playlist.Name),Playlist.Name))", "score": -0.30055472511014303, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3475179811259819, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,=,254197),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197), Playlist.Name),Playlist.Name))", "score": -0.3582223315405821, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,254197),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3670920972120193, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,254197),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3732588544979264, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,=,254197),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197), Playlist.Name),Playlist.Name))", "score": -0.39487390680354256, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197),getData(PlaylistTrack),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.4035641693206831, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.Name), Playlist.Name),Playlist.Name))", "score": -0.4233614173619953, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,254197),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.42568596789598573, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.Name),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,254197), Playlist.Name),Playlist.Name))", "score": -0.4273417063456455, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists contain the track 254197 milliseconds long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,254197), Playlist.Name),Playlist.Name))", "score": -0.42879762632351576, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,254197),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 26, "beams": [{"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))", "score": -0.04035830979410093, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Gruber), Customer.Email),Customer.Email))", "score": -0.2517874382174341, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.LastName))", "score": -0.5539830943307607, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.State),Customer.Email))", "score": -0.5953422404563753, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,Gruber), Customer.Email),Customer.Email))", "score": -0.6040365846565692, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,Gruber), Customer.Email),Customer.Email))", "score": -0.6187052877357928, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.LastName),Customer.Email))", "score": -0.6673596121108858, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.LastName,!=,Gruber), Customer.Email),Customer.Email))", "score": -0.6734597833565203, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))", "score": -0.6809722586767748, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))", "score": -0.7048230355576379, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.State))", "score": -0.7296856065950124, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Album.Title))", "score": -0.7430148144921986, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Employee.Email))", "score": -0.7565895339212148, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Gruber), Customer.Email),Customer.LastName))", "score": -0.7654122227540938, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}, {"orig_question": "What are the emails of customers with a last name different than Gruber?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Track.Name,!=,Gruber), Customer.Email),Customer.Email))", "score": -0.7751745136192767, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Gruber), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 27, "beams": [{"orig_question": " where live the employees who were hired after 30.04.2002", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.City),Employee.City))", "score": -0.20319439896411495, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": " where live the employees who were hired after 30.04.2002", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.HireDate),Employee.City))", "score": -0.33851922729081707, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": " where live the employees who were hired after 30.04.2002", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.BirthDate),Employee.City))", "score": -0.3493560669667204, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": " where live the employees who were hired after 30.04.2002", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.City),Track.UnitPrice))", "score": -0.43120577984518604, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": " where live the employees who were hired after 30.04.2002", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.City),Employee.BirthDate))", "score": -0.4342581933087786, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": " where live the employees who were hired after 30.04.2002", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.City),Employee.City))", "score": -0.4766937182939728, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": " where live the employees who were hired after 30.04.2002", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.City),Track.Composer))", "score": -0.48422256165213184, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": " where live the employees who were hired after 30.04.2002", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.Title),Employee.City))", "score": -0.4944995311743696, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": " where live the employees who were hired after 30.04.2002", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Track.UnitPrice),Employee.City))", "score": -0.4959125784880598, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": " where live the employees who were hired after 30.04.2002", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Employee.HireDate,>,2002-05-01 00:00:00), Employee.City),Track.Composer))", "score": -0.5214153275325221, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": " where live the employees who were hired after 30.04.2002", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.City))", "score": -0.5297044781691511, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": " where live the employees who were hired after 30.04.2002", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,>,2002-05-01 00:00:00), Employee.City),Employee.City))", "score": -0.5617457847765763, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": " where live the employees who were hired after 30.04.2002", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Employee.HireDate,>,2002-05-01 00:00:00), Track.UnitPrice),Track.Composer))", "score": -0.5641540034613672, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": " where live the employees who were hired after 30.04.2002", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Employee.HireDate,>,2002-05-01 00:00:00), Invoice.BillingCity),Track.Composer))", "score": -0.5647752400208673, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.Address),Employee.Address))"}, {"orig_question": " where live the employees who were hired after 30.04.2002", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.HireDate),Track.UnitPrice))", "score": -0.5665306081718882, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 28, "beams": [{"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.10238945304445224, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.1459098210595709, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.24114496814566774, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.24186038287310063, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3335126165180757, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.33628996725007204, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.35099157274057147, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Artist.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.376965449392655, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.ArtistId,Artist.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.3776808641200879, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Track.AlbumId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.38842299929465707, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Employee.City,=,None), Artist.Name),Artist.Name))", "score": -0.4104912132679601, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.41646849378269646, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.ArtistId,Album.ArtistId),Artist.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.4171839174050233, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.43066972259018893, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Employee.Title,=,None), Artist.Name),Artist.Name))", "score": -0.4387265295445104, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 29, "beams": [{"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Employee.State))", "score": -0.17413552351717954, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Employee.State),Employee.State))", "score": -0.257115333010006, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.28890069820408826, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Employee.State),Invoice.BillingState))", "score": -0.3718805076969147, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Employee.State))", "score": -0.43219468086863344, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Employee.State),Employee.State))", "score": -0.46452292889262026, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.5083012366285402, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,25.86), Invoice.BillingState),Employee.State))", "score": -0.5133150645015121, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Employee.State),Invoice.BillingState))", "score": -0.540629484652527, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,25.86),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.State),Employee.State))", "score": -0.5784961130352377, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,25.86), Employee.State),Employee.State))", "score": -0.5962948739943386, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,25.86), Invoice.BillingState),Employee.State))", "score": -0.6147827931163192, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,25.86), Invoice.BillingState),Invoice.BillingState))", "score": -0.6280802391884208, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,25.86),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Employee.State))", "score": -0.629104213631451, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which states are invoices with a total of less than 25.86 Dollars issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Customer.State),Employee.State))", "score": -0.6319095926774025, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,25.86), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 30, "beams": [{"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.20609946840704652, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.20682283037604066, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.24269195192755433, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.31809284084738465, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3745795070499298, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.49196797208304216, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.49343988224215524, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,18.86),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5138757233492484, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5147220105212537, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5238827284694686, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingAddress,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5243205262807517, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,18.86),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5266285774165043, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5275168001026032, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5284976558394826, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send an invoice of exactly 18.86?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5286298867097914, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,18.86), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 31, "beams": [{"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Company),Customer.Company))", "score": -0.10836565324279945, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Company),Customer.Company))", "score": -0.17336237260315102, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,None), Customer.Company),Customer.Company))", "score": -0.41881561109039467, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Company),Customer.Company))", "score": -0.43527138062927406, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Customer.Company))", "score": -0.4934501584357349, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))", "score": -0.5357461314543193, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Company),Customer.Country))", "score": -0.5545903352758614, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Country),Customer.Company))", "score": -0.5584468777960865, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,None), Customer.Company),Customer.Company))", "score": -0.6106335801741807, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Company),Customer.Country))", "score": -0.619587054636213, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,None), Customer.Company),Customer.Company))", "score": -0.6349998397490708, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,None), Customer.Company),Customer.Company))", "score": -0.6674014610907761, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.City),Customer.Company))", "score": -0.6700127061194507, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,None), Customer.Company),Customer.Company))", "score": -0.6824375810538186, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Company),Customer.City))", "score": -0.6852492598554818, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 32, "beams": [{"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.13781266432297065, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.15293814209413098, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.17058733006273008, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1732039850327423, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Invoice.InvoiceId),Invoice.Total)", "score": -0.18756956782963155, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1972992890575567, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20621980387633498, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Invoice.InvoiceId),Invoice.Total)", "score": -0.20650253167728885, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Invoice.InvoiceId),Invoice.Total)", "score": -0.20719442616765504, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2163388171344798, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.22272887683997414, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.22345526514450115, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23339140668646785, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2421744732296386, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2428457210112138, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 33, "beams": [{"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Name,!=,Music), Employee.City),Employee.City))", "score": -0.11761254496741458, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Music), Employee.City),Employee.City))", "score": -0.2756875348823087, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Name,!=,Music), Employee.Title),Employee.City))", "score": -0.41789710573721095, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,!=,Music), Employee.City),Employee.City))", "score": -0.438603357932152, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Music), Employee.City),Employee.City))", "score": -0.4632567954795377, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Music), Employee.City),Employee.City))", "score": -0.4857133818404691, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Name,!=,Music), Employee.City),Employee.PostalCode))", "score": -0.4963267506645934, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Name,!=,Music), Employee.Email),Employee.City))", "score": -0.49738234333563014, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Name,!=,Music), Employee.PostalCode),Employee.City))", "score": -0.5149163608984964, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,!=,Music), Employee.City),Employee.City))", "score": -0.5273940754668729, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Name,!=,Music), Employee.BirthDate),Employee.City))", "score": -0.5486260061697976, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Music), Employee.Title),Employee.City))", "score": -0.575972095652105, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.LastName,!=,Music), Employee.City),Employee.City))", "score": -0.5966783478470461, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Playlist.Name,!=,Music), Employee.City),Employee.City))", "score": -0.6035896656649129, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "what are the mediatypes except from the playlistname Music?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Music), Employee.City),Employee.PostalCode))", "score": -0.6544017405794875, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 34, "beams": [{"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.07748362368301803, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.3590068519272078, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.360659117586225, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3947162362589434, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),MediaType.Name,=,None), Album.Title),Album.Title))", "score": -0.40098205495115063, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.4078553384234002, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Album),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.43394574819317855, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.437654387118162, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.4461171518109087, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),MediaType.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.447016150389383, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.4477694122091326, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.45427054024107016, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.GenreId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.4549414168656112, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.GenreId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.45659368252462834, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any Album titles", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.46013802373265816, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 35, "beams": [{"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Science Fiction), Album.Title),Album.Title))", "score": -0.13872846356812837, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.17527479570768353, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.19842338053567, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name),Album.Title))", "score": -0.25584675208538016, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction), Album.Title),Album.Title))", "score": -0.27751274536564424, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.32590687562832404, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Science Fiction),Track.Name),Album.Title))", "score": -0.32811279340593813, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Science Fiction),Track.Name),Album.Title))", "score": -0.32943045703836543, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.3325895252722219, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),getData(Track),Track.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.34568451063364153, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(max(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name),Album.Title))", "score": -0.36727220640814495, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name),Album.Title))", "score": -0.36900019006722623, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3826350692368266, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Science Fiction), Album.Title),Album.Title))", "score": -0.38344724962509485, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name),Album.Title))", "score": -0.38823579842649675, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 36, "beams": [{"orig_question": "Is there a track purchased by a customer on the address 202 Hoxton Street that does not belong to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,202 Hoxton Street),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2005768408763151, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,202 Hoxton Street), Genre.Name),Genre.Name))"}, {"orig_question": "Is there a track purchased by a customer on the address 202 Hoxton Street that does not belong to any genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,202 Hoxton Street), Genre.Name),Genre.Name))", "score": -0.27959967806743946, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,202 Hoxton Street), Genre.Name),Genre.Name))"}, {"orig_question": "Is there a track purchased by a customer on the address 202 Hoxton Street that does not belong to any genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),Track.GenreId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,202 Hoxton Street), Genre.Name),Genre.Name))", "score": -0.2847363742397971, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,202 Hoxton Street), Genre.Name),Genre.Name))"}, {"orig_question": "Is there a track purchased by a customer on the address 202 Hoxton Street that does not belong to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,202 Hoxton Street),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.29902919690403046, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,202 Hoxton Street), Genre.Name),Genre.Name))"}, {"orig_question": "Is there a track purchased by a customer on the address 202 Hoxton Street that does not belong to any genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,!=,202 Hoxton Street), Genre.Name),Genre.Name))", "score": -0.30496053311481447, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,202 Hoxton Street), Genre.Name),Genre.Name))"}, {"orig_question": "Is there a track purchased by a customer on the address 202 Hoxton Street that does not belong to any genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,202 Hoxton Street),getData(MediaType),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,!=,202 Hoxton Street), Genre.Name),Genre.Name))", "score": -0.324481191892891, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,202 Hoxton Street), Genre.Name),Genre.Name))"}, {"orig_question": "Is there a track purchased by a customer on the address 202 Hoxton Street that does not belong to any genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,202 Hoxton Street), Genre.Name),Genre.Name))", "score": -0.32459067736808217, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,202 Hoxton Street), Genre.Name),Genre.Name))"}, {"orig_question": "Is there a track purchased by a customer on the address 202 Hoxton Street that does not belong to any genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,202 Hoxton Street), Genre.Name),Genre.Name))", "score": -0.32758690238700044, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,202 Hoxton Street), Genre.Name),Genre.Name))"}, {"orig_question": "Is there a track purchased by a customer on the address 202 Hoxton Street that does not belong to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,202 Hoxton Street),merge(getData(Track),getData(MediaType),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.334737806994456, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,202 Hoxton Street), Genre.Name),Genre.Name))"}, {"orig_question": "Is there a track purchased by a customer on the address 202 Hoxton Street that does not belong to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,202 Hoxton Street),getData(Track),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3673573425420668, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,202 Hoxton Street), Genre.Name),Genre.Name))"}, {"orig_question": "Is there a track purchased by a customer on the address 202 Hoxton Street that does not belong to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,202 Hoxton Street),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.36870203921653427, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,202 Hoxton Street), Genre.Name),Genre.Name))"}, {"orig_question": "Is there a track purchased by a customer on the address 202 Hoxton Street that does not belong to any genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,202 Hoxton Street),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,!=,202 Hoxton Street), Genre.Name),Genre.Name))", "score": -0.3735361632454216, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,202 Hoxton Street), Genre.Name),Genre.Name))"}, {"orig_question": "Is there a track purchased by a customer on the address 202 Hoxton Street that does not belong to any genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,202 Hoxton Street),MediaType.Name,!=,202 Hoxton Street), Genre.Name),Genre.Name))", "score": -0.3737457272685515, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,202 Hoxton Street), Genre.Name),Genre.Name))"}, {"orig_question": "Is there a track purchased by a customer on the address 202 Hoxton Street that does not belong to any genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Track.GenreId,Track.TrackId),Invoice.BillingAddress,!=,202 Hoxton Street), Genre.Name),Genre.Name))", "score": -0.37847071252596143, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,202 Hoxton Street), Genre.Name),Genre.Name))"}, {"orig_question": "Is there a track purchased by a customer on the address 202 Hoxton Street that does not belong to any genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,202 Hoxton Street),Invoice.BillingAddress,!=,202 Hoxton Street), Genre.Name),Genre.Name))", "score": -0.3815257348742578, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,202 Hoxton Street), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 37, "beams": [{"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.05253503942367388, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.42779820044961525, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.4340110309931333, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.4385791886035302, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Artist.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.4390955103666202, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Track.Name),Album.Title))", "score": -0.5075901579621132, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Track.Composer),Album.Title))", "score": -0.5311741661789711, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Artist.Name),Album.Title))", "score": -0.5575264525177772, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Artist.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.586055286170127, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Track.Composer,=,None), Album.Title),Album.Title))", "score": -0.5894155088390107, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Artist.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.6028336859819947, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.6144726165148313, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Artist.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.GenreId), Album.Title),Album.Title))", "score": -0.6158266802771687, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), MediaType.Name),Album.Title))", "score": -0.6527721714737709, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the titles of the albums?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Employee.City),Album.Title))", "score": -0.6651888918640907, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 38, "beams": [{"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.13130183642524013, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.14212778739208531, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.1893771339075615, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1924957024044502, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20207346115907696, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.2038937358881121, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), None),None)", "score": -0.2120297369177449, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21399324487929874, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21589701039902343, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2221912236035356, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22944540531226745, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23081999590382016, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.2317959491560826, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23213786853776305, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23454516327245323, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 39, "beams": [{"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))", "score": -0.038240555964875966, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Email))", "score": -0.3588037437875755, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Country),Customer.Company))", "score": -0.5032340821926482, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Email),Customer.Company))", "score": -0.5546107229893096, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Country))", "score": -0.576179260679055, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Fax))", "score": -0.585150355764199, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.FirstName))", "score": -0.586066955991555, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Phone))", "score": -0.5932705349405296, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Phone),Customer.Company))", "score": -0.6482176718418486, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.City))", "score": -0.6483499950845726, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),MediaType.Name))", "score": -0.6539471096475609, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Fax),Customer.Company))", "score": -0.6618735131924041, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.State))", "score": -0.6767746157129295, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.State),Customer.Company))", "score": -0.679825299710501, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "What company does our customer with the email hholy@gmail.com come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Address),Customer.Company))", "score": -0.6892508802120574, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 40, "beams": [{"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))", "score": -0.19306984594363033, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Company))", "score": -0.4441039680093719, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.City))", "score": -0.46997224841273944, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.State))", "score": -0.4984691662197182, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Country))", "score": -0.5282622108003502, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Address))", "score": -0.5317483457319125, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.State),Customer.Country))", "score": -0.5643497069284157, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Country))", "score": -0.5648619821517702, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.Country))", "score": -0.5887877376443872, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Phone))", "score": -0.6311205024775147, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Fax))", "score": -0.7358183794947637, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Country))", "score": -0.7779260025645064, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Company))", "score": -0.7792963328660917, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.CustomerId))", "score": -0.7884847170688061, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.City))", "score": -0.8051646132694592, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 41, "beams": [{"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.20863654626412065, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.2834420759855446, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.2851931089908742, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Invoice.BillingPostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.2907550665566118, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.29681762233806014, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Invoice.BillingCountry,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.2991992292884564, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.30591646155728736, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.30603528784267175, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.3077863208480013, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.31484179122892814, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.32603252843655506, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.33033357800403945, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3516833542242222, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))", "score": -0.35453413201279066, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have invoices been sent, which were issued by an employee that lives in the T2P 5M5 postal code area?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3608934106862832, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 42, "beams": [{"orig_question": "In which city is Berger Stra\u00dfe 10?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,Berger Stra\u00dfe 10), Employee.City),Employee.City))", "score": -0.2752887372080295, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Berger Stra\u00dfe 10), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "In which city is Berger Stra\u00dfe 10?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Berger Stra\u00dfe 10), Employee.City),Employee.City))", "score": -0.4032949123684375, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Berger Stra\u00dfe 10), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "In which city is Berger Stra\u00dfe 10?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),InvoiceLine.UnitPrice,!=,Berger Stra\u00dfe 10), Employee.City),Employee.City))", "score": -0.40780483821072266, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Berger Stra\u00dfe 10), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "In which city is Berger Stra\u00dfe 10?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.BirthDate,!=,Berger Stra\u00dfe 10), Employee.City),Employee.City))", "score": -0.4321055252257793, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Berger Stra\u00dfe 10), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "In which city is Berger Stra\u00dfe 10?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Berger Stra\u00dfe 10), Employee.City),Employee.City))", "score": -0.4414752971533744, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Berger Stra\u00dfe 10), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "In which city is Berger Stra\u00dfe 10?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,!=,Berger Stra\u00dfe 10), Employee.City),Employee.City))", "score": -0.4677091155353992, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Berger Stra\u00dfe 10), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "In which city is Berger Stra\u00dfe 10?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.City,!=,Berger Stra\u00dfe 10), Employee.City),Employee.City))", "score": -0.4915800605122058, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Berger Stra\u00dfe 10), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "In which city is Berger Stra\u00dfe 10?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingCity,!=,Berger Stra\u00dfe 10), Employee.City),Employee.City))", "score": -0.5146975729767291, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Berger Stra\u00dfe 10), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "In which city is Berger Stra\u00dfe 10?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.BirthDate,!=,Berger Stra\u00dfe 10), Employee.City),Employee.City))", "score": -0.5349287677709071, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Berger Stra\u00dfe 10), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "In which city is Berger Stra\u00dfe 10?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.City,!=,Berger Stra\u00dfe 10), Employee.City),Employee.City))", "score": -0.5601117003861873, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Berger Stra\u00dfe 10), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "In which city is Berger Stra\u00dfe 10?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,Berger Stra\u00dfe 10), Employee.City),Employee.City))", "score": -0.5606523964706867, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Berger Stra\u00dfe 10), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "In which city is Berger Stra\u00dfe 10?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),InvoiceLine.UnitPrice,!=,Berger Stra\u00dfe 10), Employee.City),Employee.City))", "score": -0.5646216262284725, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Berger Stra\u00dfe 10), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "In which city is Berger Stra\u00dfe 10?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,Berger Stra\u00dfe 10), Invoice.BillingCity),Employee.City))", "score": -0.5652968406830041, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Berger Stra\u00dfe 10), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "In which city is Berger Stra\u00dfe 10?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Berger Stra\u00dfe 10), Employee.City),Employee.City))", "score": -0.5694814983908145, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Berger Stra\u00dfe 10), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "In which city is Berger Stra\u00dfe 10?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),InvoiceLine.UnitPrice,=,Berger Stra\u00dfe 10), Employee.City),Employee.City))", "score": -0.5739914242330997, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Berger Stra\u00dfe 10), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 43, "beams": [{"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.TrackId),Track.Bytes,=,Jamiroquai),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.18035082952294249, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Jamiroquai),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.24403041726907496, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.TrackId),Playlist.Name,=,Jamiroquai),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2865570626156667, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Jamiroquai),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.28946013848940816, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Milliseconds,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.2903609034468324, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,InvoiceLine.TrackId),Track.Bytes,=,Jamiroquai),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3020591563161546, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.31295194236847795, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Playlist.Name,=,Jamiroquai),getData(Track),Genre.GenreId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.31542879232832643, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.TrackId),Track.Name,=,Jamiroquai),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.32039895071125435, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Track.Bytes,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.3254673408390925, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,Jamiroquai),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3296458566444389, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Genre.GenreId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Milliseconds,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.33375842562338076, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Jamiroquai),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.33601233353648174, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Jamiroquai), Genre.Name),Genre.Name))", "score": -0.3426912349649896, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "In how many different genres are the tracks of Jamiroquai?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Jamiroquai),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3465489833219635, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Jamiroquai),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 44, "beams": [{"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)", "score": -0.13552927018351563, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)", "score": -0.14008498464491764, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.15427196606161309, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,On-The-Go 1),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.19311972284851386, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.20999859027351847, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)", "score": -0.2448536388662428, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.24888764804728586, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.24936259500381178, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.291098531055405, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)", "score": -0.2923526752896252, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.31751390219768183, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)", "score": -0.3204327200221846, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Track.TrackId),Track.Milliseconds)", "score": -0.32391253333395714, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3636628398567842, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,On-The-Go 1), Track.TrackId),Track.Milliseconds)", "score": -0.37317819142743175, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 45, "beams": [{"orig_question": "What are the different byte sizes of tracks not named Killing Time?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Killing Time), Track.Bytes),Track.Bytes))", "score": -0.1826271207355603, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,!=,Killing Time), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the different byte sizes of tracks not named Killing Time?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,!=,Killing Time), Track.Bytes),Track.Bytes))", "score": -0.3360814244770154, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,!=,Killing Time), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the different byte sizes of tracks not named Killing Time?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,!=,Killing Time),merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.38895413936204637, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,!=,Killing Time), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the different byte sizes of tracks not named Killing Time?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),Genre.GenreId,Album.AlbumId),Track.Composer,!=,Killing Time), Track.Bytes),Track.Bytes))", "score": -0.3982583452368133, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,!=,Killing Time), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the different byte sizes of tracks not named Killing Time?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),Genre.GenreId,Album.AlbumId),Album.Title,!=,Killing Time), Track.Bytes),Track.Bytes))", "score": -0.4042909312503346, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,!=,Killing Time), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the different byte sizes of tracks not named Killing Time?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),Genre.GenreId,Album.AlbumId),Track.Name,!=,Killing Time), Track.Bytes),Track.Bytes))", "score": -0.41142395560890244, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,!=,Killing Time), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the different byte sizes of tracks not named Killing Time?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Killing Time),merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.4293960127419538, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,!=,Killing Time), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the different byte sizes of tracks not named Killing Time?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),Genre.GenreId,InvoiceLine.TrackId),Track.Composer,!=,Killing Time), Track.Bytes),Track.Bytes))", "score": -0.4568423976883952, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,!=,Killing Time), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the different byte sizes of tracks not named Killing Time?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),Genre.GenreId,InvoiceLine.TrackId),Album.Title,!=,Killing Time), Track.Bytes),Track.Bytes))", "score": -0.4628749837019165, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,!=,Killing Time), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the different byte sizes of tracks not named Killing Time?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),Album.AlbumId,Album.AlbumId),Track.Composer,!=,Killing Time), Track.Bytes),Track.Bytes))", "score": -0.4668309097692669, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,!=,Killing Time), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the different byte sizes of tracks not named Killing Time?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),Genre.GenreId,InvoiceLine.TrackId),Track.Name,!=,Killing Time), Track.Bytes),Track.Bytes))", "score": -0.4700080080604843, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,!=,Killing Time), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the different byte sizes of tracks not named Killing Time?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Album.AlbumId),Track.Name,!=,Killing Time),getData(Track),Track.AlbumId,Album.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.4703748169409613, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,!=,Killing Time), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the different byte sizes of tracks not named Killing Time?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,!=,Killing Time),merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),Album.AlbumId,InvoiceLine.TrackId), Track.Bytes),Track.Bytes))", "score": -0.47521367205939025, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,!=,Killing Time), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the different byte sizes of tracks not named Killing Time?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,!=,Killing Time),merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),Track.TrackId,Track.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.4757745612282663, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,!=,Killing Time), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the different byte sizes of tracks not named Killing Time?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Album.Title,!=,Killing Time),merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.49516118261693914, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,!=,Killing Time), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 46, "beams": [{"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Edmonton), Employee.PostalCode),Employee.PostalCode))", "score": -0.20012721593957394, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,Edmonton), Employee.PostalCode),Employee.PostalCode))", "score": -0.31315553551381126, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,Edmonton), Employee.PostalCode),Employee.PostalCode))", "score": -0.3414807984910679, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.PostalCode),Employee.PostalCode))", "score": -0.351197803276591, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,Edmonton), Employee.PostalCode),Employee.PostalCode))", "score": -0.38026472355704755, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,Edmonton), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.3899254305139425, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,Edmonton), Employee.PostalCode),Customer.PostalCode))", "score": -0.40661904627341244, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Edmonton), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.4134856144664809, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,Edmonton),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.PostalCode),Employee.PostalCode))", "score": -0.4164203053984296, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,Edmonton), Customer.PostalCode),Employee.PostalCode))", "score": -0.41721050064351684, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,Edmonton), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.4182506934911991, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,Edmonton),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.42620667011223523, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,Edmonton), Employee.PostalCode),Customer.PostalCode))", "score": -0.43494430925066907, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,Edmonton),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.44521543852843387, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,Edmonton), Customer.PostalCode),Employee.PostalCode))", "score": -0.44553576362077346, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 47, "beams": [{"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Park), Employee.Phone),Employee.Phone))", "score": -0.03931073953572195, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Park), Employee.Phone),Employee.Phone))", "score": -0.35266212855640333, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Park), Employee.Country),Employee.Phone))", "score": -0.37258746863517445, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Park), Employee.Phone),Employee.Phone))", "score": -0.48250178729358595, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))", "score": -0.4951618734485237, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.FirstName,=,Park),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Phone),Employee.Phone))", "score": -0.5340723978261563, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,Park),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Phone),Employee.Phone))", "score": -0.6028230353940106, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Park), Employee.FirstName),Employee.Phone))", "score": -0.6173832678905455, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Park), Employee.Phone),Customer.Phone))", "score": -0.6280016162636457, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.FirstName,=,Park),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.EmployeeId), Employee.Phone),Employee.Phone))", "score": -0.6407008173341504, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,Park), Employee.Phone),Employee.Phone))", "score": -0.6517196420318214, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Park), Employee.Phone),Employee.Country))", "score": -0.6533815124275861, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Park), Employee.Phone),Employee.Phone))", "score": -0.6552812579757301, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Park), Employee.Country),Employee.Phone))", "score": -0.6859388576558558, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is the phone number of the employees called Park?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Park), Employee.Phone),Employee.Phone))", "score": -0.7061385038978187, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Park), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 48, "beams": [{"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)", "score": -0.1743461270211144, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.18395430843590516, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Black Sabbath),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.20411567873949593, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Album),getData(Track),InvoiceLine.TrackId,Track.TrackId),Album.AlbumId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)", "score": -0.22745814085181382, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)", "score": -0.22862983760251585, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Artist),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.25328955013938936, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.25603614048942563, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)", "score": -0.26563807239023407, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Black Sabbath),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Milliseconds)", "score": -0.27353950589863846, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)", "score": -0.27708967764329295, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)", "score": -0.27887397249667206, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Black Sabbath),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Milliseconds)", "score": -0.28231097819574663, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.TrackId),Album.AlbumId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)", "score": -0.28434489484828673, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)", "score": -0.30453460459834636, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average duration of tracks that were made by artists other than Black Sabbath?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Black Sabbath),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.344823861302695, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Black Sabbath), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 49, "beams": [{"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,15563967), Playlist.Name),Track.Bytes)", "score": -0.25189361204291905, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,15563967), Playlist.Name),Track.Bytes)", "score": -0.2613667599882508, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,15563967),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Track.Bytes)", "score": -0.27483298143526036, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Bytes,>=,15563967),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Track.Bytes)", "score": -0.27944047419315954, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967),Track.Bytes),Playlist.Name))", "score": -0.283023935484759, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,15563967),Track.Bytes),Playlist.Name))", "score": -0.28443224842198017, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Track.Bytes)", "score": -0.2871342023918851, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,15563967),Track.Bytes),Playlist.Name))", "score": -0.29406299111715123, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,15563967),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes),Playlist.Name))", "score": -0.30799355386138816, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Bytes,>=,15563967),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes),Playlist.Name))", "score": -0.3199448529092156, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Bytes,>=,15563967),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes),Playlist.Name))", "score": -0.3525348933287057, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,15563967),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Track.Bytes)", "score": -0.373214836149564, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,15563967),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3894158116932728, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,15563967),Track.Bytes),Playlist.Name))", "score": -0.4000045329779659, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists have tracks that have less or as much as 15563967 Track bytes?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,15563967), Playlist.Name),Track.Bytes)", "score": -0.4029529001589677, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,15563967), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 50, "beams": [{"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))", "score": -0.3390491171446906, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))", "score": -0.3526301507669335, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,We Will Rock You),Track.Milliseconds),Track.Milliseconds))", "score": -0.3677555475613057, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,We Will Rock You),Track.Milliseconds),Track.Milliseconds))", "score": -0.3806676664264111, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Genre.Name,=,We Will Rock You), Track.Name),Track.Name))", "score": -0.38664077169960365, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Track.GenreId,Track.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))", "score": -0.38867726596044405, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,We Will Rock You), Track.Milliseconds),Track.Name))", "score": -0.4013304551292365, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Name),Track.Name))", "score": -0.40301726706093177, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,We Will Rock You), Track.Milliseconds),Track.Name))", "score": -0.41491148875147943, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Album.AlbumId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))", "score": -0.42474938335100837, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Title,=,We Will Rock You), Track.Name),Track.Name))", "score": -0.4252803171402775, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,We Will Rock You),Track.Milliseconds),Track.Name))", "score": -0.428214006268591, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,We Will Rock You), Track.Name),Track.Name))", "score": -0.4366671884781681, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,We Will Rock You),Track.Milliseconds),Track.Name))", "score": -0.4411261251336964, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Track.GenreId,Track.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,We Will Rock You), Track.Milliseconds),Track.Name))", "score": -0.45095860394498993, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 51, "beams": [{"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.09189598326702253, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.1656514859678282, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.33713786368389265, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.39004467492122785, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.4553331010774728, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.4854701614858641, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.4995585370005045, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.5372056520463957, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,Finland),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))", "score": -0.538497986838705, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.5416141903879179, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,Finland),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))", "score": -0.5496200603094856, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Finland),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))", "score": -0.5515211919321688, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.5615051419210116, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.5744317329408659, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the invoice totals of all the different invoices, exculding those that were sent to Finland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Address,=,Finland), Invoice.Total),Invoice.Total))", "score": -0.6457334316255583, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Finland), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 52, "beams": [{"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Album.AlbumId),Track.Name,=,Pop),Track.Bytes),Album.Title))", "score": -0.24987677877830347, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Album.AlbumId),Track.Name,=,Pop),Track.Bytes),Album.Title))", "score": -0.2522784029106764, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,InvoiceLine.TrackId),Track.Name,=,Pop),Track.Bytes),Album.Title))", "score": -0.28224169750157685, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,InvoiceLine.TrackId),Track.Name,=,Pop),Track.Bytes),Album.Title))", "score": -0.2846433216339498, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Album.AlbumId),Track.Name,=,Pop),Track.Bytes),Album.Title))", "score": -0.2977797240816237, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Name,=,Pop),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3057230083444448, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Track.Name,=,Pop),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3290403017775454, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,InvoiceLine.TrackId),Track.Name,=,Pop),Track.Bytes),Album.Title))", "score": -0.3301446428048971, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.TrackId),Track.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3316323049529397, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,=,Pop),Track.Bytes),Album.Title))", "score": -0.33436401278148775, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Album.AlbumId),Track.Name,=,Pop),Track.Bytes),Album.Title))", "score": -0.34579264322320924, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Track),Album.AlbumId,Album.AlbumId),Track.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.35579687102122515, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Track.Name,=,Pop),Track.Bytes),Album.Title))", "score": -0.3655046870408691, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Name,=,Pop),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.39817091333340066, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "Which Pop album has the smallest track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Album.AlbumId),Track.Name,=,Pop),Track.UnitPrice),Album.Title))", "score": -0.4168454203872264, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Pop),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 53, "beams": [{"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.PostalCode),Customer.LastName))", "score": -0.15806830098208188, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))", "score": -0.18998948784955716, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.PostalCode),Customer.PostalCode))", "score": -0.234916095594365, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.PostalCode))", "score": -0.26683728246184024, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1), Customer.PostalCode),Customer.LastName))", "score": -0.3209265762453259, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.PostalCode),Customer.FirstName))", "score": -0.3453975129180954, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1), Customer.LastName),Customer.LastName))", "score": -0.35284776311280114, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.3604091233056955, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.LastName))", "score": -0.3644445969979207, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,=,1), Customer.PostalCode),Customer.LastName))", "score": -0.3718358271345468, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.FirstName))", "score": -0.37731869978557064, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))", "score": -0.3888558181430907, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1), Customer.PostalCode),Customer.PostalCode))", "score": -0.39777437085760897, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.PostalCode),Customer.Address))", "score": -0.3987706909042196, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the distinct customers last names having a invoice line quantity of 1?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.LastName))", "score": -0.4009586153638325, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 54, "beams": [{"orig_question": "What are the last names of the customers who work for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))", "score": -0.1696049280653824, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of the customers who work for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))", "score": -0.24323502510324865, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of the customers who work for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))", "score": -0.28574532571070554, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of the customers who work for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))", "score": -0.2900059185701486, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of the customers who work for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))", "score": -0.3102217096504849, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of the customers who work for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.Quantity,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))", "score": -0.31392505783240415, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of the customers who work for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))", "score": -0.33640692621372087, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of the customers who work for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))", "score": -0.3378648105441219, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of the customers who work for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))", "score": -0.35699260311738484, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of the customers who work for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))", "score": -0.35913902299006245, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of the customers who work for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.Quantity,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))", "score": -0.36069594243036807, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of the customers who work for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))", "score": -0.3745786456007353, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of the customers who work for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))", "score": -0.37873746531113284, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of the customers who work for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))", "score": -0.3796388067494263, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of the customers who work for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))", "score": -0.38091174264787164, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 55, "beams": [{"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))", "score": -0.09970880195504536, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>=,8606887),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.13965821760788855, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.16484280536661386, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,8606887),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.1807668051672088, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<,8606887),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.23751482369813393, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))", "score": -0.28119548227315383, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,>=,8606887),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.33314618444124305, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,8606887),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.34631834270665657, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,!=,8606887), Artist.Name),Artist.Name))", "score": -0.35852152016801747, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,8606887),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.36189563947173853, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Track),Track.Bytes,>=,8606887),getData(Album),Track.AlbumId,Album.AlbumId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.38575234991614804, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Track.Bytes,>=,8606887),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.401912614012882, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,8606887),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.4030405748086408, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887),getData(Artist),Track.AlbumId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.41836088427121193, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,<,8606887), Artist.Name),Artist.Name))", "score": -0.4202903616368573, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 56, "beams": [{"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.20496273898606887, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.23027588954292477, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.24758468406613537, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<=,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.274423667295815, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.2829412233472406, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.2876285360365785, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.29680487573646075, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<=,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.29861624861973934, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.3058236923170625, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.3100144462219089, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.32224618945591293, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<=,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.3317763137894688, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.33561368295221433, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<=,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.3409526602306429, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3737895066113244, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 57, "beams": [{"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.15901449124017994, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,K2P 1L7),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.1653779066078955, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,K2P 1L7),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.18404280358024155, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,K2P 1L7),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2151733257199275, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.22226130883048212, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,K2P 1L7),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.22936505032339155, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,K2P 1L7),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2604955724630775, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2712842429625632, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.30520614018607645, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7),Track.Composer,!=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.32102693587983533, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,=,K2P 1L7),InvoiceLine.Quantity,!=,K2P 1L7),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.321680334332775, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,K2P 1L7),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3341389646278139, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,K2P 1L7),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.3543925498449968, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7),Track.Composer,!=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.37550994242722935, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingPostalCode,=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.39554682230706634, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 58, "beams": [{"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)", "score": -0.20956376062991533, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21166143278437463, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)", "score": -0.2175807158434537, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)", "score": -0.2227374199419323, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,<,On-The-Go 1),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2242430171602165, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2252355217829084, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,<,On-The-Go 1),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23774943188720943, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)", "score": -0.24021178060996004, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,<,On-The-Go 1),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24429873180121223, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24556577828891155, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,<,On-The-Go 1),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24775313203852736, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2503427162504741, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25224725832827466, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2638491182142004, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by the tracks that appear in another playlist than On-The-Go 1?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27244191636456944, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,On-The-Go 1), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 59, "beams": [{"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Drama), Album.Title),Album.Title))", "score": -0.15774564207193584, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))", "score": -0.17098619250626834, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Drama),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name),Album.Title))", "score": -0.20375360673126447, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Drama),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.22005477573802384, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.25772197721022194, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Drama),Album.Title),Album.Title))", "score": -0.28019503614439084, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Drama),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title),Album.Title))", "score": -0.2833240512661259, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name),Album.Title))", "score": -0.28483652843854546, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Drama),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.Name),Album.Title))", "score": -0.3023436066166811, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Drama),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Composer),Album.Title))", "score": -0.3198211182344213, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Genre.Name),Album.Title))", "score": -0.32400583910220476, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Drama), Album.Title),Album.Title))", "score": -0.3390125173776511, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Drama),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name),Album.Title))", "score": -0.34171339012846197, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Album.Title),Album.Title))", "score": -0.3560745009576761, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "What are the album titles in the genre Drama?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Drama),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.374767599033396, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Drama),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 60, "beams": [{"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Christopher O'Riley), Track.TrackId),Track.UnitPrice)", "score": -0.09439242291687715, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.1511581107503783, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Christopher O'Riley),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.1786015818783026, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Christopher O'Riley), Track.TrackId),Track.UnitPrice)", "score": -0.2002020493642696, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Christopher O'Riley), Album.AlbumId),Track.UnitPrice)", "score": -0.24435875681483052, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.3068617139175801, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.3254694609213162, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Christopher O'Riley), Track.TrackId),Track.UnitPrice)", "score": -0.3448743188548378, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Christopher O'Riley), Track.TrackId),Track.Bytes)", "score": -0.34821819475715765, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Christopher O'Riley), Album.ArtistId),Track.UnitPrice)", "score": -0.3522072013911513, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Christopher O'Riley), Album.AlbumId),Track.UnitPrice)", "score": -0.35638263677159504, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Christopher O'Riley), Track.TrackId),Track.UnitPrice)", "score": -0.36783208929937866, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Album.AlbumId),Track.UnitPrice)", "score": -0.36926942598848056, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Christopher O'Riley), Employee.City),Track.UnitPrice)", "score": -0.3906224980461187, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average of the unit prices of tracks from artists that are not Christopher O'Riley?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Christopher O'Riley),getData(Track),Album.AlbumId,Track.AlbumId), Album.AlbumId),Track.UnitPrice)", "score": -0.39213093205619615, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Christopher O'Riley),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 61, "beams": [{"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.Name))", "score": -0.11704127962366329, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Track.Name))", "score": -0.1576495068766235, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.Bytes))", "score": -0.43705979927108274, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Name),Track.Bytes))", "score": -0.47766802652404294, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))", "score": -0.5224027680851577, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.Name))", "score": -0.5257895363083662, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Name))", "score": -0.5289618317656277, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Bytes),Track.Name))", "score": -0.5695700590185879, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,0.99), Track.Name),Track.Name))", "score": -0.5705926465489028, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Milliseconds),Track.Name))", "score": -0.5756103341154812, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Name))", "score": -0.6034602739967367, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),getData(Track),Track.TrackId,Track.TrackId), Track.Milliseconds),Track.Name))", "score": -0.610100292394529, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,0.99), Track.Milliseconds),Track.Name))", "score": -0.6162185613684414, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Name),Track.Milliseconds))", "score": -0.6246861611180066, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many different track have the unit price higher than 0.99?", "inferred_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.TrackId),Track.UnitPrice)", "score": -0.6399347125607542, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,0.99), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 62, "beams": [{"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,None), Invoice.Total),Track.Bytes))", "score": -0.25012599390788637, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,None), Invoice.Total),Track.Bytes))", "score": -0.3156154127125319, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,None), Track.Bytes),Track.Bytes))", "score": -0.44348930281444154, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,None), Invoice.Total),Track.Bytes))", "score": -0.45261673343225084, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,None), Invoice.Total),Invoice.InvoiceDate))", "score": -0.4646622956995543, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,None), Invoice.Total),Track.Name))", "score": -0.47109432232423387, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,None), Invoice.Total),Track.UnitPrice))", "score": -0.4806467117075499, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,None), Invoice.InvoiceDate),Track.Bytes))", "score": -0.49040250939174257, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,None), Invoice.Total),Invoice.Total))", "score": -0.49146701109452806, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,None), Track.Bytes),Track.Bytes))", "score": -0.5089787216190871, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,None), Invoice.Total),Invoice.InvoiceDate))", "score": -0.5301517145041998, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,None), Invoice.Total),Employee.BirthDate))", "score": -0.5312595189814147, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,None), Invoice.Total),Track.Name))", "score": -0.5365837411288794, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,None), Invoice.Total),Track.UnitPrice))", "score": -0.5461361305121955, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,None), Invoice.BillingAddress),Track.Bytes))", "score": -0.5542399780158576, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 63, "beams": [{"orig_question": "Of the artists that produced a track called \"Do what cha wanna\", which artist sold it for the highest price?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Do what cha wanna),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.16235138743621455, "correct_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Of the artists that produced a track called \"Do what cha wanna\", which artist sold it for the highest price?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))", "score": -0.20193273201282883, "correct_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Of the artists that produced a track called \"Do what cha wanna\", which artist sold it for the highest price?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Artist.Name,=,Do what cha wanna),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.21684712848031032, "correct_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Of the artists that produced a track called \"Do what cha wanna\", which artist sold it for the highest price?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Genre.Name,=,Do what cha wanna),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.2639924132246758, "correct_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Of the artists that produced a track called \"Do what cha wanna\", which artist sold it for the highest price?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Do what cha wanna),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.2737886964406778, "correct_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Of the artists that produced a track called \"Do what cha wanna\", which artist sold it for the highest price?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Artist.Name,=,Do what cha wanna),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.27458251197141137, "correct_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Of the artists that produced a track called \"Do what cha wanna\", which artist sold it for the highest price?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,=,Do what cha wanna),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.29736992058252193, "correct_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Of the artists that produced a track called \"Do what cha wanna\", which artist sold it for the highest price?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Album),Track.AlbumId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))", "score": -0.31784984352691337, "correct_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Of the artists that produced a track called \"Do what cha wanna\", which artist sold it for the highest price?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,=,Do what cha wanna),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.31995161556247514, "correct_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Of the artists that produced a track called \"Do what cha wanna\", which artist sold it for the highest price?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Do what cha wanna),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.32172779671577684, "correct_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Of the artists that produced a track called \"Do what cha wanna\", which artist sold it for the highest price?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(Album),Track.AlbumId,Album.ArtistId),Artist.Name,=,Do what cha wanna),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.32273479558765805, "correct_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Of the artists that produced a track called \"Do what cha wanna\", which artist sold it for the highest price?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Album.AlbumId),Artist.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))", "score": -0.3406638390406319, "correct_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Of the artists that produced a track called \"Do what cha wanna\", which artist sold it for the highest price?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Do what cha wanna),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.34223679461841133, "correct_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Of the artists that produced a track called \"Do what cha wanna\", which artist sold it for the highest price?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Genre.Name,=,Do what cha wanna),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.3445151780538274, "correct_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Of the artists that produced a track called \"Do what cha wanna\", which artist sold it for the highest price?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Artist.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))", "score": -0.3462465508068487, "correct_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Do what cha wanna),Track.UnitPrice),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 64, "beams": [{"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.040235211796243675, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Country),Customer.Company))", "score": -0.37623814652033616, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Fax),Customer.Company))", "score": -0.4689826161629753, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.City),Customer.Company))", "score": -0.4863064677483635, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Country))", "score": -0.5483910727343755, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.5726724287524121, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.5771539040870266, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.592726511604269, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Fax))", "score": -0.6079950618586736, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.City))", "score": -0.6216962623439031, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Email))", "score": -0.637174277289887, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))", "score": -0.653213424331625, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.PostalCode),Customer.Company))", "score": -0.6581993193394737, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Phone))", "score": -0.672393946631928, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}, {"orig_question": "What distinct companies use another fax number than +1 (780) 434-5565?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Address),Customer.Company))", "score": -0.6911907286412315, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+1 (780) 434-5565), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 65, "beams": [{"orig_question": "When were the invoices issued in Chile?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.34305527747528686, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When were the invoices issued in Chile?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3700669103945984, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When were the invoices issued in Chile?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Chile), Invoice.InvoiceDate),Invoice.Total))", "score": -0.3954654553617729, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When were the invoices issued in Chile?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.Total))", "score": -0.42247708828108443, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When were the invoices issued in Chile?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Chile), Invoice.Total),Invoice.InvoiceDate))", "score": -0.43563250393526687, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When were the invoices issued in Chile?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.Total),Invoice.InvoiceDate))", "score": -0.4626441368545784, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When were the invoices issued in Chile?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5080319599521215, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When were the invoices issued in Chile?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceId,Customer.CustomerId),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5155390300371, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When were the invoices issued in Chile?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Customer.CustomerId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5181121981174792, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When were the invoices issued in Chile?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5208551292288901, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When were the invoices issued in Chile?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Customer.CustomerId),Invoice.InvoiceId,Customer.CustomerId),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5256192682024577, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When were the invoices issued in Chile?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5283622812714907, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When were the invoices issued in Chile?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Customer.CustomerId),Invoice.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5309354670724369, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When were the invoices issued in Chile?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5311379201192822, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "When were the invoices issued in Chile?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile), Invoice.Total),Invoice.InvoiceDate))", "score": -0.5369687464031386, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Chile), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 66, "beams": [{"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))", "score": -0.06212116871756734, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,Belgium), Customer.Phone),Customer.Phone))", "score": -0.25444388855976285, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Belgium), Customer.Phone),Customer.Phone))", "score": -0.45641412307304563, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Belgium), Customer.Phone),Customer.Phone))", "score": -0.47067954112571897, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Belgium), Customer.Phone),Customer.Phone))", "score": -0.4785005049852771, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Country),Customer.Phone))", "score": -0.5338056390246493, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,Belgium), Customer.Phone),Customer.Phone))", "score": -0.5520498054174823, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,Belgium), Customer.Phone),Customer.Phone))", "score": -0.5702487723974627, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.FirstName),Customer.Phone))", "score": -0.5824517314395052, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.FirstName))", "score": -0.5969067900514347, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Country))", "score": -0.6034076302385074, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))", "score": -0.6228154314885614, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))", "score": -0.640303476837289, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Address),Customer.Phone))", "score": -0.6865071361025912, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,Belgium), Customer.Country),Customer.Phone))", "score": -0.7261283742336673, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 67, "beams": [{"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.08831012278824346, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2591730396452476, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,20040-020), Invoice.BillingCity),Customer.City))", "score": -0.31544946350186365, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3549021969738533, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,!=,20040-020),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.44953074927648634, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,!=,20040-020),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.City))", "score": -0.4648542196624859, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,20040-020),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.4793736104645008, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,20040-020), Invoice.BillingCity),Customer.City))", "score": -0.4863123803588678, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.49438427791028516, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,20040-020),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.City))", "score": -0.49469708085050035, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,!=,20040-020),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingCity),Customer.City))", "score": -0.49608834913973165, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,!=,20040-020),getData(InvoiceLine),Invoice.InvoiceId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.5186287729193433, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,20040-020),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingCity),Customer.City))", "score": -0.5259312036825335, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,!=,20040-020),getData(InvoiceLine),Invoice.InvoiceId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.City))", "score": -0.5339522366601303, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which cities without the postalcode 20040-020 have invoices?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,20040-020),getData(InvoiceLine),Invoice.InvoiceId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.5484715623944385, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,20040-020), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 68, "beams": [{"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))", "score": -0.028463526381528936, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Fax))", "score": -0.517067727385438, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.State),Customer.Country))", "score": -0.5190224570542341, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.State))", "score": -0.5200604765996104, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))", "score": -0.5225397653266555, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,+1 (514) 721-4711), Customer.Country),Customer.Country))", "score": -0.5561460561439162, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,+1 (514) 721-4711), Customer.Country),Customer.Country))", "score": -0.5713408298179274, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Fax),Customer.Country))", "score": -0.5750605088978773, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Phone))", "score": -0.6234394281491404, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Phone),Customer.Country))", "score": -0.6620629650860792, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Address),Customer.Country))", "score": -0.693256757906056, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,+1 (514) 721-4711), Customer.Country),Customer.Country))", "score": -0.70178023049084, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Employee.Country))", "score": -0.7137727110966807, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))", "score": -0.7234800142323365, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}, {"orig_question": "From which country is the customer with phone number +1 (514) 721-4711?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Company),Customer.Country))", "score": -0.7419696075230604, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (514) 721-4711), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 69, "beams": [{"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)", "score": -0.17564881185357345, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Bytes,>=,8557447),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2243043752374008, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)", "score": -0.22747895382841996, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Track.Bytes,>=,8557447),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.23668090056664132, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,8557447), Track.TrackId),Track.Milliseconds)", "score": -0.2628108533966479, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,>=,8557447), Track.TrackId),Track.Milliseconds)", "score": -0.2695194470299143, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Employee.State,>=,8557447),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.27130300727669365, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Track.Bytes,>=,8557447),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2829119121265425, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,>=,8557447), Track.TrackId),Track.Milliseconds)", "score": -0.2829424678365683, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,>=,8557447),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.29386289046037584, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,8557447),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2946179169210326, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,>=,8557447),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3084518931039083, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.State,>=,8557447), Track.TrackId),Track.Milliseconds)", "score": -0.32101307026577797, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Employee.BirthDate,>=,8557447),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.3278765420505602, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the average length of tracks that have at least 8557447 bytes?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,>=,8557447),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.33519304921269166, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>=,8557447), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 70, "beams": [{"orig_question": "What is the size of all tracks sold buy our employees from Canada?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,=,Canada), Track.TrackId),Track.Bytes)", "score": -0.18074514332245745, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold buy our employees from Canada?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Track),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.20450380872543172, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold buy our employees from Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.21346759203196405, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold buy our employees from Canada?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Country,=,Canada),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.22640653416074386, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold buy our employees from Canada?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.23044340141921868, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold buy our employees from Canada?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,=,Canada), Track.TrackId),Track.Bytes)", "score": -0.23264966371251905, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold buy our employees from Canada?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.24194949487893866, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold buy our employees from Canada?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,=,Canada), Track.TrackId),Track.Bytes)", "score": -0.24279782731015553, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold buy our employees from Canada?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,=,Canada), Track.TrackId),Track.Bytes)", "score": -0.24667126205525555, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold buy our employees from Canada?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Country,=,Canada),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.24820381415864015, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold buy our employees from Canada?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,=,Canada), Track.TrackId),Track.Bytes)", "score": -0.25729767575687795, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold buy our employees from Canada?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada), Track.TrackId),Track.Bytes)", "score": -0.2594798889726606, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold buy our employees from Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.27219847556353477, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold buy our employees from Canada?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.2725725312278326, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks sold buy our employees from Canada?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Track),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Bytes)", "score": -0.2853943481454681, "correct_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 71, "beams": [{"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,SCRIABIN: Vers la flamme), Album.Title),Album.Title))", "score": -0.32905314566748195, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,InvoiceLine.TrackId),Track.Composer,=,SCRIABIN: Vers la flamme), Album.Title),Album.Title))", "score": -0.33723395170651277, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.GenreId),Track.Composer,=,SCRIABIN: Vers la flamme), Album.Title),Album.Title))", "score": -0.3946311160273605, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,SCRIABIN: Vers la flamme), Album.Title),Album.Title))", "score": -0.4023445354688344, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,InvoiceLine.TrackId),Track.Composer,=,SCRIABIN: Vers la flamme), Album.Title),Album.Title))", "score": -0.40281192206639127, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.GenreId),Track.Composer,=,SCRIABIN: Vers la flamme), Album.Title),Album.Title))", "score": -0.40943944953318384, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),Genre.GenreId,InvoiceLine.TrackId),Track.Composer,=,SCRIABIN: Vers la flamme), Album.Title),Album.Title))", "score": -0.41052534150786524, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,InvoiceLine.TrackId),Track.Composer,=,SCRIABIN: Vers la flamme), Album.Title),Album.Title))", "score": -0.41762025557221466, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.AlbumId),Track.Composer,=,SCRIABIN: Vers la flamme), Album.Title),Album.Title))", "score": -0.4240847626836863, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.GenreId),Track.Composer,=,SCRIABIN: Vers la flamme), Album.Title),Album.Title))", "score": -0.4272998671607915, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,SCRIABIN: Vers la flamme),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.4602797760724357, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(InvoiceLine),Track.AlbumId,InvoiceLine.TrackId),Album.Title,=,SCRIABIN: Vers la flamme),InvoiceLine.TrackId,Track.TrackId),Track.Composer,=,SCRIABIN: Vers la flamme), Album.Title),Album.Title))", "score": -0.4991783934868149, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(InvoiceLine),Track.AlbumId,InvoiceLine.TrackId),Album.Title,=,SCRIABIN: Vers la flamme),InvoiceLine.TrackId,Album.AlbumId),Track.Composer,=,SCRIABIN: Vers la flamme), Album.Title),Album.Title))", "score": -0.5189639629879526, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(InvoiceLine),Track.AlbumId,InvoiceLine.TrackId),Album.Title,=,SCRIABIN: Vers la flamme),Album.AlbumId,Track.TrackId),Track.Composer,=,SCRIABIN: Vers la flamme), Album.Title),Album.Title))", "score": -0.5239311615239223, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,SCRIABIN: Vers la flamme),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Track.Composer),Album.Title))", "score": -0.5734473921126033, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 72, "beams": [{"orig_question": "What are the different phone numbers of the customer named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))", "score": -0.15979714180593874, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the different phone numbers of the customer named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))", "score": -0.1917987563765564, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the different phone numbers of the customer named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))", "score": -0.1940352567589798, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the different phone numbers of the customer named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.FirstName),Customer.Phone))", "score": -0.5091187446496406, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the different phone numbers of the customer named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.FirstName))", "score": -0.5315124481103339, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the different phone numbers of the customer named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))", "score": -0.535239588015429, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the different phone numbers of the customer named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Stanis\u0142aw), Customer.FirstName),Customer.Phone))", "score": -0.5411203592202583, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the different phone numbers of the customer named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,Stanis\u0142aw), Customer.FirstName),Customer.Phone))", "score": -0.5433568596026817, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the different phone numbers of the customer named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Stanis\u0142aw), Customer.Phone),Customer.FirstName))", "score": -0.5635140626809516, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the different phone numbers of the customer named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,Stanis\u0142aw), Customer.Phone),Customer.FirstName))", "score": -0.565750563063375, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the different phone numbers of the customer named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.LastName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))", "score": -0.5672412025860467, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the different phone numbers of the customer named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Email,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))", "score": -0.5694777029684701, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the different phone numbers of the customer named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Country),Customer.Phone))", "score": -0.614130684652082, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the different phone numbers of the customer named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Stanis\u0142aw), Customer.Country),Customer.Phone))", "score": -0.6461322992226997, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the different phone numbers of the customer named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),MediaType.Name,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))", "score": -0.6467867842993655, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 73, "beams": [{"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -0.04821787998583454, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.Company))", "score": -0.5104205340740603, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -0.5565615947811737, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.City))", "score": -0.6520732624089636, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.PostalCode))", "score": -0.7977654881604349, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Album.Title))", "score": -0.8311555856397757, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Invoice.BillingCity))", "score": -0.8806688135577248, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.City))", "score": -0.8845709001174735, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "sum(distinct(getData(Customer), Customer.City),Customer.Company)", "score": -0.9205734398918731, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Invoice.BillingCity),Customer.City))", "score": -0.9281320567663812, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "sum(distinct(getData(Customer), Customer.City),Invoice.CustomerId)", "score": -1.017283099560436, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "sum(distinct(getData(Customer), Customer.City),Customer.Address)", "score": -1.0366944488963696, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.Company))", "score": -1.043557959658267, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -1.058168837581326, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))", "score": -1.1142759164971894, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 74, "beams": [{"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra), Track.TrackId),Track.Milliseconds)", "score": -0.16602362544953492, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra), Track.TrackId),Track.Milliseconds)", "score": -0.16907150131862891, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.23138709156236129, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra), Track.TrackId),Track.Milliseconds)", "score": -0.23427109073317637, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.24848517498613681, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra), Track.TrackId),Track.Milliseconds)", "score": -0.2534619358293254, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra), Track.TrackId),Track.Milliseconds)", "score": -0.2590654749083486, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Artist),Artist.Name,=,Antal Dor\u00e1ti & London Symphony Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra), Track.TrackId),Track.Milliseconds)", "score": -0.3081106104341308, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra), Track.Milliseconds),Track.Milliseconds))", "score": -0.3155676375672042, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.35971366559365253, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)", "score": -0.36074082044246036, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra), Track.Milliseconds),Track.Milliseconds))", "score": -0.363864770630939, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.37799906962637236, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra), Track.Milliseconds),Track.Milliseconds))", "score": -0.379354886261916, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in milliseconds that are not on the The Police Greatest Hits album and are not performed by Antal Dor\u00e1ti & London Symphony Orchestra?", "inferred_code": "sum(distinct(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Milliseconds)", "score": -0.3838177852316703, "correct_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Antal Dor\u00e1ti & London Symphony Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,The Police Greatest Hits), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 75, "beams": [{"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.1888008346858964, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.1923846217108657, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NSW),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.20017949686488046, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NSW), MediaType.Name),MediaType.Name))", "score": -0.20377027787305715, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NSW), MediaType.Name),MediaType.Name))", "score": -0.20481874275625261, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NSW),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2106730816932679, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.21493458562371806, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NSW),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.24799730975749812, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NSW),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2563498103749826, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2661118360570156, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2760150213931278, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NSW),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.281565166149016, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.288467754401459, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NSW),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.30199527949185945, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Find the media type name of the tracks sold with the invoice billing state NSW.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingState,=,NSW), MediaType.Name),MediaType.Name))", "score": -0.32551739295197313, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NSW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 76, "beams": [{"orig_question": "In how many distinct states were sold tracks composed by \"Bo Diddley\" and sold for a quantity smaller or equal than 2 ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>=,2),getData(Playlist),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.33610382710666653, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bo Diddley),InvoiceLine.Quantity,<=,2),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In how many distinct states were sold tracks composed by \"Bo Diddley\" and sold for a quantity smaller or equal than 2 ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>=,Bo Diddley),getData(Playlist),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.State),Invoice.BillingState))", "score": -0.3619732277263697, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bo Diddley),InvoiceLine.Quantity,<=,2),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In how many distinct states were sold tracks composed by \"Bo Diddley\" and sold for a quantity smaller or equal than 2 ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>=,2),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3665162627564156, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bo Diddley),InvoiceLine.Quantity,<=,2),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In how many distinct states were sold tracks composed by \"Bo Diddley\" and sold for a quantity smaller or equal than 2 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,>=,2),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3859578680985354, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bo Diddley),InvoiceLine.Quantity,<=,2),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In how many distinct states were sold tracks composed by \"Bo Diddley\" and sold for a quantity smaller or equal than 2 ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>=,2),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.State),Invoice.BillingState))", "score": -0.3923856633761187, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bo Diddley),InvoiceLine.Quantity,<=,2),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In how many distinct states were sold tracks composed by \"Bo Diddley\" and sold for a quantity smaller or equal than 2 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,>=,Bo Diddley),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.39418024215740355, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bo Diddley),InvoiceLine.Quantity,<=,2),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In how many distinct states were sold tracks composed by \"Bo Diddley\" and sold for a quantity smaller or equal than 2 ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>=,2),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.40556199912133223, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bo Diddley),InvoiceLine.Quantity,<=,2),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In how many distinct states were sold tracks composed by \"Bo Diddley\" and sold for a quantity smaller or equal than 2 ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>=,2),getData(Playlist),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.41183607216046764, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bo Diddley),InvoiceLine.Quantity,<=,2),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In how many distinct states were sold tracks composed by \"Bo Diddley\" and sold for a quantity smaller or equal than 2 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,>=,Bo Diddley),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.4279469684770801, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bo Diddley),InvoiceLine.Quantity,<=,2),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In how many distinct states were sold tracks composed by \"Bo Diddley\" and sold for a quantity smaller or equal than 2 ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>=,2),getData(Playlist),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.4298813175160542, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bo Diddley),InvoiceLine.Quantity,<=,2),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In how many distinct states were sold tracks composed by \"Bo Diddley\" and sold for a quantity smaller or equal than 2 ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>=,2),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.State),Invoice.BillingState))", "score": -0.43143143296709835, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bo Diddley),InvoiceLine.Quantity,<=,2),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In how many distinct states were sold tracks composed by \"Bo Diddley\" and sold for a quantity smaller or equal than 2 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,>=,Bo Diddley),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.4361693058488371, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bo Diddley),InvoiceLine.Quantity,<=,2),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In how many distinct states were sold tracks composed by \"Bo Diddley\" and sold for a quantity smaller or equal than 2 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,>=,2),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.4373396141741528, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bo Diddley),InvoiceLine.Quantity,<=,2),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In how many distinct states were sold tracks composed by \"Bo Diddley\" and sold for a quantity smaller or equal than 2 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,>=,2),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.State),Invoice.BillingState))", "score": -0.44619381407722924, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bo Diddley),InvoiceLine.Quantity,<=,2),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In how many distinct states were sold tracks composed by \"Bo Diddley\" and sold for a quantity smaller or equal than 2 ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>=,2),getData(Playlist),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.4588286118442487, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Bo Diddley),InvoiceLine.Quantity,<=,2),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 77, "beams": [{"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.08775100803177338, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Sales Manager), Employee.Country),Employee.Address))", "score": -0.37813947854738217, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.39862134253780823, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Artist.Name,=,Sales Manager),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Address),Employee.Address))", "score": -0.42692314108993656, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Title,=,Sales Manager), Invoice.Total),Employee.Address))", "score": -0.45823394147152213, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Title,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.46162136960157796, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Sales Manager), Employee.FirstName),Employee.Address))", "score": -0.468063545806217, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Sales Manager), Employee.State),Employee.Address))", "score": -0.4940895265172003, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),Employee.Title,=,Sales Manager), Invoice.Total),Employee.Address))", "score": -0.5066246232284285, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),Employee.Title,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.5100120513584844, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Sales Manager), Employee.Address),Employee.State))", "score": -0.510689176080632, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Artist.Name,=,Sales Manager), Invoice.Total),Employee.Address))", "score": -0.5138656854533263, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Artist.Name,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.5172531135833822, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Sales Manager), Employee.Address),Employee.Country))", "score": -0.545834280012059, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),Artist.Name,=,Sales Manager), Invoice.Total),Employee.Address))", "score": -0.5622562077251305, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 78, "beams": [{"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.TrackId),Customer.CustomerId,Track.AlbumId),Artist.Name,!=,Sales Manager), Track.TrackId),Track.Milliseconds)", "score": -0.30053692117700015, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Sales Manager), Track.TrackId),Track.Milliseconds)", "score": -0.32159335095634994, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId),Artist.Name,!=,Sales Manager), Track.TrackId),Track.Milliseconds)", "score": -0.3264002752831402, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.TrackId),Customer.CustomerId,Album.ArtistId),Artist.Name,!=,Sales Manager), Track.TrackId),Track.Milliseconds)", "score": -0.3387776571537953, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.TrackId),Customer.CustomerId,Track.AlbumId),Track.Composer,!=,Sales Manager), Track.TrackId),Track.Milliseconds)", "score": -0.33963788555574304, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Sales Manager), Track.TrackId),Track.Milliseconds)", "score": -0.33988073291370774, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.TrackId),Customer.CustomerId,Track.AlbumId),Employee.Title,!=,Sales Manager), Track.TrackId),Track.Milliseconds)", "score": -0.3447602530847082, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.TrackId),Customer.CustomerId,Invoice.CustomerId),Artist.Name,!=,Sales Manager), Track.TrackId),Track.Milliseconds)", "score": -0.345108615968417, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.TrackId),Album.AlbumId,InvoiceLine.InvoiceId),Artist.Name,!=,Sales Manager), Track.TrackId),Track.Milliseconds)", "score": -0.34745670506249, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.35399888342891744, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Artist.Name,!=,Sales Manager),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.35685451122800793, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.TrackId),Album.AlbumId,Album.ArtistId),Artist.Name,!=,Sales Manager), Track.TrackId),Track.Milliseconds)", "score": -0.3598340869331451, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.Composer,!=,Sales Manager), Track.TrackId),Track.Milliseconds)", "score": -0.36069431533509283, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Composer,!=,Sales Manager), Track.TrackId),Track.Milliseconds)", "score": -0.3737764281151649, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks purchased by an employee holding a title other than sales manager?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.3977124573408847, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,Sales Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 79, "beams": [{"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))", "score": -0.10886701260260936, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.LastName),Customer.LastName))", "score": -0.43596609327505575, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.LastName))", "score": -0.48474692983483525, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.LastName),Customer.LastName))", "score": -0.49034493200590407, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Employee.LastName))", "score": -0.4916719115397247, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Genre.GenreId))", "score": -0.5247747275368977, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.FirstName))", "score": -0.5566848398702643, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Genre.GenreId),Customer.LastName))", "score": -0.6166385766991443, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Artist.ArtistId))", "score": -0.6841621095324911, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))", "score": -0.7332092786988244, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.LastName),Employee.LastName))", "score": -0.7891589609862422, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.FirstName),Customer.LastName))", "score": -0.8074801994443987, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.LastName),Customer.FirstName))", "score": -0.8088010160208796, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Genre.Name),Customer.LastName))", "score": -0.8251660522555926, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of our customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Fax))", "score": -0.8348939033594615, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 80, "beams": [{"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.22806989651673693, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Name,=,James Levine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23118766409629676, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.25407102954998484, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.28048276982799825, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2966842072821164, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)", "score": -0.3174849367697668, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Playlist.Name,=,James Levine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3232852487019255, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)", "score": -0.3434860698030147, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.34441086616743793, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,James Levine), Track.TrackId),Invoice.Total)", "score": -0.35225885709716587, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)", "score": -0.3698978100810281, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,James Levine), Track.TrackId),Invoice.Total)", "score": -0.3782599901304137, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Name,=,James Levine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),Invoice.Total)", "score": -0.37853835943246616, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId),Playlist.Name,=,James Levine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3806830862243243, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Genre.GenreId,Track.GenreId),Playlist.Name,=,James Levine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3850304332904004, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 81, "beams": [{"orig_question": "What is the media type of tracks that are the most expensive in our database but do not belong to the genre Alternative?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))", "score": -0.17650212748725694, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))"}, {"orig_question": "What is the media type of tracks that are the most expensive in our database but do not belong to the genre Alternative?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))", "score": -0.24138458579207753, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))"}, {"orig_question": "What is the media type of tracks that are the most expensive in our database but do not belong to the genre Alternative?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Alternative),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))", "score": -0.26299874139532925, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))"}, {"orig_question": "What is the media type of tracks that are the most expensive in our database but do not belong to the genre Alternative?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Alternative),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))", "score": -0.27483599149073007, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))"}, {"orig_question": "What is the media type of tracks that are the most expensive in our database but do not belong to the genre Alternative?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Alternative),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))", "score": -0.34212235929267726, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))"}, {"orig_question": "What is the media type of tracks that are the most expensive in our database but do not belong to the genre Alternative?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,!=,Alternative),Track.UnitPrice),MediaType.Name))", "score": -0.34689043987669, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))"}, {"orig_question": "What is the media type of tracks that are the most expensive in our database but do not belong to the genre Alternative?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),MediaType.Name))", "score": -0.352149216317577, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))"}, {"orig_question": "What is the media type of tracks that are the most expensive in our database but do not belong to the genre Alternative?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Alternative),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))", "score": -0.3558894987387877, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))"}, {"orig_question": "What is the media type of tracks that are the most expensive in our database but do not belong to the genre Alternative?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Alternative),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.37147622589767965, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))"}, {"orig_question": "What is the media type of tracks that are the most expensive in our database but do not belong to the genre Alternative?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Alternative),Track.UnitPrice),MediaType.Name))", "score": -0.3722610419789112, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))"}, {"orig_question": "What is the media type of tracks that are the most expensive in our database but do not belong to the genre Alternative?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,!=,Alternative),Track.Bytes),MediaType.Name))", "score": -0.3739503834940532, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))"}, {"orig_question": "What is the media type of tracks that are the most expensive in our database but do not belong to the genre Alternative?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))", "score": -0.3755473587594951, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))"}, {"orig_question": "What is the media type of tracks that are the most expensive in our database but do not belong to the genre Alternative?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Invoice),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,!=,Alternative),Track.UnitPrice),MediaType.Name))", "score": -0.38292845633458156, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))"}, {"orig_question": "What is the media type of tracks that are the most expensive in our database but do not belong to the genre Alternative?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Alternative),Track.Bytes),MediaType.Name))", "score": -0.3993209855962744, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))"}, {"orig_question": "What is the media type of tracks that are the most expensive in our database but do not belong to the genre Alternative?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Invoice),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,!=,Alternative),Track.UnitPrice),MediaType.Name))", "score": -0.4075254028511377, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 82, "beams": [{"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3311236819288107, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),Customer.Company))", "score": -0.3343101182705902, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),MediaType.Name))", "score": -0.3426786396032147, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Customer.Company))", "score": -0.3458650759449942, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),MediaType.Name))", "score": -0.35097960951669005, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Customer.Company))", "score": -0.3541660458584695, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),Invoice.BillingCity))", "score": -0.35660621627273437, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),MediaType.Name))", "score": -0.3606059303292928, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Customer.Company))", "score": -0.36379236667107223, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3681611739471384, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.3764621438606137, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,InvoiceLine.TrackId),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), MediaType.Name),Customer.Company))", "score": -0.38100171553536205, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),Invoice.BillingCountry))", "score": -0.3842863639935406, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,InvoiceLine.TrackId),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), MediaType.Name),Invoice.BillingCity))", "score": -0.3848028300684969, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCity))", "score": -0.38608846467321645, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 83, "beams": [{"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.022779734016353942, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.49081428811099187, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.8026984569369233, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Playlist.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.8041024805178719, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.8500334930358804, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,!=,None), Album.Title),Album.Title))", "score": -1.0592722338624299, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Genre.Name)", "score": -1.0678132380260843, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Playlist.Name,=,None),getData(Album),Album.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -1.1070923866070805, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Track.Name)", "score": -1.1171138815555341, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -1.125830475706607, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -1.1461050131471195, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Artist.ArtistId)", "score": -1.2501163819648984, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -1.3358042617849415, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.AlbumId))", "score": -1.3558393251408971, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Employee.Title)", "score": -1.3786371502266477, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 84, "beams": [{"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),getData(Invoice),Album.ArtistId,Artist.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3578910777449949, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Customer),Invoice.CustomerId,Artist.ArtistId),Artist.Name,=,Accept), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3713525064100413, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Track.TrackId,Invoice.CustomerId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3742370300800709, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Accept),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Invoice),Album.ArtistId,Artist.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.37527233629322515, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Customer),Invoice.CustomerId,Artist.ArtistId),Artist.Name,=,Accept), Invoice.BillingCountry),Customer.Country))", "score": -0.3756043859494884, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Album),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Invoice.CustomerId),Artist.Name,=,Accept), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.37835051345494325, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Customer),Invoice.CustomerId,Artist.ArtistId),Artist.Name,=,Accept), Customer.Country),Invoice.BillingCountry))", "score": -0.3811148669218538, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Album),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Customer.CustomerId,Invoice.CustomerId),Artist.Name,=,Accept), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.38447683611722105, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Customer),Invoice.CustomerId,Artist.ArtistId),Artist.Name,=,Accept), Customer.Country),Customer.Country))", "score": -0.3853667464613009, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Album),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Artist.ArtistId,Invoice.CustomerId),Artist.Name,=,Accept), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.39723871306596253, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),getData(Invoice),Album.ArtistId,Artist.ArtistId), Invoice.BillingCountry),Customer.Country))", "score": -0.3979889683329815, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Album),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Invoice.CustomerId),Artist.Name,=,Accept), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.40013753395723733, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Accept),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Customer),Invoice.CustomerId,Artist.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4112563018826529, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Track.TrackId,Invoice.CustomerId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept), Invoice.BillingCountry),Customer.Country))", "score": -0.42820710711202015, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Track.TrackId,Invoice.CustomerId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept), Customer.Country),Invoice.BillingCountry))", "score": -0.45062631192524777, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 85, "beams": [{"orig_question": "What distinct genres were used in tracks appearing in an album of the artist Toquinho & Vin\u00c3\u00adcius?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius), Genre.Name),Genre.Name))", "score": -0.10126430586678688, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "What distinct genres were used in tracks appearing in an album of the artist Toquinho & Vin\u00c3\u00adcius?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.13298090416265612, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "What distinct genres were used in tracks appearing in an album of the artist Toquinho & Vin\u00c3\u00adcius?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.1350577747369466, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "What distinct genres were used in tracks appearing in an album of the artist Toquinho & Vin\u00c3\u00adcius?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius), Genre.Name),Genre.Name))", "score": -0.2268337923608889, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "What distinct genres were used in tracks appearing in an album of the artist Toquinho & Vin\u00c3\u00adcius?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius), Genre.Name),Genre.Name))", "score": -0.24455268402498057, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "What distinct genres were used in tracks appearing in an album of the artist Toquinho & Vin\u00c3\u00adcius?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2690917342471024, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "What distinct genres were used in tracks appearing in an album of the artist Toquinho & Vin\u00c3\u00adcius?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Genre.Name),Genre.Name))", "score": -0.2850011027560367, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "What distinct genres were used in tracks appearing in an album of the artist Toquinho & Vin\u00c3\u00adcius?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius), Genre.Name),Genre.Name))", "score": -0.2963884087531656, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "What distinct genres were used in tracks appearing in an album of the artist Toquinho & Vin\u00c3\u00adcius?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.29687463376473505, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "What distinct genres were used in tracks appearing in an album of the artist Toquinho & Vin\u00c3\u00adcius?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius), Genre.Name),Genre.Name))", "score": -0.3030752087304768, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "What distinct genres were used in tracks appearing in an album of the artist Toquinho & Vin\u00c3\u00adcius?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),Genre.Name),Genre.Name))", "score": -0.352044685657925, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "What distinct genres were used in tracks appearing in an album of the artist Toquinho & Vin\u00c3\u00adcius?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Genre.Name),Genre.Name))", "score": -0.3526464922733045, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "What distinct genres were used in tracks appearing in an album of the artist Toquinho & Vin\u00c3\u00adcius?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Artist.ArtistId),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius), Genre.Name),Genre.Name))", "score": -0.388104188014673, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "What distinct genres were used in tracks appearing in an album of the artist Toquinho & Vin\u00c3\u00adcius?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.39877896625484344, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "What distinct genres were used in tracks appearing in an album of the artist Toquinho & Vin\u00c3\u00adcius?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),getData(Genre),Album.AlbumId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.4163649135409809, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Toquinho & Vin\u00c3\u00adcius),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 86, "beams": [{"orig_question": "Are there any artists that have tracks on an album with a unit price other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.1938828103522269, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,!=,0.99), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists that have tracks on an album with a unit price other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.29511712196403894, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,!=,0.99), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists that have tracks on an album with a unit price other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.29775049567050693, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,!=,0.99), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists that have tracks on an album with a unit price other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,!=,0.99),getData(Album),Track.AlbumId,Artist.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.30018711489682076, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,!=,0.99), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists that have tracks on an album with a unit price other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Album.Title,!=,0.99),Album.Title,!=,0.99), Artist.Name),Artist.Name))", "score": -0.30406339324074816, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,!=,0.99), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists that have tracks on an album with a unit price other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99),Album.Title,!=,0.99), Artist.Name),Artist.Name))", "score": -0.31976461468661105, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,!=,0.99), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists that have tracks on an album with a unit price other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99),getData(Artist),Track.GenreId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3503585438787224, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,!=,0.99), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists that have tracks on an album with a unit price other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,!=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3519296861868379, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,!=,0.99), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists that have tracks on an album with a unit price other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,0.99),merge(getData(Track),getData(Artist),Album.ArtistId,Genre.GenreId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.365211383384931, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,!=,0.99), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists that have tracks on an album with a unit price other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,0.99),merge(getData(Track),getData(Artist),Track.GenreId,Genre.GenreId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.3720136755127665, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,!=,0.99), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists that have tracks on an album with a unit price other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,0.99),merge(getData(Track),getData(Artist),Album.ArtistId,Genre.GenreId),Album.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.3831560800287793, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,!=,0.99), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists that have tracks on an album with a unit price other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Genre.Name),Artist.Name))", "score": -0.38419397062125177, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,!=,0.99), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists that have tracks on an album with a unit price other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,0.99),merge(getData(Track),getData(Artist),Track.GenreId,Genre.GenreId),Album.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.389958381570666, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,!=,0.99), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists that have tracks on an album with a unit price other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,0.99),merge(getData(Album),getData(Artist),Album.ArtistId,Genre.GenreId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.4007876786210452, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,!=,0.99), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists that have tracks on an album with a unit price other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,0.99),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.4035331133163003, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,!=,0.99), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 87, "beams": [{"orig_question": "From which cities are the customers from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,None), Customer.City),Customer.City))", "score": -0.10283977723156568, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "From which cities are the customers from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.City),Customer.City))", "score": -0.17039025014673825, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "From which cities are the customers from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -0.3807334961626073, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "From which cities are the customers from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,None), Customer.City),Customer.City))", "score": -0.5326315797719872, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "From which cities are the customers from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,None), Customer.City),Customer.City))", "score": -0.5348251499090111, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "From which cities are the customers from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,<=,None), Customer.City),Customer.City))", "score": -0.5375118125084555, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "From which cities are the customers from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,None), Customer.City),Customer.City))", "score": -0.5581126846227562, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "From which cities are the customers from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,None), Customer.City),Customer.City))", "score": -0.5909783281240379, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "From which cities are the customers from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.Phone,=,None),getData(Customer),Customer.CustomerId,Invoice.CustomerId), Customer.City),Customer.City))", "score": -0.5942037012782873, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "From which cities are the customers from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,None), Customer.City),Customer.City))", "score": -0.6001820526871597, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "From which cities are the customers from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.City),Customer.City))", "score": -0.6023756228241837, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "From which cities are the customers from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.City),Customer.City))", "score": -0.6256631575379288, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "From which cities are the customers from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,None), Customer.City),Customer.City))", "score": -0.6585288010392105, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "From which cities are the customers from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,None), Customer.City),Customer.City))", "score": -0.6895552466012305, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "From which cities are the customers from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,None), Customer.Company),Customer.City))", "score": -0.7005337790906196, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 88, "beams": [{"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.26660743824504607, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3408455001499533, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,71020-677),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.34235813896432316, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3491711961414694, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,71020-677),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.36177173200005563, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,71020-677),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.36217622166042374, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,71020-677),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingPostalCode,=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3630004152769582, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,71020-677),filter(getData(Invoice),Invoice.BillingCountry,=,71020-677),Invoice.CustomerId,Customer.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.37826619609846784, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,71020-677),getData(Invoice),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.3925884282136565, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,71020-677),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingPostalCode,=,71020-677), Customer.Country),Customer.Country))", "score": -0.4041632606214053, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,71020-677),merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,71020-677),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.40952958927798105, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,71020-677),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingAddress,=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4273468028256366, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,71020-677),merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,71020-677),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.4301557464685035, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingPostalCode,=,71020-677), Customer.Country),Customer.Country))", "score": -0.4328853203135274, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,71020-677),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingPostalCode,=,71020-677), Invoice.BillingCountry),Customer.Country))", "score": -0.46013937168599234, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 89, "beams": [{"orig_question": "Are there postal codes to which invoices that include tracks with the media type Protected AAC audio file were sent?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.10248833538415512, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there postal codes to which invoices that include tracks with the media type Protected AAC audio file were sent?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.14831556218582015, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there postal codes to which invoices that include tracks with the media type Protected AAC audio file were sent?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.1507252085742824, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there postal codes to which invoices that include tracks with the media type Protected AAC audio file were sent?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.1585715439777007, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there postal codes to which invoices that include tracks with the media type Protected AAC audio file were sent?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.1729034218716676, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there postal codes to which invoices that include tracks with the media type Protected AAC audio file were sent?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.17827000118537517, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there postal codes to which invoices that include tracks with the media type Protected AAC audio file were sent?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.20366837288516096, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there postal codes to which invoices that include tracks with the media type Protected AAC audio file were sent?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2194904478243203, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there postal codes to which invoices that include tracks with the media type Protected AAC audio file were sent?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.27032279626921474, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there postal codes to which invoices that include tracks with the media type Protected AAC audio file were sent?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.29591189151860403, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there postal codes to which invoices that include tracks with the media type Protected AAC audio file were sent?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.2964193482210876, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there postal codes to which invoices that include tracks with the media type Protected AAC audio file were sent?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.32243666148719063, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there postal codes to which invoices that include tracks with the media type Protected AAC audio file were sent?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.33160424644247893, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there postal codes to which invoices that include tracks with the media type Protected AAC audio file were sent?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.33853087586512276, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there postal codes to which invoices that include tracks with the media type Protected AAC audio file were sent?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.340570545239269, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 90, "beams": [{"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.Country),Employee.State))", "score": -0.2870749283229088, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.State),Employee.State))", "score": -0.33764826987135166, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.Country),Employee.Country))", "score": -0.3444349739347672, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.State),Employee.Country))", "score": -0.39500831548321, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.Country),Employee.HireDate))", "score": -0.4316347363983368, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.Country),Employee.BirthDate))", "score": -0.43278802667009586, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.State),Employee.HireDate))", "score": -0.48220807794677967, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.State),Employee.BirthDate))", "score": -0.4833613682185387, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.BirthDate),Employee.State))", "score": -0.48451925549852604, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.HireDate),Employee.State))", "score": -0.49774358902323, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Employee), Employee.Country),Employee.State))", "score": -0.5067771729221405, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.Country),Employee.State))", "score": -0.5181534880379168, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.BirthDate),Employee.Country))", "score": -0.5418793011103844, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.Country),Employee.Address))", "score": -0.5529106381927704, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.HireDate),Employee.Country))", "score": -0.5551036346350884, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 91, "beams": [{"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.10225104450160696, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.11623920436247956, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.16983792363578487, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Track.TrackId),Track.Milliseconds)", "score": -0.1715181814153565, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Track.TrackId),Track.Milliseconds)", "score": -0.19213617766092192, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Track.TrackId),Track.Milliseconds)", "score": -0.32875471627285247, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.3419965693297209, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.351065314688598, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.35459673790645846, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3555612270362903, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Track.TrackId),Track.Milliseconds)", "score": -0.35780261992463686, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.35780409399612345, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Track.TrackId),Track.Milliseconds)", "score": -0.3821023048774064, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.38337834139518034, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.4257921101019486, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 92, "beams": [{"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.19660963916205168, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.28930789314243555, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2993651392394523, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3289054436865803, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3338417749129078, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),getData(InvoiceLine),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.40338829142025534, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4080501627875077, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.41737575811160016, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4274330042086169, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.42969952613815604, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4314261203671975, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4341020543152137, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.43806049115005447, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.44058254488750576, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.44363351677780816, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 93, "beams": [{"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.16216125458595343, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NS),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2885992283701849, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Employee),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3301669854713854, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3449011141032584, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.35260091307398844, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NS),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.35408757181674505, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NS),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.35603209323129725, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NS),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3567559046374498, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3715436475519026, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NS),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.InvoiceId,Customer.CustomerId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.37833825554645373, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NS),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.38885099289891273, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NS),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4162803852213365, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NS),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4199928707661098, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NS),getData(Invoice),Invoice.InvoiceId,Customer.CustomerId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.42923581989755155, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NS),getData(InvoiceLine),Invoice.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4341740463185901, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 94, "beams": [{"orig_question": "Are there media types that have been sold on 2009-08-07 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,<=,2009-08-07 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.1584055685271191, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,=,2009-08-07 00:00:00), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types that have been sold on 2009-08-07 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-08-07 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.18067421368300027, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,=,2009-08-07 00:00:00), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types that have been sold on 2009-08-07 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-08-07 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.19762015491335846, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,=,2009-08-07 00:00:00), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types that have been sold on 2009-08-07 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-08-07 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.20063738729242417, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,=,2009-08-07 00:00:00), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types that have been sold on 2009-08-07 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-08-07 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.21196288994347157, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,=,2009-08-07 00:00:00), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types that have been sold on 2009-08-07 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<=,2009-08-07 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.2209033726212889, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,=,2009-08-07 00:00:00), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types that have been sold on 2009-08-07 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-08-07 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2313237035372009, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,=,2009-08-07 00:00:00), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types that have been sold on 2009-08-07 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-08-07 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2349257765245036, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,=,2009-08-07 00:00:00), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types that have been sold on 2009-08-07 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,<,2009-08-07 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.24001391860561908, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,=,2009-08-07 00:00:00), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types that have been sold on 2009-08-07 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>=,2009-08-07 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.24366186480052382, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,=,2009-08-07 00:00:00), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types that have been sold on 2009-08-07 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2009-08-07 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.248115634118915, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,=,2009-08-07 00:00:00), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types that have been sold on 2009-08-07 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-08-07 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.24829502765948824, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,=,2009-08-07 00:00:00), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types that have been sold on 2009-08-07 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,2009-08-07 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.25221168913601033, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,=,2009-08-07 00:00:00), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types that have been sold on 2009-08-07 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,2009-08-07 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2619622199192767, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,=,2009-08-07 00:00:00), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types that have been sold on 2009-08-07 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2009-08-07 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.26330507887511473, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,=,2009-08-07 00:00:00), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 95, "beams": [{"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Customer.CustomerId),Track.Milliseconds,!=,None), Artist.Name),Artist.Name))", "score": -0.3842623853610723, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Playlist.Name,!=,None),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.4165662909997254, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Track.GenreId,Artist.ArtistId),Invoice.CustomerId,Customer.CustomerId),Track.Milliseconds,!=,None), Artist.Name),Artist.Name))", "score": -0.41825375973765333, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Playlist.Name,!=,None),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.4612514685757397, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,!=,None), Artist.Name),Artist.Name))", "score": -0.4622890495475612, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Artist.ArtistId,Album.ArtistId),Playlist.Name,!=,None),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Artist.Name),Artist.Name))", "score": -0.4650210852513784, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Customer.CustomerId),Track.Milliseconds,!=,None), Artist.Name),Artist.Name))", "score": -0.46547882247426353, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.467562529470225, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Playlist.Name,!=,None),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.47334734725567335, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Artist.ArtistId,Album.ArtistId),Playlist.Name,!=,None),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Artist.Name))", "score": -0.4876272242560685, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Customer.CustomerId),Track.Milliseconds,!=,None), Artist.Name),Genre.Name))", "score": -0.4885450863564671, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Playlist.Name,!=,None),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.48971348648439783, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Playlist.Name,!=,None),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Artist.Name),Genre.Name))", "score": -0.49059239150775036, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Playlist.Name,!=,None),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.493174474802278, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Is there any artist that doesn't have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Customer.CustomerId),Track.Composer,!=,None), Artist.Name),Artist.Name))", "score": -0.49359318412439884, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 96, "beams": [{"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.1712692772237189, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.18609860552270577, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),Track.Bytes),Album.Title))", "score": -0.20353594722185492, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),Track.Bytes),Album.Title))", "score": -0.20690882376239303, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,MPEG audio file),Track.Bytes),Album.Title))", "score": -0.21264089717887896, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.2354325146804246, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,MPEG audio file),Track.Bytes),Album.Title))", "score": -0.24132831719378975, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.2456515473836836, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.32457545283385775, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.40699552825113733, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),Track.Bytes),Album.Title))", "score": -0.4338559795867161, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Album.Title,=,MPEG audio file),Track.Bytes),Album.Title))", "score": -0.4629154190800672, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Track.Bytes),Album.Title))", "score": -0.46787860078419163, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))", "score": -0.5091258007789015, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album title with the minimum of track bytes and the media type name MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,MPEG audio file), Album.Title),Album.Title))", "score": -0.5156353564419741, "correct_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 97, "beams": [{"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Track),Track.Milliseconds,=,213831),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,=,213831), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3262527241124498, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,=,213831), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3717231411505697, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Track),Track.Milliseconds,=,213831),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,213831), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3796644237829447, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,=,213831),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4130334181255279, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Track),Track.Milliseconds,=,213831),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,213831), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4149570912930509, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Track),Track.Milliseconds,=,213831),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,=,213831), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4160104006344137, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,213831),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4215420582548605, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.UnitPrice),Track.UnitPrice))", "score": -0.4256453538537244, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,213831), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.43314862662080084, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,213831),InvoiceLine.Quantity,=,213831),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.44128818519904583, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,213831),InvoiceLine.Quantity,=,213831),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.44243636531148, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,=,213831),getData(Track),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4439302605902061, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,213831), Track.UnitPrice),Track.UnitPrice))", "score": -0.4440052831769208, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,213831), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.45898238221462606, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total price of all the tracks shorter or as long as 213831 milliseconds?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,213831),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.46144460902855045, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,<=,213831), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 98, "beams": [{"orig_question": "In what country were the invoices issued that have Mountain View as a city?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.3631075174019436, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Mountain View), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country were the invoices issued that have Mountain View as a city?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,!=,Mountain View), Customer.Country),Customer.Country))", "score": -0.3923857095475836, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Mountain View), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country were the invoices issued that have Mountain View as a city?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,!=,Mountain View), Customer.Country),Customer.Phone))", "score": -0.39294128033131476, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Mountain View), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country were the invoices issued that have Mountain View as a city?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,=,Mountain View), Customer.Country),Customer.Country))", "score": -0.4000150515442655, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Mountain View), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country were the invoices issued that have Mountain View as a city?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,=,Mountain View), Customer.Country),Customer.Phone))", "score": -0.4005706223279966, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Mountain View), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country were the invoices issued that have Mountain View as a city?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Phone))", "score": -0.4023740254497524, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Mountain View), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country were the invoices issued that have Mountain View as a city?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Customer.City,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.4073347640761858, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Mountain View), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country were the invoices issued that have Mountain View as a city?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.City,!=,Mountain View), Customer.Country),Customer.Country))", "score": -0.40803893310299355, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Mountain View), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country were the invoices issued that have Mountain View as a city?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.City,!=,Mountain View), Customer.Country),Customer.Phone))", "score": -0.4085945038867247, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Mountain View), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country were the invoices issued that have Mountain View as a city?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.City,=,Mountain View), Customer.Country),Customer.Country))", "score": -0.4156682750996754, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Mountain View), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country were the invoices issued that have Mountain View as a city?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.City,=,Mountain View), Customer.Country),Customer.Phone))", "score": -0.41622384588340655, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Mountain View), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country were the invoices issued that have Mountain View as a city?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,!=,Mountain View),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Country))", "score": -0.4190190248338951, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Mountain View), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country were the invoices issued that have Mountain View as a city?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,!=,Mountain View), Customer.Country),Customer.Country))", "score": -0.4363434142854023, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Mountain View), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country were the invoices issued that have Mountain View as a city?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,!=,Mountain View), Customer.Country),Customer.Phone))", "score": -0.43689898506913344, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Mountain View), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In what country were the invoices issued that have Mountain View as a city?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Employee.City,!=,Mountain View), Customer.Country),Customer.Country))", "score": -0.4411153547385536, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Mountain View), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 99, "beams": [{"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.05769390349450987, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.362965994674596, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.4239656912806096, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.45151068225552987, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.46719117776341973, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingCity,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.47188819565966067, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.47521775284831863, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.4846819277590839, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.4947361596011727, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Invoice.BillingCity,=,Rio de Janeiro),getData(Invoice),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.49933550362859175, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.4994331866345809, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Invoice.BillingCity,=,Rio de Janeiro),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.5031741295107934, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.State),Customer.Address))", "score": -0.5369855264871148, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.5650171275920002, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.5739233132189838, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 100, "beams": [{"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,R.E.M.), Playlist.Name),Playlist.Name))", "score": -0.11078644058269956, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,R.E.M.),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.15375442338487855, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Playlist.Name,=,R.E.M.),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.19362959303489147, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,R.E.M.), Playlist.Name),Playlist.Name))", "score": -0.21814954759594812, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,R.E.M.),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.242467203489134, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,R.E.M.),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.25891511201871265, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,=,R.E.M.), Playlist.Name),Playlist.Name))", "score": -0.26740027491729385, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Playlist.Name,=,R.E.M.),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2694768206964628, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Name,=,R.E.M.), Playlist.Name),Playlist.Name))", "score": -0.28057404748914694, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Playlist.Name,=,R.E.M.), Playlist.Name),Playlist.Name))", "score": -0.28158959357969393, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,R.E.M.),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.29769802850480315, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,=,R.E.M.), Playlist.Name),Playlist.Name))", "score": -0.3177475483678071, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,R.E.M.), Playlist.Name),Playlist.Name))", "score": -0.3448600980394946, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))", "score": -0.34643177056018903, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many playlists is the track R.E.M. included?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,R.E.M.),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.34898009592266815, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,R.E.M.), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 101, "beams": [{"orig_question": "What is the phone number of the customer whose last name is Hol\u00c3\u00bd?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))", "score": -0.041951951185183134, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the phone number of the customer whose last name is Hol\u00c3\u00bd?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Country),Customer.Phone))", "score": -0.35491686462046346, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the phone number of the customer whose last name is Hol\u00c3\u00bd?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))", "score": -0.412622634867148, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the phone number of the customer whose last name is Hol\u00c3\u00bd?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))", "score": -0.46430021951528033, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the phone number of the customer whose last name is Hol\u00c3\u00bd?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Country))", "score": -0.49618355984421214, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the phone number of the customer whose last name is Hol\u00c3\u00bd?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Employee.Phone))", "score": -0.5269937967750593, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the phone number of the customer whose last name is Hol\u00c3\u00bd?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))", "score": -0.5681684655937715, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the phone number of the customer whose last name is Hol\u00c3\u00bd?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Employee.Phone),Customer.Phone))", "score": -0.5883882582056685, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the phone number of the customer whose last name is Hol\u00c3\u00bd?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.FirstName))", "score": -0.6018461441490217, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the phone number of the customer whose last name is Hol\u00c3\u00bd?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.FirstName),Customer.Phone))", "score": -0.6482071220743819, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the phone number of the customer whose last name is Hol\u00c3\u00bd?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Address),Customer.Phone))", "score": -0.6606593668329879, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the phone number of the customer whose last name is Hol\u00c3\u00bd?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Employee.Country),Customer.Phone))", "score": -0.6758267223704024, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the phone number of the customer whose last name is Hol\u00c3\u00bd?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))", "score": -0.6932958613833762, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the phone number of the customer whose last name is Hol\u00c3\u00bd?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Fax))", "score": -0.697231278369145, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))"}, {"orig_question": "What is the phone number of the customer whose last name is Hol\u00c3\u00bd?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,Hol\u00c3\u00bd), Customer.Country),Customer.Phone))", "score": -0.7255875483024283, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Hol\u00c3\u00bd), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 102, "beams": [{"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))", "score": -0.16455534888162854, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.FirstName))", "score": -0.37613819997080544, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Fax))", "score": -0.38396861372547997, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.FirstName))", "score": -0.45970182278959887, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Genre.GenreId))", "score": -0.4894022597489954, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.LastName))", "score": -0.5169313886881822, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))", "score": -0.5955514648146568, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Genre.GenreId),Customer.FirstName))", "score": -0.6312297881144521, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Fax))", "score": -0.6791150876334503, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Genre.GenreId))", "score": -0.7009851108381724, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.LastName),Customer.FirstName))", "score": -0.7049852627209541, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.LastName))", "score": -0.7285142397773592, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Employee.FirstName))", "score": -0.7355013612010316, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Employee.LastName))", "score": -0.7406356394297388, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are our customers last names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.FirstName),Customer.FirstName))", "score": -0.7822332717520518, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 103, "beams": [{"orig_question": "What are the postal codes of customers except for customers in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.PostalCode))", "score": -0.038661067010252737, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers except for customers in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.Fax))", "score": -0.40874826499202754, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers except for customers in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.Fax),Customer.PostalCode))", "score": -0.5286627301102271, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers except for customers in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,India), Customer.PostalCode),Customer.PostalCode))", "score": -0.5298041655769339, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers except for customers in India?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,India),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.5452906141478224, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers except for customers in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,>,India), Customer.PostalCode),Customer.PostalCode))", "score": -0.5658934382809093, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers except for customers in India?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,India),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Invoice.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.5760138995522268, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers except for customers in India?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,India),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Customer.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.5873031532987166, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers except for customers in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,India), Customer.PostalCode),Customer.PostalCode))", "score": -0.5923195747745922, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers except for customers in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Employee.PostalCode))", "score": -0.596074338638573, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers except for customers in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.LastName),Customer.PostalCode))", "score": -0.6023865231400123, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers except for customers in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.LastName))", "score": -0.6147922832606127, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers except for customers in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,India), Customer.PostalCode),Customer.PostalCode))", "score": -0.6249684943904867, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers except for customers in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.City))", "score": -0.6340964395640185, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the postal codes of customers except for customers in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,India), Customer.PostalCode),Customer.PostalCode))", "score": -0.6360114469280234, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,India), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 104, "beams": [{"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Mot\u00f6rhead),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.18261047038659678, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Mot\u00f6rhead), Invoice.InvoiceId),Invoice.Total)", "score": -0.1912099519479076, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Mot\u00f6rhead),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19418422551875258, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Mot\u00f6rhead), Invoice.InvoiceId),Invoice.Total)", "score": -0.20363661507712685, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21221202181113555, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Mot\u00f6rhead), Invoice.InvoiceId),Invoice.Total)", "score": -0.21618576761029643, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22616751955484934, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Mot\u00f6rhead), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.22708495356255726, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Mot\u00f6rhead),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2375671437147342, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24039555416001543, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.25189722538360476, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Mot\u00f6rhead),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25257278737240646, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Mot\u00f6rhead), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2552073947716389, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Mot\u00f6rhead), Invoice.InvoiceId),Invoice.Total)", "score": -0.2570324136439059, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of the invoices that include tracks that appear in the albums of the artist Mot\u00f6rhead?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2605785582895408, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Mot\u00f6rhead),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 105, "beams": [{"orig_question": "Which tracks have more than 550000000 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,550000000), Track.Name),Track.Name))", "score": -0.030552661022738903, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,550000000), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which tracks have more than 550000000 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,550000000), Track.Name),Track.Name))", "score": -0.3668993375958962, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,550000000), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which tracks have more than 550000000 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>=,550000000),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.45840195148919866, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,550000000), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which tracks have more than 550000000 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,550000000),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId), Track.Name),Track.Name))", "score": -0.4697150957332365, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,550000000), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which tracks have more than 550000000 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Track.Bytes,>,550000000), Track.Name),Track.Name))", "score": -0.49357702491853966, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,550000000), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which tracks have more than 550000000 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>=,550000000),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Name))", "score": -0.5001572068366108, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,550000000), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which tracks have more than 550000000 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,550000000),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.517629240434846, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,550000000), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which tracks have more than 550000000 bytes?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Bytes,>,550000000), Track.TrackId),Track.Bytes)", "score": -0.520077668865946, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,550000000), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which tracks have more than 550000000 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,550000000),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId), Track.Milliseconds),Track.Name))", "score": -0.5449907836709358, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,550000000), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which tracks have more than 550000000 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>=,550000000),getData(InvoiceLine),Track.TrackId,Track.Milliseconds),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.5573470028683656, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,550000000), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which tracks have more than 550000000 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),Track.Bytes,>,550000000),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.5662218295491845, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,550000000), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which tracks have more than 550000000 bytes?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Bytes,>=,550000000),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.5881957684515051, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,550000000), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which tracks have more than 550000000 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,550000000),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,Track.TrackId), Track.Milliseconds),Track.Name))", "score": -0.5929049283725453, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,550000000), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which tracks have more than 550000000 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),Track.Bytes,>,550000000),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Name))", "score": -0.5932763952513733, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,550000000), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which tracks have more than 550000000 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,550000000), Track.Name),Track.Name))", "score": -0.6137835643949074, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,550000000), Track.Milliseconds),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 106, "beams": [{"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.0525581327465261, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.30410189863414416, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.3672092578572119, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Customer.PostalCode),Invoice.BillingPostalCode))", "score": -0.4640397544217194, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.4721092696499909, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.5510956368607367, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6028787444311092, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,DF),getData(InvoiceLine),Invoice.InvoiceId,Invoice.CustomerId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.610488905276357, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,=,DF), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.61875302374483, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.6252096112084473, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.637601953299054, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,DF),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6379216316176574, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,=,DF),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6428902891916511, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6468781971570934, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What are the postal codes of invoices issued to the DF state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.6605033598107184, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,DF), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 107, "beams": [{"orig_question": "Are there any tracks from the artists Gerald Moore?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Track),Album.AlbumId,Artist.ArtistId), Artist.Name),Track.Name))", "score": -0.18185421948012342, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Are there any tracks from the artists Gerald Moore?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Track.Name),Track.Name))", "score": -0.25743813600425597, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Are there any tracks from the artists Gerald Moore?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Gerald Moore),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Album.AlbumId,Artist.ArtistId), Artist.Name),Track.Name))", "score": -0.26302918215319837, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Are there any tracks from the artists Gerald Moore?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Gerald Moore),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Track.Name))", "score": -0.2790659327912351, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Are there any tracks from the artists Gerald Moore?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Gerald Moore),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Album.ArtistId,Artist.ArtistId), Artist.Name),Track.Name))", "score": -0.2914591408832076, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Are there any tracks from the artists Gerald Moore?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Gerald Moore),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Artist.ArtistId), Artist.Name),Track.Name))", "score": -0.3001956386971336, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Are there any tracks from the artists Gerald Moore?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Gerald Moore),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Album.AlbumId), Artist.Name),Track.Name))", "score": -0.30103351644716797, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Are there any tracks from the artists Gerald Moore?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Gerald Moore),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Artist.ArtistId), Artist.Name),Track.Name))", "score": -0.303423559240066, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Are there any tracks from the artists Gerald Moore?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore),getData(Track),Album.AlbumId,Artist.ArtistId), Artist.Name),Track.Name))", "score": -0.3042500672776448, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Are there any tracks from the artists Gerald Moore?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Gerald Moore),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Album.AlbumId,Artist.ArtistId), Artist.Name),Track.Name))", "score": -0.3051230474178476, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Are there any tracks from the artists Gerald Moore?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Gerald Moore),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Album.ArtistId,Album.AlbumId), Artist.Name),Track.Name))", "score": -0.31023017153225735, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Are there any tracks from the artists Gerald Moore?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Track.Name),Track.Name))", "score": -0.31610593979164736, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Are there any tracks from the artists Gerald Moore?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Album.AlbumId), Artist.Name),Track.Name))", "score": -0.31735834768464494, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Are there any tracks from the artists Gerald Moore?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Gerald Moore),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Album.AlbumId,Album.AlbumId), Artist.Name),Track.Name))", "score": -0.31793665992624187, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Are there any tracks from the artists Gerald Moore?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Album.AlbumId), Artist.Name),Track.Name))", "score": -0.34127497840607957, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 108, "beams": [{"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.18962928325464232, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,6.94), MediaType.Name),MediaType.Name))", "score": -0.19085715644247447, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.20815656125633974, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,6.94), MediaType.Name),MediaType.Name))", "score": -0.21151905393457526, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,Track.TrackId),Invoice.Total,=,6.94),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.23230060971158836, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.Total,=,6.94),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.23782397139255354, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,6.94),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.24144640694246214, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.Total,=,6.94),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2591084677127359, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,=,6.94),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2776498822966886, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,=,6.94),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.29893437861687094, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<=,6.94), MediaType.Name),MediaType.Name))", "score": -0.3083352649432235, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<=,6.94), MediaType.Name),MediaType.Name))", "score": -0.3289971624353243, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,6.94), MediaType.Name),MediaType.Name))", "score": -0.3292302927708141, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),Invoice.Total,=,6.94),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.36635761129849304, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many media types of the tracks are there, with a invoice total of 6.94?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,Track.TrackId),Invoice.Total,=,6.94), MediaType.Name),MediaType.Name))", "score": -0.3893075100312549, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,6.94),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 109, "beams": [{"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.PostalCode),Employee.PostalCode))", "score": -0.21864325202313775, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.PostalCode),Employee.PostalCode))", "score": -0.2273288724903942, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,!=,BC),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))", "score": -0.2796069683372214, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,!=,BC), Employee.PostalCode),Employee.PostalCode))", "score": -0.30299365549629476, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.3159532643493983, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId), Employee.PostalCode),Employee.PostalCode))", "score": -0.31771755478057767, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,!=,BC),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.PostalCode),Employee.PostalCode))", "score": -0.31815580759369855, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,!=,BC),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.PostalCode),Employee.PostalCode))", "score": -0.32067942896898766, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.PostalCode),Customer.PostalCode))", "score": -0.3270284857661002, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Customer.PostalCode),Employee.PostalCode))", "score": -0.3326713444590278, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingState,!=,BC), Employee.PostalCode),Employee.PostalCode))", "score": -0.33398730040426017, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,BC), Employee.PostalCode),Employee.PostalCode))", "score": -0.33911216736669303, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,!=,BC), Employee.PostalCode),Employee.PostalCode))", "score": -0.3448954876918517, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,!=,BC),merge(filter(getData(Customer),Customer.State,!=,Chase),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))", "score": -0.3605067607896709, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingState,!=,BC),merge(filter(getData(Customer),Invoice.BillingState,!=,BC),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))", "score": -0.3727694094439975, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 110, "beams": [{"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Invoice.BillingAddress,!=,683 10 Street SW), Track.TrackId),Track.UnitPrice)", "score": -0.1798714635816428, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Invoice.BillingAddress,!=,683 10 Street SW), Track.TrackId),Track.UnitPrice)", "score": -0.20901243734940173, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,683 10 Street SW), Track.TrackId),Track.UnitPrice)", "score": -0.22027501774219682, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,683 10 Street SW), Track.TrackId),Track.UnitPrice)", "score": -0.23092015076766845, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,!=,683 10 Street SW), Track.TrackId),Track.UnitPrice)", "score": -0.24072258645535957, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,!=,683 10 Street SW), Track.TrackId),Track.UnitPrice)", "score": -0.24804685269473084, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Invoice.BillingAddress,!=,683 10 Street SW),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.24986934740224795, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Invoice.BillingAddress,!=,683 10 Street SW), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.2633763399609786, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,683 10 Street SW), Track.TrackId),Track.UnitPrice)", "score": -0.2681701622412837, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.Address,!=,683 10 Street SW),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.273910760906744, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Invoice.BillingAddress,!=,683 10 Street SW), Track.TrackId),Track.UnitPrice)", "score": -0.27698838093382266, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.Address,!=,683 10 Street SW),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.2817974585787034, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Invoice.BillingAddress,!=,683 10 Street SW), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.282422120664077, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Invoice.BillingAddress,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2858967904094208, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks sold by employees other than the one with the address 683 10 Street SW?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Invoice.BillingAddress,!=,683 10 Street SW), Track.TrackId),Track.UnitPrice)", "score": -0.2900035768712453, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Address,!=,683 10 Street SW),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 111, "beams": [{"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,James Brown/Tim Maia), Artist.Name),Artist.Name))", "score": -0.14624018771140612, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.18706809395356408, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,James Brown/Tim Maia), Artist.Name),Artist.Name))", "score": -0.19435649653858542, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.23144386125146857, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,James Brown/Tim Maia), Artist.Name),Artist.Name))", "score": -0.23169439207856563, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Composer,=,James Brown/Tim Maia),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.253429184325567, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.26351215983531817, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Genre),Album.ArtistId,Artist.ArtistId),Track.Composer,=,James Brown/Tim Maia), Artist.Name),Artist.Name))", "score": -0.3007000319063619, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Track.GenreId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,James Brown/Tim Maia), Artist.Name),Artist.Name))", "score": -0.3290786225692018, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Track.GenreId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.34244571495942044, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Track.GenreId,Artist.ArtistId),Track.Composer,=,James Brown/Tim Maia), Artist.Name),Artist.Name))", "score": -0.3599172778699688, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Track.GenreId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.36141663294447246, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),InvoiceLine.TrackId,Album.AlbumId),Track.Composer,=,James Brown/Tim Maia), Artist.Name),Artist.Name))", "score": -0.3691609567217881, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,James Brown/Tim Maia), Artist.Name),Artist.Name))", "score": -0.371431051199253, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists' that James Brown and Tim Maia as their composers?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Genre.GenreId),Track.AlbumId,Album.AlbumId),Track.Composer,=,James Brown/Tim Maia), Artist.Name),Artist.Name))", "score": -0.37178742771367557, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,James Brown/Tim Maia),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 112, "beams": [{"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))", "score": -0.04682931333081797, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Fax))", "score": -0.33353194064693525, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Phone))", "score": -0.39270331925945356, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.LastName,=,Peeters), Customer.Country),Customer.Country))", "score": -0.472077829123009, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.FirstName))", "score": -0.5305240995367058, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Employee.Country))", "score": -0.5337980038602836, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Phone),Customer.Country))", "score": -0.5607613914762624, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Peeters), Customer.Country),Customer.Country))", "score": -0.5914350275998004, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Fax),Customer.Country))", "score": -0.601597189262975, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,Peeters), Customer.Country),Customer.Country))", "score": -0.6214940671925433, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Invoice.BillingCountry))", "score": -0.6753934270818718, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Employee.Country),Customer.Country))", "score": -0.6815366738592274, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Track.Name,=,Peeters), Customer.Country),Customer.Country))", "score": -0.6851316218380816, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.State))", "score": -0.7189098245580681, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Invoice.BillingCountry),Customer.Country))", "score": -0.7212170356069691, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 113, "beams": [{"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.21633611670222308, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.29185622374623266, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.3216235111465026, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.3499772710104271, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.3681716150009532, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.37974455841069704, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.3869822067052149, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.3871530849768372, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.3886054526732509, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.3979388868957271, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.40462529930019503, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.41090524480368573, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.Total,>=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.4136175301977013, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.43560593750948573, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states did we sell with a total of at least 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<=,1.99), Invoice.BillingState),Invoice.BillingState))", "score": -0.4553089544623561, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,1.99), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 114, "beams": [{"orig_question": "Whats the length of the cheapest track sold to countries other than Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.BillingCountry,!=,Canada), Track.Milliseconds),Track.Milliseconds))", "score": -0.1841926168453938, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Milliseconds))"}, {"orig_question": "Whats the length of the cheapest track sold to countries other than Canada?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Milliseconds),Track.Milliseconds))", "score": -0.31116234909966106, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Milliseconds))"}, {"orig_question": "Whats the length of the cheapest track sold to countries other than Canada?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Track.Milliseconds))", "score": -0.3144478340063626, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Milliseconds))"}, {"orig_question": "Whats the length of the cheapest track sold to countries other than Canada?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Customer.LastName),Track.Milliseconds))", "score": -0.3165987805855964, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Milliseconds))"}, {"orig_question": "Whats the length of the cheapest track sold to countries other than Canada?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Milliseconds),Track.Milliseconds))", "score": -0.3186069899906877, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Milliseconds))"}, {"orig_question": "Whats the length of the cheapest track sold to countries other than Canada?", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Canada),Invoice.Total),Track.Milliseconds))", "score": -0.3225478443930272, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Milliseconds))"}, {"orig_question": "Whats the length of the cheapest track sold to countries other than Canada?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Milliseconds),Track.Milliseconds))", "score": -0.33033017034925616, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Milliseconds))"}, {"orig_question": "Whats the length of the cheapest track sold to countries other than Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Canada), Track.Milliseconds),Track.Milliseconds))", "score": -0.34672998741581557, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Milliseconds))"}, {"orig_question": "Whats the length of the cheapest track sold to countries other than Canada?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Milliseconds),Track.Milliseconds))", "score": -0.3519086464443922, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Milliseconds))"}, {"orig_question": "Whats the length of the cheapest track sold to countries other than Canada?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.353904249385252, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Milliseconds))"}, {"orig_question": "Whats the length of the cheapest track sold to countries other than Canada?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Milliseconds),Track.Milliseconds))", "score": -0.3751764797202397, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Milliseconds))"}, {"orig_question": "Whats the length of the cheapest track sold to countries other than Canada?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Customer.LastName),Track.Milliseconds))", "score": -0.3776361756516179, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Milliseconds))"}, {"orig_question": "Whats the length of the cheapest track sold to countries other than Canada?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total),Track.Milliseconds))", "score": -0.37790404717260223, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Milliseconds))"}, {"orig_question": "Whats the length of the cheapest track sold to countries other than Canada?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Track.Milliseconds),Track.Milliseconds))", "score": -0.3922998231037367, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Milliseconds))"}, {"orig_question": "Whats the length of the cheapest track sold to countries other than Canada?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Milliseconds),Track.Milliseconds))", "score": -0.4063324220836914, "correct_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 115, "beams": [{"orig_question": "Which track that has been sold after 2015 has the highest unit price?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,2010-05-13 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Track.Bytes))", "score": -0.24091093639422811, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2010-05-13 00:00:00),InvoiceLine.UnitPrice),Track.Name))"}, {"orig_question": "Which track that has been sold after 2015 has the highest unit price?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,2010-05-13 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Track.Name))", "score": -0.27907678458990404, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2010-05-13 00:00:00),InvoiceLine.UnitPrice),Track.Name))"}, {"orig_question": "Which track that has been sold after 2015 has the highest unit price?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),Invoice.InvoiceDate,>=,2010-05-13 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Track.Bytes))", "score": -0.30000369921054154, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2010-05-13 00:00:00),InvoiceLine.UnitPrice),Track.Name))"}, {"orig_question": "Which track that has been sold after 2015 has the highest unit price?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>=,2010-05-13 00:00:00),Invoice.Total),Track.Name))", "score": -0.313623887103529, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2010-05-13 00:00:00),InvoiceLine.UnitPrice),Track.Name))"}, {"orig_question": "Which track that has been sold after 2015 has the highest unit price?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceDate,>=,2010-05-13 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Track.Bytes))", "score": -0.3286632429620549, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2010-05-13 00:00:00),InvoiceLine.UnitPrice),Track.Name))"}, {"orig_question": "Which track that has been sold after 2015 has the highest unit price?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),Invoice.InvoiceDate,>=,2010-05-13 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Track.Name))", "score": -0.3296136324067611, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2010-05-13 00:00:00),InvoiceLine.UnitPrice),Track.Name))"}, {"orig_question": "Which track that has been sold after 2015 has the highest unit price?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),Invoice.InvoiceDate,>,2010-05-13 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Track.Bytes))", "score": -0.3297969561016233, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2010-05-13 00:00:00),InvoiceLine.UnitPrice),Track.Name))"}, {"orig_question": "Which track that has been sold after 2015 has the highest unit price?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,2010-05-13 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Track.Bytes))", "score": -0.33061141167240354, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2010-05-13 00:00:00),InvoiceLine.UnitPrice),Track.Name))"}, {"orig_question": "Which track that has been sold after 2015 has the highest unit price?", "inferred_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,2010-05-13 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Name))", "score": -0.3447306887546818, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2010-05-13 00:00:00),InvoiceLine.UnitPrice),Track.Name))"}, {"orig_question": "Which track that has been sold after 2015 has the highest unit price?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>=,2010-05-13 00:00:00),Invoice.Total),Track.Bytes))", "score": -0.34554308926751, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2010-05-13 00:00:00),InvoiceLine.UnitPrice),Track.Name))"}, {"orig_question": "Which track that has been sold after 2015 has the highest unit price?", "inferred_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,2010-05-13 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Bytes))", "score": -0.3486013213033357, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2010-05-13 00:00:00),InvoiceLine.UnitPrice),Track.Name))"}, {"orig_question": "Which track that has been sold after 2015 has the highest unit price?", "inferred_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2010-05-13 00:00:00),Invoice.Total),Track.Name))", "score": -0.35032204706515907, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2010-05-13 00:00:00),InvoiceLine.UnitPrice),Track.Name))"}, {"orig_question": "Which track that has been sold after 2015 has the highest unit price?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,2010-05-13 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Track.Bytes))", "score": -0.35361515296439444, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2010-05-13 00:00:00),InvoiceLine.UnitPrice),Track.Name))"}, {"orig_question": "Which track that has been sold after 2015 has the highest unit price?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceDate,>=,2010-05-13 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Track.Name))", "score": -0.35827317615827453, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2010-05-13 00:00:00),InvoiceLine.UnitPrice),Track.Name))"}, {"orig_question": "Which track that has been sold after 2015 has the highest unit price?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceDate,>,2010-05-13 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Track.Bytes))", "score": -0.358456510928491, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2010-05-13 00:00:00),InvoiceLine.UnitPrice),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 116, "beams": [{"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Customer.City))", "score": -0.31136509939824464, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Customer.Country))", "score": -0.33841547533666017, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Customer.State))", "score": -0.41591367289220216, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Country),Customer.City))", "score": -0.41804213985597016, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Country),Customer.City))", "score": -0.4427337215820444, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Country),Customer.Country))", "score": -0.4450925157943857, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.City),Customer.City))", "score": -0.4592357517758501, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Country),Customer.Country))", "score": -0.4697840975204599, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.City),Customer.Country))", "score": -0.4862861277142656, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.State),Customer.City))", "score": -0.5128604562560213, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,None), Customer.Country),Customer.State))", "score": -0.5225907133499277, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Country),Customer.Email))", "score": -0.5295321063676965, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.State),Customer.Country))", "score": -0.5399108321944368, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Country),Customer.State))", "score": -0.5472822950760019, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}, {"orig_question": "From which cuntries are our customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Fax),Customer.City))", "score": -0.5575926990786684, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 117, "beams": [{"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.015386771405837647, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.625403474770323, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Track.Name,!=,None), Album.Title),Album.Title))", "score": -1.0083968929684488, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Track.Name,=,None), Album.Title),Album.Title))", "score": -1.0212211824691622, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.AlbumId))", "score": -1.0922596909867697, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -1.1000588375191218, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -1.1596595681766184, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -1.2683266830067665, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "sum(distinct(getData(Track), Album.AlbumId),Genre.Name)", "score": -1.345691457111011, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "sum(distinct(getData(Track), Album.AlbumId),Track.Name)", "score": -1.3664985316537606, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.AlbumId),Album.Title))", "score": -1.4224244272616215, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Artist.Name))", "score": -1.4263997907072137, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Artist.ArtistId))", "score": -1.440756759750093, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Genre.Name)", "score": -1.450288925081765, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many distinct albums are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Track.Composer))", "score": -1.4692442830815626, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 118, "beams": [{"orig_question": "What is the size of all tracks made by artists other than Michael Tilson?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony), Track.TrackId),Track.Bytes)", "score": -0.09863061011822163, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks made by artists other than Michael Tilson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.17623998867094617, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks made by artists other than Michael Tilson?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony), Track.TrackId),Track.Bytes)", "score": -0.20522355361850597, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks made by artists other than Michael Tilson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.20594131180774986, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks made by artists other than Michael Tilson?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.24841843687543247, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks made by artists other than Michael Tilson?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony), Track.Bytes),Track.Bytes))", "score": -0.2520122692617723, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks made by artists other than Michael Tilson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),merge(getData(Album),getData(Album),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.3025607323185, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks made by artists other than Michael Tilson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),merge(merge(getData(Album),getData(Track),Album.AlbumId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.3087051322641327, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks made by artists other than Michael Tilson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),merge(getData(Album),getData(Track),Album.AlbumId,Album.ArtistId),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.3184488447424827, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks made by artists other than Michael Tilson?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony), Track.TrackId),Track.Bytes)", "score": -0.3184524224393406, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks made by artists other than Michael Tilson?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony), Track.Bytes),Track.Bytes))", "score": -0.32461698923215254, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks made by artists other than Michael Tilson?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.3402696820098494, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks made by artists other than Michael Tilson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Artist),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.3510467925381303, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks made by artists other than Michael Tilson?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony), Track.Name),Track.Bytes)", "score": -0.38008403917263855, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the size of all tracks made by artists other than Michael Tilson?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony), Track.TrackId),Track.Bytes)", "score": -0.4101399917662484, "correct_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Michael Tilson Thomas & San Francisco Symphony),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 119, "beams": [{"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))", "score": -0.04709986606758321, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Album.Title))", "score": -0.3184460681877681, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Name))", "score": -0.3678458017311641, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,2950224), Track.Composer),Track.Composer))", "score": -0.4324217206813046, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>=,2950224),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.AlbumId,Album.AlbumId), Track.Composer),Track.Composer))", "score": -0.5279453038149181, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Name),Track.Composer))", "score": -0.5391026028446504, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>=,2950224),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.AlbumId,Album.AlbumId), Track.Composer),Album.Title))", "score": -0.550583469811483, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>=,2950224),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Track.Composer),Track.Composer))", "score": -0.5602899457795008, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,2950224),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.5638382180778085, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>=,2950224),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Track.Composer),Album.Title))", "score": -0.5829281117760656, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,2950224),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.6063173464007485, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,2950224), Track.Composer),Track.Composer))", "score": -0.6205272442675778, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,2950224),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),PlaylistTrack.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.6242496469542731, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>=,2950224),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Track),Track.AlbumId,Album.AlbumId), Track.Composer),Track.Composer))", "score": -0.6368447662590025, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}, {"orig_question": "What composers wrote songs that are bigger than 2950224 bytes", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Genre.Name))", "score": -0.6378633064232417, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,2950224), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 120, "beams": [{"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Album.AlbumId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2511231210139305, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Genre),Track.GenreId,Genre.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.27979570191598696, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Genre),Track.GenreId,Album.AlbumId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.28065812646653443, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.29819164026242656, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.304269019455588, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,=,Comedy), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.31815779067374494, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.34163277516000184, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Genre),Track.GenreId,Genre.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3443242116770849, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.TrackId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3444610546064396, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Track),Track.GenreId,InvoiceLine.TrackId),getData(Genre),Track.GenreId,Album.AlbumId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.34853396523729285, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Artist.Name),Invoice.BillingPostalCode))", "score": -0.35076874671906755, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),getData(Genre),Track.GenreId,Album.AlbumId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.35373394711048867, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.355960254066846, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.TrackId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3680772108336749, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "From how many different postal codes have tracks from the comedy genre been purchased?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Comedy),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Invoice.BillingPostalCode))", "score": -0.37462031114481925, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 121, "beams": [{"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),MediaType.Name))", "score": -0.2244325803440006, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))", "score": -0.2416464017551334, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Track.Composer))", "score": -0.28515469299964025, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Album.Title))", "score": -0.3329763488691242, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Email))", "score": -0.34251201914958074, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.LastName))", "score": -0.438222773544112, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.City))", "score": -0.45197973417452886, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Track.MediaTypeId))", "score": -0.4670558051984699, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.Title),MediaType.Name))", "score": -0.5887262599389942, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Track.Composer),MediaType.Name))", "score": -0.590151434935251, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.5920145569216402, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.Title),Employee.Title))", "score": -0.605940081350127, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Track.Composer),Employee.Title))", "score": -0.6073652563463838, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), MediaType.Name),Employee.Title))", "score": -0.609228378332773, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "What are the distinct titles of the employees born on 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Employee.BirthDate,=,1973-07-01 00:00:00),getData(Track),Customer.SupportRepId,Track.TrackId), Employee.Title),MediaType.Name))", "score": -0.6442188193165771, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 122, "beams": [{"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.1072270227161804, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.13092629127052152, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.1594775399706082, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.162836424422015, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.21653000677444526, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.24585616563438561, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2665286229884926, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.26797674625482176, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.27048953731545544, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.28668770099664953, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.30604113531076976, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.30672148499350227, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name)", "score": -0.31808938618047367, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name)", "score": -0.3649686104872126, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.3802194561763796, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 123, "beams": [{"orig_question": "At what company does the customer with the email hholy@gmail.com work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))", "score": -0.02669766835606424, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "At what company does the customer with the email hholy@gmail.com work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Email))", "score": -0.5083360803473624, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "At what company does the customer with the email hholy@gmail.com work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.City))", "score": -0.5505826604712638, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "At what company does the customer with the email hholy@gmail.com work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Country),Customer.Company))", "score": -0.5552138477723929, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "At what company does the customer with the email hholy@gmail.com work?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))", "score": -0.595241106391768, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "At what company does the customer with the email hholy@gmail.com work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Country))", "score": -0.597804440294567, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "At what company does the customer with the email hholy@gmail.com work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.City),Customer.Company))", "score": -0.6258536964814994, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "At what company does the customer with the email hholy@gmail.com work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Address),Customer.Company))", "score": -0.6300318628709647, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "At what company does the customer with the email hholy@gmail.com work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,hholy@gmail.com), Customer.Company),Customer.Company))", "score": -0.6585641098718042, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "At what company does the customer with the email hholy@gmail.com work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Email),Customer.Company))", "score": -0.669727185384545, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "At what company does the customer with the email hholy@gmail.com work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Address))", "score": -0.6911683810103568, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "At what company does the customer with the email hholy@gmail.com work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,hholy@gmail.com), Customer.Company),Customer.Company))", "score": -0.6957127129353466, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "At what company does the customer with the email hholy@gmail.com work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Fax))", "score": -0.7000537050116691, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "At what company does the customer with the email hholy@gmail.com work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Album.Title,=,hholy@gmail.com), Customer.Company),Customer.Company))", "score": -0.7011840020932141, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}, {"orig_question": "At what company does the customer with the email hholy@gmail.com work?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.State),Customer.Company))", "score": -0.707263270036492, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,hholy@gmail.com), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 124, "beams": [{"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra), Track.TrackId),Track.UnitPrice)", "score": -0.11988549100732611, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.12403411381889526, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra), Track.TrackId),Track.UnitPrice)", "score": -0.1674932612533216, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.1689784786145879, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra), Track.TrackId),Track.UnitPrice)", "score": -0.2714856465458643, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra), Track.TrackId),Track.UnitPrice)", "score": -0.3011557487608953, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.3146784633280867, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.3316045503593627, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.35626984832313124, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.3737220695695702, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.3783219197435935, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,Barry Wordsworth & BBC Concert Orchestra), Track.TrackId),Track.UnitPrice)", "score": -0.38324048711230835, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Employee.Title,!=,Barry Wordsworth & BBC Concert Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.4076294646498208, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.4418946919697021, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.44353228460978916, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 125, "beams": [{"orig_question": "What are the different media types of the tracks in the album of Miles Davis?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Miles Davis), MediaType.Name),MediaType.Name))", "score": -0.1094640101615764, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Miles Davis),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What are the different media types of the tracks in the album of Miles Davis?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Miles Davis),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.17878017859174086, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Miles Davis),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What are the different media types of the tracks in the album of Miles Davis?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,Miles Davis),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.19004985664946838, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Miles Davis),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What are the different media types of the tracks in the album of Miles Davis?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.Title,=,Miles Davis), MediaType.Name),MediaType.Name))", "score": -0.1953032778678266, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Miles Davis),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What are the different media types of the tracks in the album of Miles Davis?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Miles Davis), MediaType.Name),MediaType.Name))", "score": -0.21332187607071545, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Miles Davis),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What are the different media types of the tracks in the album of Miles Davis?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Miles Davis),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2852147442973294, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Miles Davis),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What are the different media types of the tracks in the album of Miles Davis?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Album.AlbumId),Album.Title,=,Miles Davis), MediaType.Name),MediaType.Name))", "score": -0.29683922247422656, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Miles Davis),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What are the different media types of the tracks in the album of Miles Davis?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Miles Davis),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3041266266952814, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Miles Davis),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What are the different media types of the tracks in the album of Miles Davis?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Album.Title,=,Miles Davis),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.31300190143150636, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Miles Davis),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What are the different media types of the tracks in the album of Miles Davis?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.AlbumId),Album.Title,=,Miles Davis), MediaType.Name),MediaType.Name))", "score": -0.32296203827614745, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Miles Davis),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What are the different media types of the tracks in the album of Miles Davis?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Miles Davis),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.33033570235976134, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Miles Davis),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What are the different media types of the tracks in the album of Miles Davis?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Miles Davis),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3380579045572118, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Miles Davis),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What are the different media types of the tracks in the album of Miles Davis?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,Miles Davis),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.34323601088910455, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Miles Davis),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What are the different media types of the tracks in the album of Miles Davis?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Miles Davis), MediaType.Name),MediaType.Name))", "score": -0.35349334515005554, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Miles Davis),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What are the different media types of the tracks in the album of Miles Davis?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.AlbumId,Track.AlbumId),Album.Title,=,Miles Davis), MediaType.Name),MediaType.Name))", "score": -0.3623474673872098, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Miles Davis),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 126, "beams": [{"orig_question": "Which album contains the most expensive track, considering all tracks with an invoice line unit price greater than 0.99?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<,0.99),Track.UnitPrice),Album.Title))", "score": -0.13741000003121417, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album contains the most expensive track, considering all tracks with an invoice line unit price greater than 0.99?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,0.99),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.207232405277675, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album contains the most expensive track, considering all tracks with an invoice line unit price greater than 0.99?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.24766354442417463, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album contains the most expensive track, considering all tracks with an invoice line unit price greater than 0.99?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,0.99),Track.UnitPrice),Album.Title))", "score": -0.263711441051566, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album contains the most expensive track, considering all tracks with an invoice line unit price greater than 0.99?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.2651409674390802, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album contains the most expensive track, considering all tracks with an invoice line unit price greater than 0.99?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.31223347198864315, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album contains the most expensive track, considering all tracks with an invoice line unit price greater than 0.99?", "inferred_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))", "score": -0.3344489077667962, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album contains the most expensive track, considering all tracks with an invoice line unit price greater than 0.99?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<,0.99),Track.UnitPrice),Album.Title))", "score": -0.3403150373914973, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album contains the most expensive track, considering all tracks with an invoice line unit price greater than 0.99?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,0.99),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3419584731723664, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album contains the most expensive track, considering all tracks with an invoice line unit price greater than 0.99?", "inferred_code": "count(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<,0.99),Track.UnitPrice),Album.Title))", "score": -0.345578378284482, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album contains the most expensive track, considering all tracks with an invoice line unit price greater than 0.99?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,0.99),Track.UnitPrice),Album.Title))", "score": -0.34738949661649055, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album contains the most expensive track, considering all tracks with an invoice line unit price greater than 0.99?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,0.99),Track.UnitPrice),Album.Title))", "score": -0.356773702201361, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album contains the most expensive track, considering all tracks with an invoice line unit price greater than 0.99?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,0.99),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3598612867025469, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album contains the most expensive track, considering all tracks with an invoice line unit price greater than 0.99?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<,0.99),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.36083051809379163, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album contains the most expensive track, considering all tracks with an invoice line unit price greater than 0.99?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,0.99),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.38954655279755446, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 127, "beams": [{"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.16113668445783144, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.MediaTypeId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.24120054250143902, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.24455667492483374, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Genre.Name))", "score": -0.2522891439302447, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),MediaType.Name))", "score": -0.2534343627082324, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(MediaType),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2535240652667687, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.25957660876805605, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Track.Name))", "score": -0.26668495993579444, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),Track.Name))", "score": -0.27065359269475914, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),getData(Track),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),Track.Name))", "score": -0.2814003379154983, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2836980636583361, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),Track.Name))", "score": -0.2855389545539863, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.28704012196609363, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2889171785076202, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks), Track.Name),Track.Name))", "score": -0.292107081382071, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 128, "beams": [{"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))", "score": -0.11813915753009496, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,Calgary), Employee.Phone),Employee.Phone))", "score": -0.21801675343158422, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Country),Employee.Phone))", "score": -0.27119817444327055, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,Calgary), Employee.Country),Employee.Phone))", "score": -0.3710757703447598, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,Calgary), Employee.Phone),Employee.Phone))", "score": -0.4327869363987702, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,Calgary), Employee.Phone),Employee.Phone))", "score": -0.44950198614242254, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,Calgary), Employee.Phone),Employee.Phone))", "score": -0.49013637983443914, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,!=,Calgary), Employee.Phone),Employee.Phone))", "score": -0.5615284987652558, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Calgary), Employee.Phone),Employee.Phone))", "score": -0.5724744149410981, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,Calgary), Employee.Country),Employee.Phone))", "score": -0.5858459533119458, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,Calgary), Employee.Country),Employee.Phone))", "score": -0.6025610030555981, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,Calgary), Employee.Phone),Employee.Phone))", "score": -0.6304004141056794, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,Calgary), Employee.Country),Employee.Phone))", "score": -0.6431953967476147, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,!=,Calgary), Employee.Phone),Employee.Phone))", "score": -0.6867660232746857, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Customer.Phone),Employee.Phone))", "score": -0.6937320590877789, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 129, "beams": [{"orig_question": "which albumtitel exist in the dataset album?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Invoice.InvoiceDate),MediaType.Name))", "score": -0.41682262144344984, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "which albumtitel exist in the dataset album?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Album.Title,=,None), Invoice.InvoiceDate),MediaType.Name))", "score": -0.43887161846141554, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "which albumtitel exist in the dataset album?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Playlist.Name),MediaType.Name))", "score": -0.44013321207211537, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "which albumtitel exist in the dataset album?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Invoice.InvoiceDate),Employee.Title))", "score": -0.4482484874547, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "which albumtitel exist in the dataset album?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Track.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Invoice.InvoiceDate),MediaType.Name))", "score": -0.4542182629187963, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "which albumtitel exist in the dataset album?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Invoice.InvoiceDate),MediaType.Name))", "score": -0.4589563172178672, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "which albumtitel exist in the dataset album?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Album.Title,=,None), Playlist.Name),MediaType.Name))", "score": -0.46218220909008106, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "which albumtitel exist in the dataset album?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None),getData(Track),Album.AlbumId,Track.AlbumId), Invoice.InvoiceDate),Track.Name))", "score": -0.470080262687433, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "which albumtitel exist in the dataset album?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Album.Title,=,None), Invoice.InvoiceDate),Employee.Title))", "score": -0.47029748447266567, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "which albumtitel exist in the dataset album?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Playlist.Name),Employee.Title))", "score": -0.4715590780833655, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "which albumtitel exist in the dataset album?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Invoice.InvoiceDate),Employee.LastName))", "score": -0.47360793002990736, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "which albumtitel exist in the dataset album?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Invoice.InvoiceDate),Track.Name))", "score": -0.476015658897582, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "which albumtitel exist in the dataset album?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Track.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Album.Title,=,None), Invoice.InvoiceDate),MediaType.Name))", "score": -0.47626725993676194, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "which albumtitel exist in the dataset album?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Track.AlbumId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Playlist.Name),MediaType.Name))", "score": -0.47752885354746183, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "which albumtitel exist in the dataset album?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Invoice.InvoiceDate),Track.Name))", "score": -0.4805834244110348, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 130, "beams": [{"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Artist.Name,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.24198194710406745, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.2735564383063923, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.2794733065901118, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.28619143312164763, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.28807844744276545, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Artist.Name,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.29125609722637946, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.30071344225802077, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Invoice.CustomerId),Employee.FirstName,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.3094991852652679, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Robert),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.31422913438980044, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Invoice.CustomerId),Employee.FirstName,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.3221341800805232, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Invoice.CustomerId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.324021194401641, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Robert),getData(Track),Customer.CustomerId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.3276579838984011, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.33409051492110187, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Invoice.CustomerId),Employee.Country,!=,Robert), Track.TrackId),Track.UnitPrice)", "score": -0.3366561959617121, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price which were not supported by employee Robert?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Robert),getData(Track),PlaylistTrack.TrackId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.34126932551578654, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Robert),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 131, "beams": [{"orig_question": "What are the titles of employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))", "score": -0.1055129896994913, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the titles of employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.LastName))", "score": -0.32277181559766177, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the titles of employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.Title))", "score": -0.3754799384769285, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the titles of employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Email))", "score": -0.3924736064072931, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the titles of employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,Canada), Employee.Title),Employee.Title))", "score": -0.44105710463190917, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the titles of employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.City))", "score": -0.4663567524548853, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the titles of employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Email),Employee.Title))", "score": -0.48288524338568095, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the titles of employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.FirstName),Employee.Title))", "score": -0.5166405458148802, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the titles of employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Address),Employee.Title))", "score": -0.5495402235683287, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the titles of employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.FirstName))", "score": -0.564615873634466, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the titles of employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,Canada), Employee.Title),Employee.Title))", "score": -0.5776998587098205, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the titles of employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.PostalCode))", "score": -0.5837977212067926, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the titles of employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,Canada), Employee.Title),Employee.Title))", "score": -0.5855190940346802, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the titles of employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))", "score": -0.592738764375099, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}, {"orig_question": "What are the titles of employees coming from Canada ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.PostalCode),Employee.Title))", "score": -0.5983846206363523, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 132, "beams": [{"orig_question": "What is the name of the music album that was purchased as aac audio file and has the shortest song on it?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.19487238194317644, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the name of the music album that was purchased as aac audio file and has the shortest song on it?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.19640910009024387, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the name of the music album that was purchased as aac audio file and has the shortest song on it?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Bytes),Album.Title))", "score": -0.26937914615652203, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the name of the music album that was purchased as aac audio file and has the shortest song on it?", "inferred_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Bytes),Album.Title))", "score": -0.29736708485215446, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the name of the music album that was purchased as aac audio file and has the shortest song on it?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Album.Title),Album.Title))", "score": -0.3004801269205091, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the name of the music album that was purchased as aac audio file and has the shortest song on it?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Album.Title),Album.Title))", "score": -0.3154198407094294, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the name of the music album that was purchased as aac audio file and has the shortest song on it?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.31658414984681293, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the name of the music album that was purchased as aac audio file and has the shortest song on it?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),InvoiceLine.TrackId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3211020338568945, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the name of the music album that was purchased as aac audio file and has the shortest song on it?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3232698100811385, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the name of the music album that was purchased as aac audio file and has the shortest song on it?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.33558446620154037, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the name of the music album that was purchased as aac audio file and has the shortest song on it?", "inferred_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))", "score": -0.3364764300161694, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the name of the music album that was purchased as aac audio file and has the shortest song on it?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.34372343785683995, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the name of the music album that was purchased as aac audio file and has the shortest song on it?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file), Track.Name),Album.Title))", "score": -0.3464019128428971, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the name of the music album that was purchased as aac audio file and has the shortest song on it?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3503974834487482, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the name of the music album that was purchased as aac audio file and has the shortest song on it?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Track.Name),Album.Title))", "score": -0.35995145193377936, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 133, "beams": [{"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)", "score": -0.18408956782805835, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)", "score": -0.24684105184487898, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,7.96),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)", "score": -0.2562664695936675, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,7.96),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.26029586557428863, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.Total,>=,7.96),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2700788419533189, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)", "score": -0.2903087267363419, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)", "score": -0.2950735894674054, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,7.96), Track.TrackId),Track.UnitPrice)", "score": -0.3010113645283552, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,7.96), Track.TrackId),Track.UnitPrice)", "score": -0.32581439849904753, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,7.96),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.33505841007119597, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,7.96),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3538684357505565, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,>=,7.96),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.35912584465770314, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,7.96),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3602110890907197, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,7.96), Track.TrackId),Track.UnitPrice)", "score": -0.36928207661596, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of tracks that have been sold at least once with a total invoice lower than 7.96?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.Total,>=,7.96),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3834896471906609, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,7.96), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 134, "beams": [{"orig_question": "How many different genres were present in the songs billed to the Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Track.Composer,=,Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt), Genre.Name),Genre.Name))", "score": -0.16566891707507567, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were present in the songs billed to the Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt), Genre.Name),Genre.Name))", "score": -0.2012394819228642, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were present in the songs billed to the Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.25261727848927557, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were present in the songs billed to the Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Track.Composer,=,Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt), Genre.Name),Genre.Name))", "score": -0.2980019697103078, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were present in the songs billed to the Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2982391975272535, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were present in the songs billed to the Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.Quantity,=,Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt), Genre.Name),Genre.Name))", "score": -0.301739378206795, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were present in the songs billed to the Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.32839107648073973, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were present in the songs billed to the Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.32861515484111037, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were present in the songs billed to the Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt), Genre.Name),Genre.Name))", "score": -0.3335725345580963, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were present in the songs billed to the Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.33372704719883145, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were present in the songs billed to the Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt), Genre.Name),Genre.Name))", "score": -0.33723306652774626, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were present in the songs billed to the Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3443095053394255, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were present in the songs billed to the Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,=,Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt), Genre.Name),Genre.Name))", "score": -0.3449399891663755, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were present in the songs billed to the Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.TrackId),Track.Composer,=,Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt), Genre.Name),Genre.Name))", "score": -0.3617744125505404, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were present in the songs billed to the Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt),Album.Title,=,Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt), Genre.Name),Genre.Name))", "score": -0.37585167615543985, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Rotenturmstra\u00c3\u009fe 4, 1010 Innere Stadt),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 135, "beams": [{"orig_question": "How many different media types of all the artist and their albums exist except from the artist Men At Work?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Men At Work), MediaType.Name),MediaType.Name))", "score": -0.12389473477008953, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Men At Work),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types of all the artist and their albums exist except from the artist Men At Work?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Men At Work),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.12500968454365993, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Men At Work),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types of all the artist and their albums exist except from the artist Men At Work?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Men At Work),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.13572282828487922, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Men At Work),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types of all the artist and their albums exist except from the artist Men At Work?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Men At Work), MediaType.Name),MediaType.Name))", "score": -0.2182190008991458, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Men At Work),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types of all the artist and their albums exist except from the artist Men At Work?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Men At Work), MediaType.Name),MediaType.Name))", "score": -0.2316658407171339, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Men At Work),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types of all the artist and their albums exist except from the artist Men At Work?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Men At Work),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2860619423545918, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Men At Work),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types of all the artist and their albums exist except from the artist Men At Work?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Men At Work), MediaType.Name),MediaType.Name))", "score": -0.29517174026222337, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Men At Work),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types of all the artist and their albums exist except from the artist Men At Work?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Men At Work),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.3007060933508738, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Men At Work),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types of all the artist and their albums exist except from the artist Men At Work?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Men At Work), MediaType.Name),MediaType.Name))", "score": -0.3171815199853874, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Men At Work),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types of all the artist and their albums exist except from the artist Men At Work?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(MediaType),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Men At Work), MediaType.Name),MediaType.Name))", "score": -0.3183933675766359, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Men At Work),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types of all the artist and their albums exist except from the artist Men At Work?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Men At Work), MediaType.Name),MediaType.Name))", "score": -0.32141862719025477, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Men At Work),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types of all the artist and their albums exist except from the artist Men At Work?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Men At Work),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.32544536383400285, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Men At Work),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types of all the artist and their albums exist except from the artist Men At Work?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Album.ArtistId),Artist.Name,!=,Men At Work), MediaType.Name),MediaType.Name))", "score": -0.33257065200718877, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Men At Work),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types of all the artist and their albums exist except from the artist Men At Work?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Men At Work),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.33814935107222155, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Men At Work),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types of all the artist and their albums exist except from the artist Men At Work?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.Title,!=,Men At Work), MediaType.Name),MediaType.Name))", "score": -0.338946625697162, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Men At Work),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 136, "beams": [{"orig_question": "What is the length of all tracks composed by Mike McCready & Stone Gossard that are on the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.12167595829794535, "correct_code": "sum(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Composer,=,Mike McCready & Stone Gossard),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks composed by Mike McCready & Stone Gossard that are on the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)", "score": -0.21930727402961384, "correct_code": "sum(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Composer,=,Mike McCready & Stone Gossard),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks composed by Mike McCready & Stone Gossard that are on the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.22299674738755013, "correct_code": "sum(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Composer,=,Mike McCready & Stone Gossard),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks composed by Mike McCready & Stone Gossard that are on the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)", "score": -0.2310419492386404, "correct_code": "sum(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Composer,=,Mike McCready & Stone Gossard),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks composed by Mike McCready & Stone Gossard that are on the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.24745843983335297, "correct_code": "sum(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Composer,=,Mike McCready & Stone Gossard),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks composed by Mike McCready & Stone Gossard that are on the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)", "score": -0.2525094811347209, "correct_code": "sum(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Composer,=,Mike McCready & Stone Gossard),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks composed by Mike McCready & Stone Gossard that are on the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2616633025982786, "correct_code": "sum(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Composer,=,Mike McCready & Stone Gossard),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks composed by Mike McCready & Stone Gossard that are on the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)", "score": -0.30848023167904637, "correct_code": "sum(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Composer,=,Mike McCready & Stone Gossard),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks composed by Mike McCready & Stone Gossard that are on the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)", "score": -0.3124637041633793, "correct_code": "sum(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Composer,=,Mike McCready & Stone Gossard),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks composed by Mike McCready & Stone Gossard that are on the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3232845415224547, "correct_code": "sum(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Composer,=,Mike McCready & Stone Gossard),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks composed by Mike McCready & Stone Gossard that are on the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Name,=,Mike McCready & Stone Gossard),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.330959233652725, "correct_code": "sum(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Composer,=,Mike McCready & Stone Gossard),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks composed by Mike McCready & Stone Gossard that are on the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3457285940334473, "correct_code": "sum(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Composer,=,Mike McCready & Stone Gossard),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks composed by Mike McCready & Stone Gossard that are on the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3494329376684038, "correct_code": "sum(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Composer,=,Mike McCready & Stone Gossard),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks composed by Mike McCready & Stone Gossard that are on the playlist Heavy Metal Classic?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3519893540887013, "correct_code": "sum(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Composer,=,Mike McCready & Stone Gossard),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks composed by Mike McCready & Stone Gossard that are on the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.UnitPrice),Track.Milliseconds))", "score": -0.3895209636989262, "correct_code": "sum(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Composer,=,Mike McCready & Stone Gossard),Playlist.Name,=,Heavy Metal Classic), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 137, "beams": [{"orig_question": "How many albums have tracks that do not cost 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,!=,1.99), Album.Title),Album.Title))", "score": -0.13487116867444823, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums have tracks that do not cost 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.1774635288896148, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums have tracks that do not cost 1.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.18033267495193805, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums have tracks that do not cost 1.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.19224872397826165, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums have tracks that do not cost 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2531567886962061, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums have tracks that do not cost 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),getData(Track),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2716632273112133, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums have tracks that do not cost 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Album.Title),Album.Title))", "score": -0.3149059147386247, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums have tracks that do not cost 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,!=,1.99), Album.Title),Album.Title))", "score": -0.3191050178803652, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums have tracks that do not cost 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,!=,1.99), Album.Title),Album.Title))", "score": -0.331744047762426, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums have tracks that do not cost 1.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Track.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3408425333309444, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums have tracks that do not cost 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),getData(Track),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3473564962549719, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums have tracks that do not cost 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))", "score": -0.3801614942503278, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums have tracks that do not cost 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),InvoiceLine.UnitPrice,!=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))", "score": -0.38672717693859215, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums have tracks that do not cost 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.TrackId), Album.Title),Album.Title))", "score": -0.38908498253912965, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "How many albums have tracks that do not cost 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.39675857722153635, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 138, "beams": [{"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.16918365747454317, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.23753024824256397, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Artist.Name,=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.2825497174829812, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.2942142070429275, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes,=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.2954265382715723, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.2971695010333137, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Artist.Name,=,Maquinarama), Track.TrackId),Track.Bytes)", "score": -0.31181113664506793, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Artist.Name,=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.3285867481722314, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Artist.Name,=,Maquinarama), Track.TrackId),Track.Bytes)", "score": -0.337913170247612, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.3455695998132485, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Name,=,Maquinarama), Track.TrackId),Track.Bytes)", "score": -0.3505237659729701, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3512470977459974, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(Album),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Artist.Name,=,Maquinarama), Track.TrackId),Track.Bytes)", "score": -0.35157770668823096, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Bytes,>=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.36126985034449066, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.4050124010645396, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 139, "beams": [{"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.09767874443541341, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.14220235153481986, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.18475703117174327, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.TrackId),Track.Milliseconds)", "score": -0.19167904858931673, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.TrackId),Track.Milliseconds)", "score": -0.22051082443396156, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.24667075200360755, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.27541418771984755, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.TrackId),Track.Milliseconds)", "score": -0.28224791674856803, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.282494416764448, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.28364302599443125, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.TrackId),Track.Milliseconds)", "score": -0.28884918889633715, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.TrackId),Track.Milliseconds)", "score": -0.30412365194696855, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3097022398406621, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.TrackId),Track.Milliseconds)", "score": -0.3250428413057297, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of the tracks in the Grunge playlist?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.36623804690596234, "correct_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 140, "beams": [{"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Track),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.2443557339585027, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,!=,Mike Dirnt/Tr\u00e9 Cool),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.26943643182831956, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(merge(filter(merge(filter(getData(Track),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<,Mike Dirnt/Tr\u00e9 Cool),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2695470951534341, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28478523020782914, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Track),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.2959375021325655, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.29879690164423883, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Track),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)", "score": -0.3030341082253788, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,1),InvoiceLine.UnitPrice,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3108600484790253, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(merge(filter(merge(filter(getData(Track),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3281300273721615, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(merge(filter(merge(filter(getData(Track),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.33371873954371384, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(filter(merge(merge(filter(getData(Track),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.33425473141094836, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.3344881680138534, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,!=,Mike Dirnt/Tr\u00e9 Cool),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.3345168372426028, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,Mike Dirnt/Tr\u00e9 Cool),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.35084182496395194, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of invoices of tracks not composed by \"Mike Dirnt/Tr\u00e9 Cool\" and with a quantity for invoice less than 1 ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<,Mike Dirnt/Tr\u00e9 Cool),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.35686511271862387, "correct_code": "sum(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Mike Dirnt/Tr\u00e9 Cool), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 141, "beams": [{"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.07715887733896758, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.14219703182699378, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.14234554685370057, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))", "score": -0.149917218460287, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.15124079414911132, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))", "score": -0.23760196179383705, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.23951453740402892, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2583180076233323, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))", "score": -0.2935787494054463, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3087092127392103, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes,=,TV Shows), Genre.Name),Genre.Name))", "score": -0.3162161943384317, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Track.Name,=,TV Shows), Genre.Name),Genre.Name))", "score": -0.3227098770809492, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))", "score": -0.3376921638098905, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3510296224803251, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genres on tracks of the playlist named \"TV Shows\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3554870056978249, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 142, "beams": [{"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.03340130811783583, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.47387891070868854, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.7111750796797262, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.LastName))", "score": -0.7660667378898657, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Genre.Name))", "score": -0.8317190431712371, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Artist),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.8398331726639299, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.8523772579804451, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -0.8544664630214147, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Artist.Name))", "score": -0.9372755544035671, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.FirstName))", "score": -0.9674720563053433, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Track.Name))", "score": -1.025965692303534, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Genre), Artist.Name),Artist.Name))", "score": -1.0898288816467983, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -1.100693297762307, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.Title))", "score": -1.111638335401556, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Artist),Artist.Name,=,None), Artist.Name),Employee.LastName))", "score": -1.127102876707795, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 143, "beams": [{"orig_question": "On which dates have orders from Madison been placed?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Madison), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.19697380604429782, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Madison), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates have orders from Madison been placed?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,Madison), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.23345936628265918, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Madison), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates have orders from Madison been placed?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,Madison), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.30535057725592196, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Madison), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates have orders from Madison been placed?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,Madison), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3418361374942833, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Madison), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates have orders from Madison been placed?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Madison), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.39018870683594287, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Madison), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates have orders from Madison been placed?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,Madison), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4093233698813492, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Madison), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates have orders from Madison been placed?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,Madison), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.44580893011971057, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Madison), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates have orders from Madison been placed?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Madison),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4710881678188387, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Madison), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates have orders from Madison been placed?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,Madison), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.48815867843313754, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Madison), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates have orders from Madison been placed?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,Madison), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.498565478047567, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Madison), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates have orders from Madison been placed?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,Madison), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5246442386714989, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Madison), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates have orders from Madison been placed?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Madison),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5317650945353174, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Madison), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates have orders from Madison been placed?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,Madison), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5331799241601869, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Madison), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates have orders from Madison been placed?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,=,Madison), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.6021239885894829, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Madison), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates have orders from Madison been placed?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,<=,Madison), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.6025382706729943, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Madison), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 144, "beams": [{"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.1538335373835319, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.Bytes),Track.Name))", "score": -0.19948231110218104, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.2275123434119878, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)", "score": -0.2377088691990599, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.24079166771329544, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.24350655618169045, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.26831619855290073, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Track.Bytes),Track.Name))", "score": -0.27924408912887144, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)", "score": -0.2870441313238017, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(min(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.Name))", "score": -0.3002836880322519, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.Bytes),Track.Bytes))", "score": -0.3054281227435441, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Track.Name))", "score": -0.3250651176350685, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.Name),Track.Name))", "score": -0.3567806278071252, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Track.Bytes),Track.Bytes))", "score": -0.38102605707621684, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}, {"orig_question": "How big are all tracks together from the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Bytes),Track.Name))", "score": -0.38228210901062315, "correct_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 145, "beams": [{"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.18813824432506204, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,2003-05-03 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2286544679376999, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.23114359543573704, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,2003-05-03 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.23277553934512496, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,2003-05-03 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2404819078337766, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,!=,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.24118135808762892, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,2003-05-03 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2505481595001835, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.HireDate,<,2003-05-03 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2513431069100925, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Fax,!=,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.2707167085371946, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.2753933428450441, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.Country,<,2003-05-03 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.27573969600643133, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,!=,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.27912611833719003, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.27930192704366336, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,!=,2003-05-03 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.28183309776598636, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by our employees hired later than 2003-05-03?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.HireDate,!=,2003-05-03 00:00:00), Track.TrackId),Track.Milliseconds)", "score": -0.284025132780899, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,>,2003-05-03 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 146, "beams": [{"orig_question": "What are the addresses of the customers who works for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,JetBrains s.r.o.), Customer.Address),Customer.Address))", "score": -0.14039005540689686, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers who works for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,=,JetBrains s.r.o.), Customer.Address),Customer.Address))", "score": -0.26913032670718107, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers who works for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,=,JetBrains s.r.o.), Customer.Address),Customer.Address))", "score": -0.28217220237554363, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers who works for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,JetBrains s.r.o.), Customer.Address),Customer.Address))", "score": -0.3111116247608892, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers who works for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,=,JetBrains s.r.o.), Customer.Address),Customer.Address))", "score": -0.3230820449166452, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers who works for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCity,=,JetBrains s.r.o.),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.3286716804262848, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers who works for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,JetBrains s.r.o.), Customer.Address),Customer.Address))", "score": -0.35202146730199085, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers who works for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,JetBrains s.r.o.), Customer.Address),Customer.Address))", "score": -0.35243495099532046, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers who works for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,=,JetBrains s.r.o.), Customer.Address),Customer.Address))", "score": -0.3542872167724834, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers who works for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,JetBrains s.r.o.), Customer.Address),Customer.Address))", "score": -0.3558930576065109, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers who works for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.Quantity,=,JetBrains s.r.o.), Customer.Address),Customer.Address))", "score": -0.37515912181061184, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers who works for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,JetBrains s.r.o.), Customer.Address),Customer.Address))", "score": -0.37555099107703427, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers who works for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,=,JetBrains s.r.o.), Customer.Address),Customer.Address))", "score": -0.37562132957248817, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers who works for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,JetBrains s.r.o.), Customer.Address),Customer.Address))", "score": -0.3832266491256479, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers who works for JetBrains s.r.o.?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),InvoiceLine.UnitPrice,=,JetBrains s.r.o.), Customer.Address),Customer.Address))", "score": -0.39281333066901425, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,JetBrains s.r.o.), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 147, "beams": [{"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.02437981703543597, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.5064245945377073, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.5249049174672256, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.5326399670756884, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.5511202900052067, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Album),Artist.ArtistId,Track.GenreId),getData(Artist),Album.ArtistId,Artist.ArtistId),Genre.Name,=,None), Artist.Name),Artist.Name))", "score": -0.5691845860588332, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Customer.CustomerId),Genre.Name,=,None), Artist.Name),Artist.Name))", "score": -0.5936904034973866, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Album),Artist.ArtistId,PlaylistTrack.PlaylistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Genre.Name,=,None), Artist.Name),Artist.Name))", "score": -0.6025077311475303, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.605194011840517, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.6216914575596368, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.623674472104429, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Album),Artist.ArtistId,Customer.CustomerId),getData(Artist),Album.ArtistId,Artist.ArtistId),Genre.Name,=,None), Artist.Name),Artist.Name))", "score": -0.6437608710472832, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Genre.Name,=,None),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.6600649454325977, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Genre.GenreId),Genre.Name,=,None), Artist.Name),Artist.Name))", "score": -0.6647209411422642, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(getData(Artist),Employee.FirstName,=,None), Artist.Name),Artist.Name))", "score": -0.7327288198866881, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 148, "beams": [{"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.21826163041827126, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(Album),Artist.ArtistId,Album.ArtistId),Playlist.Name,=,Protected MPEG-4 video file),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.24693811468781232, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.28342837730235454, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Protected MPEG-4 video file),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2867707977479474, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.2900195000794941, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.3021135189744011, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.3088179094001811, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.3092089668708288, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(Album),Artist.ArtistId,Album.ArtistId),MediaType.Name,=,Protected MPEG-4 video file),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3346480453298039, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.33470721574149676, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(Album),Artist.ArtistId,Album.ArtistId),Track.Name,=,Protected MPEG-4 video file),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.33782380142651963, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Protected MPEG-4 video file),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3407931641921217, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.35427567894262363, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.35518624696357737, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(Album),Artist.ArtistId,Album.ArtistId),Playlist.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Track.AlbumId), Artist.Name),Artist.Name))", "score": -0.37857430450992313, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 149, "beams": [{"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.0551086784034851, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.23784400976001052, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.4812183574467781, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,>,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.48917384247033624, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.5148910478383186, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.LastName))", "score": -0.5256828324563685, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,2003-05-03 00:00:00), Employee.LastName),Employee.FirstName))", "score": -0.5379964195817593, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.5585047084841863, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Employee.City,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.5695844220646009, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Employee.BirthDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.6057892414433583, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.6105171338349464, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,<,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.6598756144448998, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.6719091738268617, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.6887287989884499, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.LastName))", "score": -0.7084181638128939, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 150, "beams": [{"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.City),Customer.City))", "score": -0.13059296727442415, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Email),Customer.City))", "score": -0.31131734967493685, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Company),Customer.City))", "score": -0.32518951118254336, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.City),Customer.Company))", "score": -0.3309753266003099, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.City),Customer.Email))", "score": -0.38794240623974474, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Fax),Customer.City))", "score": -0.440783153178927, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.City),Customer.Fax))", "score": -0.4816286292698351, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Email),Customer.Company))", "score": -0.5116997090008226, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,None), Customer.City),Customer.City))", "score": -0.5231811179619399, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Company),Customer.Company))", "score": -0.5255718705084291, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,None), Customer.City),Customer.City))", "score": -0.5322333698932198, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.City),Album.Title))", "score": -0.5362903800632921, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Email),Customer.Email))", "score": -0.5686667886402574, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Company),Customer.Email))", "score": -0.5825389501478639, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the customers' email addresses?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.City),Customer.Country))", "score": -0.5965651896622148, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 151, "beams": [{"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,14234427),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2337693117909554, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,Milton Nascimento, Caetano Veloso),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24587316986692015, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Milliseconds,>,14234427),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2562775503353377, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)", "score": -0.2664111110732074, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2744850419569772, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,14234427), Invoice.InvoiceId),Invoice.Total)", "score": -0.283405155048054, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2841337541707468, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)", "score": -0.28639269205706597, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)", "score": -0.30387981327599717, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)", "score": -0.3060102336386141, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,Milton Nascimento, Caetano Veloso),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.31049534155953457, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>,Milton Nascimento, Caetano Veloso),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3187121021750859, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>,14234427),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3308159663475048, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,Milton Nascimento, Caetano Veloso), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.33424777168543407, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,Milton Nascimento, Caetano Veloso), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.337235308694446, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 152, "beams": [{"orig_question": "To which addresses were invoices issued that contain tracks composed by K.Hammett?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,K.Hammett),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.14666674769838234, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices issued that contain tracks composed by K.Hammett?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.22831318321341243, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices issued that contain tracks composed by K.Hammett?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.24421565250952457, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices issued that contain tracks composed by K.Hammett?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.26435802637747996, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices issued that contain tracks composed by K.Hammett?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,K.Hammett),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingCountry))", "score": -0.27924763685986076, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices issued that contain tracks composed by K.Hammett?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,K.Hammett),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.28867684728491555, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices issued that contain tracks composed by K.Hammett?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,K.Hammett),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2898030893787454, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices issued that contain tracks composed by K.Hammett?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,K.Hammett),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.29643402407446334, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices issued that contain tracks composed by K.Hammett?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,K.Hammett),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2976221097203124, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices issued that contain tracks composed by K.Hammett?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.31175059904815333, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices issued that contain tracks composed by K.Hammett?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,K.Hammett),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.32153792902278805, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices issued that contain tracks composed by K.Hammett?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,K.Hammett),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingPostalCode))", "score": -0.3306860479092324, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices issued that contain tracks composed by K.Hammett?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,K.Hammett),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3399309581814603, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices issued that contain tracks composed by K.Hammett?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,K.Hammett),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3450790938379924, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses were invoices issued that contain tracks composed by K.Hammett?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,K.Hammett),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.35244861688258816, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,K.Hammett), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 153, "beams": [{"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,United Kingdom),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3914042720625393, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,United Kingdom),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.40432140911521125, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Customer),Customer.State,=,United Kingdom),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.40524491384071043, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Customer),Customer.Email,=,United Kingdom),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.41076011743207413, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Customer),Customer.Address,=,United Kingdom),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.42694909988873103, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,United Kingdom),getData(InvoiceLine),Invoice.InvoiceId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4278578151345554, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,United Kingdom),getData(InvoiceLine),Invoice.InvoiceId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.429031209014407, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,United Kingdom),getData(InvoiceLine),Invoice.InvoiceId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.44535928788647705, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,United Kingdom),getData(InvoiceLine),Invoice.InvoiceId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4465326816106791, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Invoice.BillingCountry,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.45991770495446077, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Invoice.BillingCountry,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4794121012690859, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId),Customer.CustomerId,Invoice.CustomerId),Invoice.BillingCountry,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.48737625681991786, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Invoice.BillingCountry,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4910612383295999, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.CustomerId,Invoice.CustomerId),Invoice.BillingCountry,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4990253938804319, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average invoice line quality of customers living in the United Kingdom?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Invoice.BillingCountry,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5102664440629392, "correct_code": "avg(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Customer.Country,=,United Kingdom), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 154, "beams": [{"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,Joakim), Customer.Fax),Customer.Fax))", "score": -0.4265328305100411, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,Joakim), Customer.Fax),Customer.Company))", "score": -0.45998069218148885, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,Joakim), Customer.Fax),Customer.Email))", "score": -0.4666481869553536, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,Joakim), Customer.Fax),Customer.Country))", "score": -0.49082931450357137, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,Joakim), Customer.Country),Customer.Fax))", "score": -0.493781651768586, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,Joakim), Customer.Company),Customer.Fax))", "score": -0.5227933781479805, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,Joakim), Customer.Country),Customer.Company))", "score": -0.5272295134400338, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Joakim), Customer.Fax),Customer.Fax))", "score": -0.5316814439629525, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,Joakim), Customer.Country),Customer.Email))", "score": -0.5338970082138985, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,Joakim), Customer.Company),Customer.Company))", "score": -0.5562412398194283, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,Joakim), Customer.Country),Customer.Country))", "score": -0.5580781357621163, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,Joakim), Customer.Fax),Customer.FirstName))", "score": -0.5626049893235177, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,Joakim), Customer.Company),Customer.Email))", "score": -0.562908734593293, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Joakim), Customer.Fax),Customer.Company))", "score": -0.5651293056344002, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,Joakim), Customer.Email),Customer.Fax))", "score": -0.5695181744431466, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 155, "beams": [{"orig_question": "What are the addressed of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.1730026790573622, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addressed of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Email),Customer.Address))", "score": -0.2235839890744984, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addressed of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.2450257244150462, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addressed of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Address))", "score": -0.24973493114322737, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addressed of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Email),Customer.Email))", "score": -0.27329198676476424, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addressed of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.State),Customer.Address))", "score": -0.2800475276069401, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addressed of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Email),Customer.City))", "score": -0.2873084944586236, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addressed of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.City))", "score": -0.2884974219665982, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addressed of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.LastName),Customer.Address))", "score": -0.2898056605395562, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addressed of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Email))", "score": -0.2934242711855659, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addressed of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Email))", "score": -0.294733722105312, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addressed of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.City))", "score": -0.3087502297991714, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addressed of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.3246809552844341, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addressed of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.State),Customer.Email))", "score": -0.3297555252972059, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addressed of customers that purchased tracks that do not cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Email),Customer.Address))", "score": -0.3429562978837351, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 156, "beams": [{"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Hip Hop/Rap),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.21794193407644633, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Hip Hop/Rap),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.2553652816581621, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Composer,=,Hip Hop/Rap),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.26613613497045574, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Hip Hop/Rap),getData(Track),InvoiceLine.TrackId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.293313388387888, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Hip Hop/Rap),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3000552090811311, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Composer,=,Hip Hop/Rap),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.31917703750957527, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Composer,=,Hip Hop/Rap),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.32818356090955936, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.Composer,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))", "score": -0.33005540289518265, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Composer,=,Hip Hop/Rap),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.33332219651922684, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Composer,=,Hip Hop/Rap),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3374785566628468, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Album.AlbumId),Track.Composer,=,Hip Hop/Rap),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.340183574412061, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.Composer,=,Hip Hop/Rap),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3428934035044774, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,InvoiceLine.TrackId),Track.Composer,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))", "score": -0.37038160527456204, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Album.AlbumId),Track.Composer,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))", "score": -0.37297291921546083, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest Hip Hop/Rap track?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Composer,=,Hip Hop/Rap),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.TrackId),Track.Milliseconds),Album.Title))", "score": -0.37432897956007083, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Hip Hop/Rap),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 157, "beams": [{"orig_question": "How many times have orders been made for tracks from the genre Easy Listening?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.InvoiceId),Invoice.Total)", "score": -0.26605877184688803, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have orders been made for tracks from the genre Easy Listening?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Easy Listening), Invoice.InvoiceId),Invoice.Total)", "score": -0.27131097730277376, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have orders been made for tracks from the genre Easy Listening?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.InvoiceId),Invoice.Total)", "score": -0.27278589991027247, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have orders been made for tracks from the genre Easy Listening?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.Total))", "score": -0.2865169859022169, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have orders been made for tracks from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))", "score": -0.29420852893925753, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have orders been made for tracks from the genre Easy Listening?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))", "score": -0.29499509828740733, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have orders been made for tracks from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.Total))", "score": -0.2959821038025199, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have orders been made for tracks from the genre Easy Listening?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))", "score": -0.30405105311824593, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have orders been made for tracks from the genre Easy Listening?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3056095511888549, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have orders been made for tracks from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))", "score": -0.31171366213040164, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have orders been made for tracks from the genre Easy Listening?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.31684558695509085, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have orders been made for tracks from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),Invoice.Total))", "score": -0.3190875259663973, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have orders been made for tracks from the genre Easy Listening?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),Invoice.Total))", "score": -0.32266314470207874, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have orders been made for tracks from the genre Easy Listening?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.BillingState),Invoice.Total))", "score": -0.32417734133942544, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many times have orders been made for tracks from the genre Easy Listening?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Easy Listening), Invoice.BillingState),Invoice.Total))", "score": -0.3263822065819696, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 158, "beams": [{"orig_question": "What's the invoice total sum for songs that also feature on the \"90\u2019s Music\" playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.11674197624637683, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the invoice total sum for songs that also feature on the \"90\u2019s Music\" playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.13835496695428448, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the invoice total sum for songs that also feature on the \"90\u2019s Music\" playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.15094861185267536, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the invoice total sum for songs that also feature on the \"90\u2019s Music\" playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1574349263297063, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the invoice total sum for songs that also feature on the \"90\u2019s Music\" playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1758553272066715, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the invoice total sum for songs that also feature on the \"90\u2019s Music\" playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)", "score": -0.17949551283543785, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the invoice total sum for songs that also feature on the \"90\u2019s Music\" playlist?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.18907296408970015, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the invoice total sum for songs that also feature on the \"90\u2019s Music\" playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1904226886457215, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the invoice total sum for songs that also feature on the \"90\u2019s Music\" playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u2019s Music), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2100563451151304, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the invoice total sum for songs that also feature on the \"90\u2019s Music\" playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)", "score": -0.21650412750041526, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the invoice total sum for songs that also feature on the \"90\u2019s Music\" playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)", "score": -0.2267544297941005, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the invoice total sum for songs that also feature on the \"90\u2019s Music\" playlist?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23647858058005122, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the invoice total sum for songs that also feature on the \"90\u2019s Music\" playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Invoice.InvoiceId),Invoice.Total)", "score": -0.24359203689457926, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the invoice total sum for songs that also feature on the \"90\u2019s Music\" playlist?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24477697014444383, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the invoice total sum for songs that also feature on the \"90\u2019s Music\" playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u2019s Music), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2495247529841911, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 159, "beams": [{"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.Name),Track.Name))", "score": -0.10416736315536891, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.Name),Track.Name))", "score": -0.1522652040230908, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.Bytes),Track.Name))", "score": -0.20115414791098502, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.2550802820427744, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)", "score": -0.2685429270561203, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.Bytes),Track.Name))", "score": -0.2866878227148841, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim),Track.Bytes),Track.Name))", "score": -0.29014044839009573, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)", "score": -0.2903835677449372, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.29684559654356923, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.34677784091043257, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim),Track.UnitPrice),Track.Name))", "score": -0.34840808239886967, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.Name),Track.Name))", "score": -0.35157795480959236, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.387081066896987, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.3967107016319667, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}, {"orig_question": "How larger are all the tracks from the artists Ant\u00c3\u00b4nio Carlos Jobim?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Milliseconds)", "score": -0.3973270386181648, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ant\u00c3\u00b4nio Carlos Jobim), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 160, "beams": [{"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.056295963334889676, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.13153288072221933, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.15652329195201387, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.16277321123704006, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.20567828197905633, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.21627593738273046, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.23724001529016228, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.27354899882235245, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.2923296048831012, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3013408035111551, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.31316925161339, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3259785970602194, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3344303972751104, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Track.GenreId))", "score": -0.38532342271933895, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.3958090157068427, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 161, "beams": [{"orig_question": "How many albums are there where a track unit price is 1.99 or less?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.255583786060015, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums are there where a track unit price is 1.99 or less?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.2595424221429896, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums are there where a track unit price is 1.99 or less?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.26541651029558233, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums are there where a track unit price is 1.99 or less?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<,1.99), Album.Title),Album.Title))", "score": -0.2786795613521547, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums are there where a track unit price is 1.99 or less?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.28744968256446174, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums are there where a track unit price is 1.99 or less?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.29600384794076784, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums are there where a track unit price is 1.99 or less?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<,1.99), Album.Title),Album.Title))", "score": -0.3260644401996902, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums are there where a track unit price is 1.99 or less?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.327653553508057, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums are there where a track unit price is 1.99 or less?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.3294606178596596, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums are there where a track unit price is 1.99 or less?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,<=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.33426878158350937, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums are there where a track unit price is 1.99 or less?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.3431379893439279, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums are there where a track unit price is 1.99 or less?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3521151591228862, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums are there where a track unit price is 1.99 or less?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.35824089115324254, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums are there where a track unit price is 1.99 or less?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3607500036067083, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))"}, {"orig_question": "How many albums are there where a track unit price is 1.99 or less?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<=,1.99),getData(Track),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3639227339858444, "correct_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 162, "beams": [{"orig_question": "What is the average quantity on orders of Rock and Roll tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.12926023889085123, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on orders of Rock and Roll tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.14008580374427818, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on orders of Rock and Roll tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.1634454388285517, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on orders of Rock and Roll tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.25584180383138116, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on orders of Rock and Roll tracks?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2638344451846312, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on orders of Rock and Roll tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2774886061529164, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on orders of Rock and Roll tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3230991070620002, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on orders of Rock and Roll tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.34087601306129156, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on orders of Rock and Roll tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.36030172496996926, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on orders of Rock and Roll tracks?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3637791823825092, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on orders of Rock and Roll tracks?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.36814634328455775, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on orders of Rock and Roll tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3735594476572718, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on orders of Rock and Roll tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,!=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3769402848049223, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on orders of Rock and Roll tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.379993421910613, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on orders of Rock and Roll tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.38226850970878196, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 163, "beams": [{"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.1864230249175631, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.19947905573847594, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.20241487046178594, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.BillingState),Invoice.BillingState))", "score": -0.2044048715750442, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.20574694716511002, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.2080427404436109, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.2095465918508554, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.21880297798602283, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.24213019492712626, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.25052685723288975, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.2564470352742003, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))", "score": -0.25879549946016217, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.260022493913215, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - The Basics),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.BillingState),Invoice.BillingState))", "score": -0.26004990815519036, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which states have sales of tracks that aren't in the playlist with the name Classical 101 - The Basics been made?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - The Basics),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingState))", "score": -0.2648437053426636, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,!=,Classical 101 - The Basics), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 164, "beams": [{"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Scorpions),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.16343770716738917, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId),Genre.Name,=,Scorpions), Genre.Name),Genre.Name))", "score": -0.1648323461286296, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Scorpions),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.18439230076126506, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Scorpions),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2206524285386196, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId),Artist.Name,=,Scorpions), Genre.Name),Genre.Name))", "score": -0.23370304590897806, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Scorpions),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.2420431128467713, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Artist.Name,=,Scorpions),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.2695378527240665, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,=,Scorpions), Genre.Name),Genre.Name))", "score": -0.2925923706473568, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Artist.Name,=,Scorpions),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2986059331100297, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Scorpions),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3127336495045484, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Album.AlbumId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,=,Scorpions), Genre.Name),Genre.Name))", "score": -0.32501122191603155, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Artist.Name,=,Scorpions),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.3271886648095727, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Artist.Name,=,Scorpions),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.330896529797868, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Scorpions),getData(Track),Album.AlbumId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.34564055980150615, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "In what genres are the albums of Scorpions?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Genre.GenreId),Genre.Name,=,Scorpions), Genre.Name),Genre.Name))", "score": -0.3462205663388915, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scorpions),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 165, "beams": [{"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.026081718332941036, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.5678717799837953, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.5822490385487386, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.6116517474354713, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.6260290060004146, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.6304470433962853, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.63326608656217, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Genre.Name,=,None),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.7082734907277397, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Genre.GenreId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.7195733225451414, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.7226507492926829, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(filter(getData(Artist),Employee.FirstName,=,None), Artist.Name),Artist.Name))", "score": -0.7257266982633155, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Genre.GenreId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.7339505811100846, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Employee.EmployeeId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.745488507572072, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.7519970525073946, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Genre.Name,=,None),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.7520534304910299, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 166, "beams": [{"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,Riotur), Customer.State),Customer.State))", "score": -0.09308003109799756, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Riotur), Customer.State),Customer.State))", "score": -0.2287509314428462, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Riotur), Customer.State),Customer.State))", "score": -0.3309714220176829, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Email,=,Riotur), Customer.State),Customer.State))", "score": -0.46974503655837907, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Riotur), Customer.State),Customer.State))", "score": -0.47865149599419965, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,Riotur), Customer.State),Employee.State))", "score": -0.4854333236526145, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,Riotur), Customer.State),Customer.State))", "score": -0.511869402946104, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Riotur), Customer.State),Customer.State))", "score": -0.5504992328296794, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))", "score": -0.575468035758604, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Riotur), Customer.State),Customer.State))", "score": -0.6013643465648784, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.LastName,=,Riotur), Customer.State),Customer.State))", "score": -0.6054159369032277, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Riotur), Customer.State),Employee.State))", "score": -0.6211042239974631, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Album.Title,=,Riotur), Customer.State),Customer.State))", "score": -0.6313613377224101, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Email,=,Riotur), Customer.State),Customer.State))", "score": -0.637320081681537, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Riotur), Customer.State),Customer.State))", "score": -0.6438563348438038, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 167, "beams": [{"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.17104553592524444, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Email),Customer.Email))", "score": -0.29572609890965396, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.City))", "score": -0.43862577666302527, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.Email))", "score": -0.4432025366835137, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Email),Customer.Email))", "score": -0.4500637356122752, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.State,=,None), Customer.Email),Customer.Email))", "score": -0.4744153403189557, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.5438222174802075, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.City),Customer.Email))", "score": -0.5832373340126651, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Email),Customer.City))", "score": -0.5978240099248069, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,None), Customer.Email),Customer.Email))", "score": -0.6114261526545306, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Album.Title))", "score": -0.6489880564425576, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -0.7107827774212946, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.City),Customer.Email))", "score": -0.7214028056641837, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Email),Album.Title))", "score": -0.7399486627873557, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer email does exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Company),Customer.Email))", "score": -0.7582273826446908, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 168, "beams": [{"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Name),Track.Name))", "score": -0.16394760445109569, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,1.99), Track.Name),Track.Name))", "score": -0.3094566015934106, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,1.99), Track.Name),Track.Name))", "score": -0.32010854766122065, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Bytes),Track.Name))", "score": -0.39796201125136577, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.UnitPrice),Track.Name))", "score": -0.4918048752879258, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Name))", "score": -0.5322332455252763, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,1.99),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,InvoiceLine.TrackId), Track.Milliseconds),Track.Name))", "score": -0.5348690807028512, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Milliseconds),Track.Name))", "score": -0.5415036155318376, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,1.99), Track.Bytes),Track.Name))", "score": -0.5434710083936807, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,1.99),getData(Track),Track.AlbumId,InvoiceLine.TrackId), Track.Bytes),Track.Name))", "score": -0.5458629450337898, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>,1.99), Track.Name),Track.Name))", "score": -0.5535128105839249, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,1.99),getData(Track),Track.AlbumId,Album.AlbumId), Track.Bytes),Track.Name))", "score": -0.5549376473502066, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,1.99),getData(Track),Track.AlbumId,Track.TrackId), Track.Bytes),Track.Name))", "score": -0.56459159291268, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,1.99),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId), Track.Bytes),Track.Name))", "score": -0.5672317004345752, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}, {"orig_question": "Whose tracks cost more than 1.99 each? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,1.99),getData(Track),Track.AlbumId,InvoiceLine.TrackId), Track.UnitPrice),Track.Name))", "score": -0.5733240313394454, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 169, "beams": [{"orig_question": "What is the birthday of our employee from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,=,Edmonton), Employee.BirthDate),Employee.BirthDate))", "score": -0.3890511087615414, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthday of our employee from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.BirthDate),Employee.State))", "score": -0.3905936837254558, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthday of our employee from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.BirthDate),Employee.BirthDate))", "score": -0.39077953100786544, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthday of our employee from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,=,Edmonton), Employee.BirthDate),Employee.Address))", "score": -0.4290589744467445, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthday of our employee from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,=,Edmonton), Employee.BirthDate),Employee.State))", "score": -0.4306648122204483, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthday of our employee from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.BirthDate),Employee.Country))", "score": -0.4422707915364299, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthday of our employee from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.BirthDate),Employee.Address))", "score": -0.46213660240755416, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthday of our employee from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.City,=,Edmonton), Employee.BirthDate),Employee.BirthDate))", "score": -0.4704265037900887, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthday of our employee from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Country),Employee.State))", "score": -0.4779415339289699, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthday of our employee from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Country),Employee.BirthDate))", "score": -0.47812738121137954, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthday of our employee from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,=,Edmonton), Employee.BirthDate),Employee.Email))", "score": -0.48143983612684516, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthday of our employee from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.EmployeeId),Employee.City,=,Edmonton), Employee.BirthDate),Employee.BirthDate))", "score": -0.48285429399295365, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthday of our employee from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Address),Employee.State))", "score": -0.48346652687177993, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthday of our employee from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.Address),Employee.BirthDate))", "score": -0.4836523741541896, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthday of our employee from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.State),Employee.State))", "score": -0.49278596640215255, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Edmonton), Employee.BirthDate),Employee.BirthDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 170, "beams": [{"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,1.99),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2917916801937192, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,1.99),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3106635922108926, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),getData(Track),Track.GenreId,Genre.GenreId),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.3394791552607059, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),Track.UnitPrice,<,1.99),getData(Track),Track.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3437657420708375, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.3478478687975439, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),getData(Track),Track.GenreId,Genre.GenreId),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.362593149489891, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.Milliseconds),getData(Track),Track.GenreId,Genre.GenreId),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.37874708538400953, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.GenreId,Genre.GenreId),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.38703166306288594, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99),getData(Track),Track.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.39632862498413207, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),Track.UnitPrice,<,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3985604993758986, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Track.TrackId,Track.Milliseconds),getData(Track),Track.GenreId,Genre.GenreId),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.4018611197613541, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,<,1.99),getData(InvoiceLine),Track.TrackId,Track.Milliseconds),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.40437110839756485, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,<,1.99),getData(Track),Track.TrackId,Track.Milliseconds),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.41102237907050876, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),Track.UnitPrice,<,1.99),getData(Track),Track.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.41345925871961087, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<,1.99),getData(InvoiceLine),Track.TrackId,Track.Milliseconds),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.42389991380059083, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 171, "beams": [{"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))", "score": -0.03803208056342555, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,Canada), Employee.Phone),Employee.Phone))", "score": -0.3473654012705083, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.FirstName),Employee.Phone))", "score": -0.4376590406100149, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Country),Employee.Phone))", "score": -0.4478868698279257, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,Canada), Employee.Phone),Employee.Phone))", "score": -0.46954335975897266, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Country,=,Canada),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Phone),Employee.Phone))", "score": -0.4878891634950448, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Phone),Employee.Phone))", "score": -0.5128850857213758, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,Canada), Employee.Phone),Employee.Phone))", "score": -0.5608538608576055, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Country,=,Canada),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.EmployeeId), Employee.Phone),Employee.Phone))", "score": -0.5934063522789743, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Country,=,Canada),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId), Employee.Phone),Employee.Phone))", "score": -0.6115318718026792, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.FirstName))", "score": -0.6232699291358585, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Employee),Employee.EmployeeId,Employee.EmployeeId), Employee.Phone),Employee.Phone))", "score": -0.6306811310960101, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Canada), Employee.Phone),Employee.Phone))", "score": -0.6865796070123906, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Canada), Employee.Phone),Employee.Phone))", "score": -0.7137362580324407, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Customer.Phone))", "score": -0.7272113697181339, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 172, "beams": [{"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,LOST, Season 4),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.26118853938827646, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,LOST, Season 4),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.27091047655092626, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,InvoiceLine.TrackId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.27474881681282715, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,LOST, Season 4),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2907817896012458, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.29368102186205347, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),InvoiceLine.UnitPrice,=,LOST, Season 4),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3008080301047821, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,LOST, Season 4),getData(Track),Album.AlbumId,InvoiceLine.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3050124314344128, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3084867206304188, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,LOST, Season 4),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.31282287124051494, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,LOST, Season 4),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.313152046822399, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,LOST, Season 4),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3213757957410442, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,LOST, Season 4),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.32254480840316474, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(filter(getData(Track),Track.Name,=,LOST, Season 4),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,InvoiceLine.TrackId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3393907968493982, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,LOST, Season 4),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.35468037259771495, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.36440887646178227, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 173, "beams": [{"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Album),Album.Title,!=,One By One),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Track.Name))", "score": -0.3784074013391554, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Album.Title,!=,One By One),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Track.Name))", "score": -0.415125124806658, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Album),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Track.Name))", "score": -0.42556793020120826, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Album),Album.Title,!=,One By One),getData(Track),InvoiceLine.TrackId,Track.AlbumId),getData(Track),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Track.Name))", "score": -0.4285534868846574, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),getData(Track),Track.AlbumId,Album.AlbumId),Album.Title,!=,One By One),Track.UnitPrice),Track.Name))", "score": -0.4565626915492858, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Album),Album.Title,!=,One By One),getData(Track),Album.AlbumId,Album.ArtistId),getData(Track),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Track.Name))", "score": -0.4581200534234979, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,!=,One By One),Track.UnitPrice),Track.Name))", "score": -0.4581698052038073, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood),Track.UnitPrice),Track.Name))", "score": -0.4650682530770961, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Album),Album.Title,!=,One By One),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Track.Name))", "score": -0.4732714511609576, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood),Track.UnitPrice),Track.Name))", "score": -0.49260260728172645, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Album.Title,!=,One By One),Track.UnitPrice),Track.Name))", "score": -0.4957910378754851, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood),Track.UnitPrice),Track.Name))", "score": -0.5038791443063849, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Album),Album.Title,!=,One By One),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Track.AlbumId,Track.AlbumId),Track.UnitPrice),Track.Name))", "score": -0.5089548883964858, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Album.Title),Track.Name))", "score": -0.5347513165609432, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Album.Title),Track.Name))", "score": -0.5394676033586318, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 174, "beams": [{"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,Margaret), Invoice.InvoiceId),Invoice.Total)", "score": -0.16769143148231322, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,Margaret), Invoice.InvoiceId),Invoice.Total)", "score": -0.2299286693883442, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T6G 2C7), Invoice.InvoiceId),Invoice.Total)", "score": -0.24081908710853378, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,Margaret),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24092594931687056, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,Margaret), Invoice.InvoiceId),Invoice.Total)", "score": -0.24525838618803059, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T6G 2C7),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2513553486450481, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.PostalCode,=,Margaret),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2542555982275998, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T6G 2C7), Invoice.InvoiceId),Invoice.Total)", "score": -0.25614880390822015, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T6G 2C7), Invoice.InvoiceId),Invoice.Total)", "score": -0.2647574409881288, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T6G 2C7), Invoice.InvoiceId),Invoice.Total)", "score": -0.27195863555088495, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Invoice.BillingPostalCode,=,T6G 2C7), Invoice.InvoiceId),Invoice.Total)", "score": -0.3060480251956067, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.PostalCode,=,Margaret),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.33903062265648504, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,Margaret), Invoice.InvoiceId),Invoice.Total)", "score": -0.34352083776662307, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.357803943286615, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices sent by an employee with the first name Margaret to a customer with the postal code T6G 2C7?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,Margaret), Invoice.Total),Invoice.Total)", "score": -0.3597028125665423, "correct_code": "avg(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,T6G 2C7),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 175, "beams": [{"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2009-12-26 00:00:00), Customer.State),Customer.State))", "score": -0.35808443846897337, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2009-12-26 00:00:00), Customer.State),Employee.State))", "score": -0.3718139793022351, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2009-12-26 00:00:00), Customer.State),Invoice.BillingState))", "score": -0.3739166397502099, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2009-12-26 00:00:00),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.3960776721545783, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2009-12-26 00:00:00), Customer.State),Customer.State))", "score": -0.4059029275503837, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2009-12-26 00:00:00), Invoice.BillingState),Customer.State))", "score": -0.41117128753490884, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2009-12-26 00:00:00), Customer.State),Employee.State))", "score": -0.4196324683836455, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2009-12-26 00:00:00), Customer.State),Invoice.BillingState))", "score": -0.4217351288316203, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2009-12-26 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.4249008283681706, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.4270034888161454, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2009-12-26 00:00:00), Customer.State),Invoice.BillingState))", "score": -0.45172025904274016, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Employee),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2009-12-26 00:00:00), Customer.State),Customer.State))", "score": -0.45188272839377575, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2009-12-26 00:00:00),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Customer.State))", "score": -0.45462155962824347, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,2009-12-26 00:00:00), Invoice.BillingState),Customer.State))", "score": -0.45898977661631923, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "In which state did invoices that were issued on December 26th 2009 go to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,=,2009-12-26 00:00:00), Customer.State),Customer.State))", "score": -0.4616542731759645, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 176, "beams": [{"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.10255739372951211, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.20496234577876749, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.29757556599361124, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.3456704346535844, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.3495831219552201, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Album.Title,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.5341317979691667, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.5519879786370439, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.6136711565850419, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.6634348956940812, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.6928125349877519, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Portugal), Customer.Country),Customer.Fax))", "score": -0.7061072108408553, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.7083365051148576, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Portugal), Customer.Fax),Customer.Country))", "score": -0.7319733232798171, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.7381130340581876, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.7626355965694529, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 177, "beams": [{"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.08282322507365435, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.11325054303541147, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.1632830872341553, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.18313144559748404, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.20704883384433231, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2210211287058063, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.22708861920811868, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.23343233123351673, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.23417934905549845, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.24295861670998448, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2788570472317041, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.3155160655505415, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.3203167760277458, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.3669676827132654, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types do the tracks on the Grunge playlist have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.39451984204415763, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 178, "beams": [{"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.12876160187715868, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.291752358210033, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2949106891273914, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Employee.Country))", "score": -0.3120756310045181, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Employee.Phone))", "score": -0.43762083469027857, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Employee.Country),Invoice.BillingCountry))", "score": -0.45853621350670437, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Employee.Country))", "score": -0.47506638733739237, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Customer.Country))", "score": -0.4768712085306106, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Employee.Country))", "score": -0.47822471825475077, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5585305590748249, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Employee.Phone))", "score": -0.6006115910231529, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6028304298042713, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Employee.Phone))", "score": -0.6037699219405113, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street),merge(getData(InvoiceLine),getData(Employee),Customer.SupportRepId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6076042627480756, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "in which country is the adress 3 Chatham Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street),merge(getData(InvoiceLine),getData(Employee),Customer.SupportRepId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6107534910176798, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,3 Chatham Street), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 179, "beams": [{"orig_question": "Are there any customer that have ordered tracks from the album How To Dismantle An Atomic Bomb for which we do not have a billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,!=,How To Dismantle An Atomic Bomb),merge(getData(InvoiceLine),getData(Track),Album.AlbumId,InvoiceLine.TrackId),Album.AlbumId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3245229568540013, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,How To Dismantle An Atomic Bomb),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Are there any customer that have ordered tracks from the album How To Dismantle An Atomic Bomb for which we do not have a billing address?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,InvoiceLine.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,!=,How To Dismantle An Atomic Bomb), MediaType.Name),MediaType.Name))", "score": -0.3430565072065311, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,How To Dismantle An Atomic Bomb),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Are there any customer that have ordered tracks from the album How To Dismantle An Atomic Bomb for which we do not have a billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,!=,How To Dismantle An Atomic Bomb),getData(Track),Album.AlbumId,InvoiceLine.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),MediaType.Name))", "score": -0.35389850847656834, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,How To Dismantle An Atomic Bomb),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Are there any customer that have ordered tracks from the album How To Dismantle An Atomic Bomb for which we do not have a billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Genre.Name,!=,How To Dismantle An Atomic Bomb),merge(getData(InvoiceLine),getData(Track),Album.AlbumId,InvoiceLine.TrackId),Album.AlbumId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.35485152417988247, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,How To Dismantle An Atomic Bomb),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Are there any customer that have ordered tracks from the album How To Dismantle An Atomic Bomb for which we do not have a billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,How To Dismantle An Atomic Bomb),merge(merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3650914226401077, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,How To Dismantle An Atomic Bomb),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Are there any customer that have ordered tracks from the album How To Dismantle An Atomic Bomb for which we do not have a billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,How To Dismantle An Atomic Bomb),merge(merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),MediaType.Name))", "score": -0.3713328050210422, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,How To Dismantle An Atomic Bomb),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Are there any customer that have ordered tracks from the album How To Dismantle An Atomic Bomb for which we do not have a billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,How To Dismantle An Atomic Bomb),merge(merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),Track.MediaTypeId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3743173290992157, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,How To Dismantle An Atomic Bomb),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Are there any customer that have ordered tracks from the album How To Dismantle An Atomic Bomb for which we do not have a billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,How To Dismantle An Atomic Bomb),merge(merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),Track.MediaTypeId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),MediaType.Name))", "score": -0.38055871148015025, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,How To Dismantle An Atomic Bomb),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Are there any customer that have ordered tracks from the album How To Dismantle An Atomic Bomb for which we do not have a billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,!=,How To Dismantle An Atomic Bomb),merge(getData(InvoiceLine),getData(Track),Album.AlbumId,InvoiceLine.TrackId),Album.AlbumId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), Invoice.BillingAddress),MediaType.Name))", "score": -0.3895349283119202, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,How To Dismantle An Atomic Bomb),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Are there any customer that have ordered tracks from the album How To Dismantle An Atomic Bomb for which we do not have a billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,How To Dismantle An Atomic Bomb),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.39143318960023193, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,How To Dismantle An Atomic Bomb),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Are there any customer that have ordered tracks from the album How To Dismantle An Atomic Bomb for which we do not have a billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,How To Dismantle An Atomic Bomb),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),MediaType.Name))", "score": -0.39767457198116646, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,How To Dismantle An Atomic Bomb),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Are there any customer that have ordered tracks from the album How To Dismantle An Atomic Bomb for which we do not have a billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,How To Dismantle An Atomic Bomb),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),Track.MediaTypeId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.40065909605933997, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,How To Dismantle An Atomic Bomb),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Are there any customer that have ordered tracks from the album How To Dismantle An Atomic Bomb for which we do not have a billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,!=,How To Dismantle An Atomic Bomb),getData(Track),Album.AlbumId,InvoiceLine.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4015642828098159, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,How To Dismantle An Atomic Bomb),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Are there any customer that have ordered tracks from the album How To Dismantle An Atomic Bomb for which we do not have a billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,How To Dismantle An Atomic Bomb),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),Track.MediaTypeId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),MediaType.Name))", "score": -0.4069004784402745, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,How To Dismantle An Atomic Bomb),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Are there any customer that have ordered tracks from the album How To Dismantle An Atomic Bomb for which we do not have a billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Invoice.BillingAddress,!=,How To Dismantle An Atomic Bomb),merge(merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.40714934242531176, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,How To Dismantle An Atomic Bomb),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 180, "beams": [{"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))", "score": -0.26449699498334667, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,1962-02-18 00:00:00), Employee.State),Employee.State))", "score": -0.31072027779737255, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))", "score": -0.3464439044109895, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Address,=,1962-02-18 00:00:00), Employee.State),Employee.State))", "score": -0.39266718722501537, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))", "score": -0.42971077359834453, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.4459096918217256, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Employee.Address,=,1962-02-18 00:00:00), Employee.State),Employee.State))", "score": -0.4759340564123704, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,1962-02-18 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.49213297463575145, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.BirthDate,=,1962-02-18 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.5278566012493684, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,1962-02-18 00:00:00), Employee.State),Employee.State))", "score": -0.5424147377125337, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,1962-02-18 00:00:00), Employee.State),Employee.State))", "score": -0.5500231514088227, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))", "score": -0.5561480651012971, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.UnitPrice,=,1962-02-18 00:00:00), Employee.State),Employee.State))", "score": -0.5700439771972015, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Address,=,1962-02-18 00:00:00), Invoice.BillingState),Employee.State))", "score": -0.5740798672995879, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}, {"orig_question": "From which states are emplyees that were born on February 18th 2962 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,1962-02-18 00:00:00), Employee.State),Employee.State))", "score": -0.5825673899016692, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1962-02-18 00:00:00), Employee.State),Employee.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 181, "beams": [{"orig_question": "How many tracks with different length have a unit price of 1.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Bytes),Track.Bytes))", "score": -0.15001149863746832, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How many tracks with different length have a unit price of 1.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Bytes))", "score": -0.25359710321572493, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How many tracks with different length have a unit price of 1.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Bytes),Track.Name))", "score": -0.326187800772459, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How many tracks with different length have a unit price of 1.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Track.Bytes),Track.Bytes))", "score": -0.35224708930400084, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How many tracks with different length have a unit price of 1.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Name),Track.Name))", "score": -0.4297734053507156, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How many tracks with different length have a unit price of 1.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Track.Name),Track.Bytes))", "score": -0.45583269388225744, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How many tracks with different length have a unit price of 1.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,!=,1.99), Track.Bytes),Track.Bytes))", "score": -0.45592884735015105, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How many tracks with different length have a unit price of 1.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Bytes),Track.Bytes))", "score": -0.500175640143425, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How many tracks with different length have a unit price of 1.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Track.Bytes),Track.Name))", "score": -0.5284233914389915, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How many tracks with different length have a unit price of 1.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,!=,1.99), Track.Name),Track.Bytes))", "score": -0.5595144519284077, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How many tracks with different length have a unit price of 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,1.99),getData(Track),Track.TrackId,InvoiceLine.TrackId), Track.Bytes),Track.Bytes))", "score": -0.5618969885928545, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How many tracks with different length have a unit price of 1.99?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.UnitPrice),Track.Bytes))", "score": -0.5654105918183632, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How many tracks with different length have a unit price of 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,1.99),getData(Track),Track.TrackId,InvoiceLine.TrackId), Track.Bytes),Track.Bytes))", "score": -0.5756529862671287, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How many tracks with different length have a unit price of 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.TrackId), Track.Name),Track.Bytes))", "score": -0.5941973641908377, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How many tracks with different length have a unit price of 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,1.99),getData(Track),Track.AlbumId,InvoiceLine.TrackId), Track.Bytes),Track.Bytes))", "score": -0.5988267918051782, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,1.99), Track.Milliseconds),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 182, "beams": [{"orig_question": "Songs of which genre sell to countries except Denmark?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))", "score": -0.1991504611227001, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))"}, {"orig_question": "Songs of which genre sell to countries except Denmark?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Artist.Name,!=,Denmark), Genre.Name),Genre.Name))", "score": -0.22468878366017056, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))"}, {"orig_question": "Songs of which genre sell to countries except Denmark?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,!=,Denmark), Genre.Name),Genre.Name))", "score": -0.2290664859653613, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))"}, {"orig_question": "Songs of which genre sell to countries except Denmark?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2461396469258375, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))"}, {"orig_question": "Songs of which genre sell to countries except Denmark?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,Denmark),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2541675581120045, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))"}, {"orig_question": "Songs of which genre sell to countries except Denmark?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Denmark),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2577905791333426, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))"}, {"orig_question": "Songs of which genre sell to countries except Denmark?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))", "score": -0.27186717529267246, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))"}, {"orig_question": "Songs of which genre sell to countries except Denmark?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2770206702261597, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))"}, {"orig_question": "Songs of which genre sell to countries except Denmark?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Invoice.BillingCountry,!=,Denmark),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.2852427068760703, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))"}, {"orig_question": "Songs of which genre sell to countries except Denmark?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Artist.Name,!=,Denmark), Genre.Name),Genre.Name))", "score": -0.2863414235801486, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))"}, {"orig_question": "Songs of which genre sell to countries except Denmark?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Artist.Name,!=,Denmark),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2923428119638962, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))"}, {"orig_question": "Songs of which genre sell to countries except Denmark?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Denmark),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.2995165453475814, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))"}, {"orig_question": "Songs of which genre sell to countries except Denmark?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))", "score": -0.3086974829686457, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))"}, {"orig_question": "Songs of which genre sell to countries except Denmark?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))", "score": -0.3115038254700968, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))"}, {"orig_question": "Songs of which genre sell to countries except Denmark?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))", "score": -0.3207699381633291, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,Denmark), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 183, "beams": [{"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Email),Employee.Email))", "score": -0.22774864848179277, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.BirthDate),Employee.Email))", "score": -0.32916155572456773, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Email),Employee.BirthDate))", "score": -0.42964399720949586, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Email),Employee.State))", "score": -0.4437832024268573, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Address),Employee.Email))", "score": -0.4443752330116695, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Email),Employee.Address))", "score": -0.44565875198168214, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Email),Employee.LastName))", "score": -0.47583044435305055, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Email),Employee.Country))", "score": -0.4835846510104602, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Country),Employee.Email))", "score": -0.5001456301979488, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Email))", "score": -0.5069246452621883, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Email),Employee.Title))", "score": -0.5126805391482776, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.State),Employee.Email))", "score": -0.5236631792358821, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.BirthDate),Employee.BirthDate))", "score": -0.5310569044522708, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.BirthDate),Employee.State))", "score": -0.5451961096696323, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Email),Employee.City))", "score": -0.5469439115695423, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 184, "beams": [{"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.10272552840266538, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.13416689661872427, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.16423791807265076, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Track.Name))", "score": -0.21944889030154727, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.26262771123605544, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Playlist.Name),Track.Name))", "score": -0.2754733131858718, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.30141252755787096, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Playlist.Name),Track.Name))", "score": -0.3236858722429578, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.33756116829855504, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Track.Name))", "score": -0.35066131976713555, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.3584843350603903, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.3603252017892378, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.Name),Track.Name))", "score": -0.36195377672619605, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.37024567241353346, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What tracks does the playlist Grunge consist of?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.39614966062281876, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 185, "beams": [{"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.1824417811040676, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.19085837718131624, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.22759740046764596, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2328857301214771, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.23737631358752243, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23996850738778774, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.260247008689917, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.2720858671251547, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2779184236259437, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.2924020198140015, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.29823457631479056, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.30601132890193344, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3118438854027225, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.Total),Invoice.Total))", "score": -0.31850019544536423, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many total invoices of the media type Protected AAC audio file are in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3193793560068112, "correct_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 186, "beams": [{"orig_question": "What is the name of the album which has the genre soundtrack and has the fewest track bytes?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,=,Soundtrack),Track.Bytes),Album.Title))", "score": -0.15776122593368805, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the name of the album which has the genre soundtrack and has the fewest track bytes?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.16432955337897945, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the name of the album which has the genre soundtrack and has the fewest track bytes?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.17199117282235882, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the name of the album which has the genre soundtrack and has the fewest track bytes?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))", "score": -0.2060475439227211, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the name of the album which has the genre soundtrack and has the fewest track bytes?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,Soundtrack),Track.Bytes),Album.Title))", "score": -0.231394795451999, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the name of the album which has the genre soundtrack and has the fewest track bytes?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.2485141209930302, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the name of the album which has the genre soundtrack and has the fewest track bytes?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.2801282445426315, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the name of the album which has the genre soundtrack and has the fewest track bytes?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,Soundtrack),Track.Bytes),Album.Title))", "score": -0.3346499231872244, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the name of the album which has the genre soundtrack and has the fewest track bytes?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Name,=,Soundtrack),Track.Bytes),Album.Title))", "score": -0.35317303803786143, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the name of the album which has the genre soundtrack and has the fewest track bytes?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,=,Soundtrack),Track.Bytes),Album.Title))", "score": -0.355997535736611, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the name of the album which has the genre soundtrack and has the fewest track bytes?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))", "score": -0.3592369639815048, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the name of the album which has the genre soundtrack and has the fewest track bytes?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))", "score": -0.36395060945752705, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the name of the album which has the genre soundtrack and has the fewest track bytes?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.3980194638374257, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the name of the album which has the genre soundtrack and has the fewest track bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,Soundtrack), Track.Name),Album.Title))", "score": -0.39821215967665613, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the name of the album which has the genre soundtrack and has the fewest track bytes?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))", "score": -0.4047385649944248, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 187, "beams": [{"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))", "score": -0.11420093193482471, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.Composer),Album.Title))", "score": -0.17936823701676574, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))", "score": -0.26427776755045795, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.Composer),InvoiceLine.Quantity))", "score": -0.2670218251162558, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.27268346188424003, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Album.Title),Track.Composer))", "score": -0.2922769677572165, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Invoice.InvoiceId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))", "score": -0.299396725502611, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.3127793983741112, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Composer),Album.Title))", "score": -0.3264963580177565, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Album),Track.MediaTypeId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))", "score": -0.3277614321984459, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))", "score": -0.33126275051984205, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),Track.MediaTypeId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))", "score": -0.34318486095806444, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Album),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))", "score": -0.34675361056367116, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Composer),Album.Title))", "score": -0.3559837708014438, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Album.Title),Album.Title))", "score": -0.35744427283915753, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 188, "beams": [{"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.13620096563982587, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.17633109112184675, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),Track.Bytes),Album.Title))", "score": -0.1797814955978405, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,Protected MPEG-4 video file),Track.Bytes),Album.Title))", "score": -0.23526237901915098, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name),Album.Title))", "score": -0.24356697218083567, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name),Album.Title))", "score": -0.27946642306579544, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.30149373336446106, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(Album),Track.MediaTypeId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3094974123693723, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name),Album.Title))", "score": -0.3311973769473958, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3424230608444237, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.Total),Album.Title))", "score": -0.35615381436097937, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.3576237708275902, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),Track.Bytes),Album.Title))", "score": -0.35908498628955227, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))", "score": -0.3801222987568765, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}, {"orig_question": "What is the album name where you could find the smallest track of the media type Protected MPEG-4 video file?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.Total),Album.Title))", "score": -0.39241710392580764, "correct_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 189, "beams": [{"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.08781739886575082, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice,>,0.99), Genre.Name),Genre.Name))", "score": -0.173904310103168, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.209231299573188, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,>,0.99), Genre.Name),Genre.Name))", "score": -0.214408137583679, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.24241205655817083, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2618433127582504, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.28351797153228436, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice,<,0.99), Genre.Name),Genre.Name))", "score": -0.2930374841125065, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.UnitPrice,>,0.99), Genre.Name),Genre.Name))", "score": -0.30479004872616305, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice,>,0.99), Genre.Name),Genre.Name))", "score": -0.3146425864669656, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3242724269804299, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,0.99),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.34186676352245143, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3515867561973649, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.368030362601818, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genre do tracks costing more than 0.99 belong to?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice,<,0.99),Track.UnitPrice,!=,0.99), Genre.Name),Genre.Name))", "score": -0.3923258798511015, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 190, "beams": [{"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.09973720358246792, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.11534270141795686, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music), Genre.Name),Genre.Name))", "score": -0.13730888454202095, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))", "score": -0.17641906597082324, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))", "score": -0.18949220455463936, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.21677413647198968, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Music), Genre.Name),Genre.Name))", "score": -0.21678015534080408, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2321835906128413, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2525580860358154, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2771956458229868, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2842501599498348, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.29353923058775505, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.3325811800374237, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.33323903232182917, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.355435253421263, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 191, "beams": [{"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps),Track.Bytes),Track.Name))", "score": -0.16106769617798683, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),Track.Bytes),Track.Name))", "score": -0.16783602837584868, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.24686656854378958, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Track.Name))", "score": -0.2678558707421228, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), Track.Bytes),Track.Name))", "score": -0.27146888200507885, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.30529853665500345, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.30616961373472085, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.30679405212615785, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),Track.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),Track.Bytes),Track.Name))", "score": -0.30918331079350303, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Bytes),Track.Name))", "score": -0.3337097062907918, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.3392340226556725, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),Track.Bytes),Track.Name))", "score": -0.3453208706228097, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps),Track.Bytes),Track.Name))", "score": -0.3618519322415358, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(min(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes),Track.Name))", "score": -0.38270289965916426, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}, {"orig_question": "What is the name of the smallest track on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), Track.Bytes),Track.Bytes))", "score": -0.3915397641784261, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 192, "beams": [{"orig_question": "What media type does the smallest track in the genre soundtrack have?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.13331559264920465, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What media type does the smallest track in the genre soundtrack have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack), MediaType.Name),MediaType.Name))", "score": -0.1997915320560406, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What media type does the smallest track in the genre soundtrack have?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Soundtrack), MediaType.Name),MediaType.Name))", "score": -0.23886769510861958, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What media type does the smallest track in the genre soundtrack have?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Name),MediaType.Name))", "score": -0.2484512701929663, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What media type does the smallest track in the genre soundtrack have?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.25179851598988096, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What media type does the smallest track in the genre soundtrack have?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name),MediaType.Name))", "score": -0.2569849281603792, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What media type does the smallest track in the genre soundtrack have?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Name),MediaType.Name))", "score": -0.258634324494148, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What media type does the smallest track in the genre soundtrack have?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Name),MediaType.Name))", "score": -0.27461536938643316, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What media type does the smallest track in the genre soundtrack have?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.27559577635564086, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What media type does the smallest track in the genre soundtrack have?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name),MediaType.Name))", "score": -0.27821119138339206, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What media type does the smallest track in the genre soundtrack have?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds),MediaType.Name))", "score": -0.30525448652814, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What media type does the smallest track in the genre soundtrack have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.3135594267752663, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What media type does the smallest track in the genre soundtrack have?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Genre.Name,=,Soundtrack),Track.Name),MediaType.Name))", "score": -0.31733933221898714, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What media type does the smallest track in the genre soundtrack have?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))", "score": -0.32226252605079003, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}, {"orig_question": "What media type does the smallest track in the genre soundtrack have?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.GenreId,InvoiceLine.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3875923406836227, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 193, "beams": [{"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile), Track.Name),Track.Name))", "score": -0.09960973258590076, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCountry,=,Chile), Track.Name),Track.Name))", "score": -0.1910089387352711, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.20511481218917538, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile), Track.Name),Track.Name))", "score": -0.20779628067107336, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.21603581813177528, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile), Track.Name),Track.Name))", "score": -0.21635507174294086, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCountry,=,Chile), Track.Name),Track.Name))", "score": -0.22612824461399142, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.24847981995454704, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2557889420306772, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Customer.LastName),Track.Name))", "score": -0.2712555736321412, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Track.Name))", "score": -0.2715058429085454, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile), Track.Name),Track.Name))", "score": -0.28735397435189836, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2887920785996023, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Track.Name))", "score": -0.3074006069783307, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks were sold to customers in Chile?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Chile),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3141086251541019, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Chile),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 194, "beams": [{"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Drama),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.16146908665515977, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Drama),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.17729321205084883, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Drama), Album.Title),Album.Title))", "score": -0.19451587597797917, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.Name,!=,Drama), Album.Title),Album.Title))", "score": -0.2311775808646651, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))", "score": -0.2544421550498592, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2635224121215462, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Album.Title,!=,Drama), Album.Title),Album.Title))", "score": -0.2869829066596708, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Artist.Name,=,Drama),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.30100536035218134, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Drama),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3359780479330915, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.Name,!=,Drama), Album.Title),Album.Title))", "score": -0.34208805298464756, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Drama), Album.Title),Album.Title))", "score": -0.3667027563399026, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Album),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.Name,!=,Drama), Album.Title),Album.Title))", "score": -0.3670853478097074, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Album.Title,!=,Drama), Album.Title),Album.Title))", "score": -0.3766178846281667, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Drama),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.4006227550396314, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}, {"orig_question": "How many distinct album titles exist containing tracks of the genre \"Drama\" ", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Drama), Album.Title),Album.Title)", "score": -0.470482469802965, "correct_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 195, "beams": [{"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Playlist.Name,=,None),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3885923243691868, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Playlist.Name,=,None),merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.38963392884872017, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Playlist.Name,=,None),merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3947164139277449, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Name,=,None),merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3960207851675998, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Name,=,None),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.39658169446318053, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Name,=,None),merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.40110327024662457, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Name,<,None), Track.TrackId),Track.UnitPrice)", "score": -0.40801648881372626, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Playlist.Name,=,None),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4225423909216059, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Name,<,None), Track.UnitPrice),Track.UnitPrice)", "score": -0.42540547969558895, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Playlist.Name,=,None),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.4276248760006307, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Genre.Name,=,None),merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.428565283824539, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Name,=,None),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4289292472404856, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Genre.Name,=,None),merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.43364778903604023, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Name,=,None),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.4340117524519868, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average unit price of a track?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Genre.Name,=,None),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.43729182355875856, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 196, "beams": [{"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))", "score": -0.049946241815632675, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Company),Customer.Email))", "score": -0.43611102438444505, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.LastName),Customer.Email))", "score": -0.4913831267404021, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.LastName))", "score": -0.4932476773756207, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), MediaType.Name),Customer.Email))", "score": -0.534068754677719, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),MediaType.MediaTypeId))", "score": -0.5406355455415905, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.State),Customer.Email))", "score": -0.5542790207910002, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.City),Customer.Email))", "score": -0.5842615876244963, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),MediaType.Name))", "score": -0.5902550414102734, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Employee.Email))", "score": -0.5949220850961865, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Album.Title))", "score": -0.5956259563463391, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.State))", "score": -0.5958955481546582, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.City))", "score": -0.6128645732896985, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Company))", "score": -0.6411050155656994, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,MediaType.MediaTypeId),Invoice.CustomerId,Customer.CustomerId),Customer.Company,=,Rogers Canada), MediaType.Name),MediaType.Name))", "score": -0.728532731437056, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 197, "beams": [{"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))", "score": -0.06713099176109152, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.11521716816906843, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))", "score": -0.19178128703029454, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.24862425514191183, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.27198010627000196, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.292958809141054, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99), Playlist.Name),Playlist.Name))", "score": -0.3068445424846947, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3535731246644855, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,Playlist.PlaylistId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))", "score": -0.35852933905045464, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,0.99), Playlist.Name),Playlist.Name))", "score": -0.3665304952280935, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.37203598452867265, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.4006072423921912, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))", "score": -0.4079204472492491, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.4106185740984953, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.46056158151795185, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 198, "beams": [{"orig_question": "Are there any purchases for music titles from different genres made with the invoice postal code 1720?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Invoice.BillingPostalCode,=,1720), MediaType.Name),MediaType.Name))", "score": -0.34155758123667, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,1720), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any purchases for music titles from different genres made with the invoice postal code 1720?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Invoice.BillingPostalCode,=,1720), MediaType.Name),MediaType.Name))", "score": -0.38366008061147794, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,1720), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any purchases for music titles from different genres made with the invoice postal code 1720?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Invoice.BillingPostalCode,=,1720),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),MediaType.Name))", "score": -0.3836980679202681, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,1720), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any purchases for music titles from different genres made with the invoice postal code 1720?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Invoice.BillingPostalCode,=,1720),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),MediaType.Name))", "score": -0.38502160505667127, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,1720), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any purchases for music titles from different genres made with the invoice postal code 1720?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingPostalCode,=,1720), MediaType.Name),MediaType.Name))", "score": -0.39755634174484605, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,1720), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any purchases for music titles from different genres made with the invoice postal code 1720?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingPostalCode,=,1720), MediaType.Name),MediaType.Name))", "score": -0.4004371255455265, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,1720), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any purchases for music titles from different genres made with the invoice postal code 1720?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Invoice.BillingPostalCode,=,1720), MediaType.Name),Invoice.BillingCity))", "score": -0.40085425144234893, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,1720), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any purchases for music titles from different genres made with the invoice postal code 1720?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Invoice.BillingPostalCode,=,1720),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),MediaType.Name))", "score": -0.4070476997441753, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,1720), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any purchases for music titles from different genres made with the invoice postal code 1720?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Track.GenreId),Invoice.BillingPostalCode,=,1720), MediaType.Name),MediaType.Name))", "score": -0.4141096866196569, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,1720), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any purchases for music titles from different genres made with the invoice postal code 1720?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Invoice.BillingPostalCode,=,1720),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.4144204307830912, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,1720), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any purchases for music titles from different genres made with the invoice postal code 1720?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,1720), MediaType.Name),MediaType.Name))", "score": -0.4168384476690423, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,1720), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any purchases for music titles from different genres made with the invoice postal code 1720?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),merge(getData(Track),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Invoice.BillingPostalCode,=,1720), MediaType.Name),MediaType.Name))", "score": -0.41709018406963366, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,1720), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any purchases for music titles from different genres made with the invoice postal code 1720?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Invoice.BillingPostalCode,=,1720),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.4175940658573785, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,1720), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any purchases for music titles from different genres made with the invoice postal code 1720?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Invoice.BillingPostalCode,=,1720),merge(getData(Track),getData(Track),Album.AlbumId,InvoiceLine.TrackId),Artist.ArtistId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.4201957445347272, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,1720), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any purchases for music titles from different genres made with the invoice postal code 1720?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Invoice.BillingPostalCode,=,1720),merge(getData(Album),getData(Track),Album.AlbumId,InvoiceLine.TrackId),Artist.ArtistId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.42336943909968233, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,1720), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 199, "beams": [{"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Bytes,<,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.18167012257975734, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Bytes,<,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.24622688526973457, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Track.Bytes,<,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.24797256780127805, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Bytes,<,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.26379505360062205, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,PlaylistTrack.PlaylistId),Track.Bytes,<,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.28980296762765007, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.TrackId,Track.TrackId),Track.Bytes,<,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.31824738533990343, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Bytes,<,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.3283518162905993, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Bytes,<,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.3335654083005983, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>=,3211245),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.34874143019620724, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Bytes,>=,3211245),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3506423023307873, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),Track.Bytes,>=,3211245),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.36380566742112064, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Bytes,>=,3211245),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3671044424243384, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.Milliseconds),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Bytes,<,3211245), Track.TrackId),Track.UnitPrice)", "score": -0.36983052734431626, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>=,3211245),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3796970715432502, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average price of tracks longer than 3211245 bytes?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Bytes,>=,3211245),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.38813288882235736, "correct_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,3211245), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 200, "beams": [{"orig_question": "What is the length of all the tracks sold by employees from outside of Canada?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.Milliseconds)", "score": -0.17460287028192267, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees from outside of Canada?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.Milliseconds)", "score": -0.18996085957578446, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees from outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.21227278847916012, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees from outside of Canada?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada), Track.TrackId),Track.Milliseconds)", "score": -0.2156294296714671, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees from outside of Canada?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.21722187217761615, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees from outside of Canada?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada), Track.TrackId),Track.Milliseconds)", "score": -0.24384472667252582, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees from outside of Canada?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,!=,Canada), Track.TrackId),Track.Milliseconds)", "score": -0.2452136206677031, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees from outside of Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada), Invoice.Total),Track.Milliseconds))", "score": -0.25583263887739355, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees from outside of Canada?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Country,!=,Canada),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.25983449443625517, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees from outside of Canada?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Country,!=,Canada),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.26738742649089525, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees from outside of Canada?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,!=,Canada), Track.TrackId),Track.Milliseconds)", "score": -0.2696482509081905, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees from outside of Canada?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Country,=,Canada),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.27582767712369666, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees from outside of Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada), Invoice.Total),Track.Milliseconds))", "score": -0.3004350663399737, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees from outside of Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada), Track.Name),Track.Milliseconds))", "score": -0.3020611282265442, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees from outside of Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada), Employee.Address),Track.Milliseconds))", "score": -0.3086472184368317, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 201, "beams": [{"orig_question": "How many artists are there when the track has a length of 243644 Milliseconds or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds,>=,243644), Artist.Name),Artist.Name))", "score": -0.16559817241031677, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there when the track has a length of 243644 Milliseconds or more?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,243644),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.18167165499651677, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there when the track has a length of 243644 Milliseconds or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),InvoiceLine.TrackId,Album.AlbumId),Track.Milliseconds,>=,243644), Artist.Name),Artist.Name))", "score": -0.20070621161760666, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there when the track has a length of 243644 Milliseconds or more?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.21563930521893537, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there when the track has a length of 243644 Milliseconds or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds,>=,243644), Artist.Name),Artist.Name))", "score": -0.22772853559490117, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there when the track has a length of 243644 Milliseconds or more?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Track.Milliseconds,>=,243644),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.26463084119845653, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there when the track has a length of 243644 Milliseconds or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),InvoiceLine.TrackId,Album.AlbumId),Track.Milliseconds,>=,243644), Artist.Name),Artist.Name))", "score": -0.27075526486064955, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there when the track has a length of 243644 Milliseconds or more?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,243644),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2883430895193903, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there when the track has a length of 243644 Milliseconds or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644), Artist.Name),Artist.Name))", "score": -0.2914385621523693, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there when the track has a length of 243644 Milliseconds or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Track.TrackId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds,>=,243644), Artist.Name),Artist.Name))", "score": -0.3039416426298614, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there when the track has a length of 243644 Milliseconds or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Album),InvoiceLine.TrackId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds,>=,243644), Artist.Name),Artist.Name))", "score": -0.336962511395683, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there when the track has a length of 243644 Milliseconds or more?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,243644),getData(Album),Track.AlbumId,Invoice.InvoiceId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.34678012218003873, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there when the track has a length of 243644 Milliseconds or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644), Artist.Name),Artist.Name))", "score": -0.3614875896452134, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there when the track has a length of 243644 Milliseconds or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Track.TrackId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds,>=,243644), Artist.Name),Artist.Name))", "score": -0.3660720238292018, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there when the track has a length of 243644 Milliseconds or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,>=,243644), Artist.Name),Artist.Name))", "score": -0.3735961978274835, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,>=,243644),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 202, "beams": [{"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.11324801143746299, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2456228345308773, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2559995263491146, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.39758404249704216, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4421637723595886, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.44695759412388725, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,<=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4489154455859534, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.49668688444921966, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.49887623944821263, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.51347228831516, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.526682437082505, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5300655722294323, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,WA),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5336367446275846, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,WA),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Customer.Country))", "score": -0.5582946877243643, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries have invoices been sent when excluding the BillingState WA? ", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,>=,WA), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5597053406436316, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,WA), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 203, "beams": [{"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.04861605002952274, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.LastName))", "score": -0.3946309119783109, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.LastName),Customer.FirstName))", "score": -0.4266612373612588, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.44910656682623085, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.4703055736727034, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.490522064161665, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.5017836178932304, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.5156521724857157, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.5219998957353891, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.Address),Customer.FirstName))", "score": -0.5295536659978097, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.5544431435264414, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.Email),Customer.FirstName))", "score": -0.5890348993561929, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.6008793937362498, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))", "score": -0.6048639046348399, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the address Rilsk\u00e1 3174/6?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.Email))", "score": -0.6070817441068357, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Rilsk\u00e1 3174/6), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 204, "beams": [{"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.13713188113097038, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan), Invoice.InvoiceId),Invoice.Total)", "score": -0.16354387605323562, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.17013970012003654, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1706887060410627, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan), Invoice.InvoiceId),Invoice.Total)", "score": -0.17177303641394243, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19087820950474346, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19448521389499385, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan), Invoice.InvoiceId),Invoice.Total)", "score": -0.1972836690359273, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2177693668005321, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22395377722665688, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan), Invoice.InvoiceId),Invoice.Total)", "score": -0.22582170160705414, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23096654645047385, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan), Invoice.InvoiceId),Invoice.Total)", "score": -0.23179170726445789, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2541854641907586, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27297272935934813, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 205, "beams": [{"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))", "score": -0.16718506696694052, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.20870726584844765, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.24173608219551435, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))", "score": -0.2649758006173603, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.30649799949886747, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),Track.UnitPrice),Track.UnitPrice))", "score": -0.30901298975751856, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))", "score": -0.32021692128240625, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.3219559500666227, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCity,=,Canada),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.33254493450184264, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),Invoice.Total),Track.UnitPrice))", "score": -0.34261445407015956, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingCity,=,Canada),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.35177415960011865, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))", "score": -0.36096244377535736, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.3617391201639134, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Invoice),InvoiceLine.Quantity,=,Canada),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),InvoiceLine.UnitPrice))", "score": -0.36225970817233133, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track that has been bought with the minimum quantity and that is assocated to Canada as billing country?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Album.Title))", "score": -0.37386166584894487, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 206, "beams": [{"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,James Brown),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.10761186041165934, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.13410431083008628, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,James Brown), Genre.Name),Genre.Name))", "score": -0.16825400199473153, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,James Brown),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.18053336156647776, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.19983429993866186, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,James Brown),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.21768909014287846, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.21983222798088406, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,James Brown),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.22573219460555186, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,James Brown), Genre.Name),Genre.Name))", "score": -0.25053080614539686, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.25133690767622463, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,James Brown), Genre.Name),Genre.Name))", "score": -0.2796445621035265, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,James Brown),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2872873173227087, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,James Brown),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.30312151409585825, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,James Brown),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.30811555295629844, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,James Brown),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.31813398741120974, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 207, "beams": [{"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.21990444914561671, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.24128414552958152, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Track.Bytes),Playlist.Name))", "score": -0.25644836929283144, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Track.Name),Playlist.Name))", "score": -0.2740046311099353, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Track.Bytes),Playlist.Name))", "score": -0.2774048941087595, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,0.99), Playlist.Name),Playlist.Name))", "score": -0.27767456390117157, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.281792679541398, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Track.Name),Playlist.Name))", "score": -0.2835880960807623, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,!=,0.99), Track.Name),Playlist.Name))", "score": -0.28387189244110295, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,0.99), Playlist.Name),Track.Name))", "score": -0.284524059189123, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,!=,0.99), Track.Name),Playlist.Name))", "score": -0.28820074948693186, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.29479072389205585, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Track.Name),Playlist.Name))", "score": -0.30225604432138614, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Track.Bytes),Playlist.Name))", "score": -0.3094732059316594, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "What playlist contains tracks that cost other than 0.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,0.99), Playlist.Name),Track.Name))", "score": -0.3175865652860583, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 208, "beams": [{"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Playlist.Name,=,Margaret),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3483989791810554, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Margaret),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3561222687587656, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Playlist.Name,=,Margaret),getData(Track),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.35956949487599776, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Playlist.Name,=,Margaret),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.362497871452617, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Margaret),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3702211610303272, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Playlist.Name,=,Margaret),getData(Track),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.38162745134338705, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Invoice.CustomerId),Invoice.BillingCountry,=,Margaret),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3837144120005853, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Playlist.Name,=,Margaret),getData(Track),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.38494667344460254, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Playlist.Name,=,Margaret),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.39468743845031967, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Playlist.Name,=,Margaret),getData(Track),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.4054209995660972, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCountry,=,Margaret), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.41432655976489435, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCountry,=,Margaret), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.4149932526767241, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Playlist.Name,=,Margaret),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.4167451824041304, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Invoice.BillingCountry,=,Margaret),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.42356219236756776, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Playlist.Name,=,Margaret),getData(Track),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Customer.Email),InvoiceLine.UnitPrice)", "score": -0.42500040684582996, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 209, "beams": [{"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Austria), Invoice.BillingState),Invoice.BillingState))", "score": -0.09828577777079772, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))", "score": -0.364045370646636, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Austria), Invoice.BillingState),Invoice.BillingState))", "score": -0.4219227248227802, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Austria), Invoice.BillingState),Invoice.BillingState))", "score": -0.4487086339427228, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Austria), Invoice.BillingState),Employee.State))", "score": -0.45961045222065877, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Austria), Invoice.BillingState),Invoice.BillingState))", "score": -0.462774844053496, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Austria), Invoice.BillingState),Invoice.BillingState))", "score": -0.464564719553616, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Austria), Invoice.BillingState),Invoice.BillingState))", "score": -0.46703403270402416, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Austria), Invoice.BillingState),Invoice.BillingState))", "score": -0.4783156110396119, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Austria), Invoice.BillingState),Invoice.BillingState))", "score": -0.4838876615249319, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Austria),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState)", "score": -0.4991756746952975, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Austria),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.Total)", "score": -0.5015952085082084, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,Austria), Invoice.BillingState),Invoice.BillingState))", "score": -0.5060036422655685, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Austria),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.BillingState), Invoice.BillingState),Invoice.BillingState)", "score": -0.5184307113279045, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Austria),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingState)", "score": -0.5198016862796148, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 210, "beams": [{"orig_question": "To which countries did we send invoices after 2010-07-18 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.09896192801352299, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send invoices after 2010-07-18 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.38874593665059365, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send invoices after 2010-07-18 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.40845286766120525, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send invoices after 2010-07-18 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4087755289758213, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send invoices after 2010-07-18 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.CustomerId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.421280442917181, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send invoices after 2010-07-18 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.425666424992814, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send invoices after 2010-07-18 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-18 00:00:00),merge(getData(InvoiceLine),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.CustomerId,InvoiceLine.InvoiceId),getData(Invoice),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4457825246821517, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send invoices after 2010-07-18 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4468788650577842, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send invoices after 2010-07-18 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4512648471334172, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send invoices after 2010-07-18 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-18 00:00:00),merge(getData(InvoiceLine),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4519371874696915, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send invoices after 2010-07-18 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4592091190452862, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send invoices after 2010-07-18 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4635950798051885, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send invoices after 2010-07-18 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-18 00:00:00),merge(getData(InvoiceLine),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Invoice.BillingCountry))", "score": -0.4760371587143134, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send invoices after 2010-07-18 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-18 00:00:00),merge(getData(InvoiceLine),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.CustomerId,InvoiceLine.InvoiceId),getData(Invoice),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Invoice.BillingCountry))", "score": -0.48628536781448345, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we send invoices after 2010-07-18 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-07-18 00:00:00),merge(getData(InvoiceLine),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.48915116911589346, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2010-07-18 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 211, "beams": [{"orig_question": "How many different music genres are associated to the billing address 8210 111 ST NW?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,8210 111 ST NW),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2045835221501127, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,8210 111 ST NW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different music genres are associated to the billing address 8210 111 ST NW?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,8210 111 ST NW), Genre.Name),Genre.Name))", "score": -0.2086035518739918, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,8210 111 ST NW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different music genres are associated to the billing address 8210 111 ST NW?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,8210 111 ST NW), Genre.Name),Genre.Name))", "score": -0.20872164616204525, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,8210 111 ST NW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different music genres are associated to the billing address 8210 111 ST NW?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,8210 111 ST NW),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2173144071473179, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,8210 111 ST NW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different music genres are associated to the billing address 8210 111 ST NW?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,8210 111 ST NW),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.22236310586784375, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,8210 111 ST NW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different music genres are associated to the billing address 8210 111 ST NW?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,8210 111 ST NW),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2299674506188825, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,8210 111 ST NW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different music genres are associated to the billing address 8210 111 ST NW?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,8210 111 ST NW),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2420993051392207, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,8210 111 ST NW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different music genres are associated to the billing address 8210 111 ST NW?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,8210 111 ST NW),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2423147569279397, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,8210 111 ST NW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different music genres are associated to the billing address 8210 111 ST NW?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,8210 111 ST NW),getData(Track),Invoice.InvoiceId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.250187330720034, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,8210 111 ST NW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different music genres are associated to the billing address 8210 111 ST NW?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,8210 111 ST NW), Genre.Name),Genre.Name))", "score": -0.2614789970648181, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,8210 111 ST NW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different music genres are associated to the billing address 8210 111 ST NW?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,8210 111 ST NW),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.26231918524037223, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,8210 111 ST NW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different music genres are associated to the billing address 8210 111 ST NW?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,8210 111 ST NW), Genre.Name),Genre.Name))", "score": -0.2643019827792334, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,8210 111 ST NW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different music genres are associated to the billing address 8210 111 ST NW?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingAddress,=,8210 111 ST NW), Genre.Name),Genre.Name))", "score": -0.2644200770672868, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,8210 111 ST NW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different music genres are associated to the billing address 8210 111 ST NW?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.Quantity,=,8210 111 ST NW), Genre.Name),Genre.Name))", "score": -0.3148068480558484, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,8210 111 ST NW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many different music genres are associated to the billing address 8210 111 ST NW?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,8210 111 ST NW), Genre.Name),Genre.Name))", "score": -0.31845057567105656, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,8210 111 ST NW),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 212, "beams": [{"orig_question": "What is the average value of invoices that have the track unit price other than 1.99?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,!=,1.99), Invoice.InvoiceId),Invoice.Total)", "score": -0.14243924981795866, "correct_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of invoices that have the track unit price other than 1.99?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Invoice.InvoiceId),Invoice.Total)", "score": -0.1654633085570674, "correct_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of invoices that have the track unit price other than 1.99?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.177196546985733, "correct_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of invoices that have the track unit price other than 1.99?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,!=,1.99), Invoice.InvoiceId),Invoice.Total)", "score": -0.20452105175201762, "correct_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of invoices that have the track unit price other than 1.99?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21056240984977465, "correct_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of invoices that have the track unit price other than 1.99?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22401175083888242, "correct_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of invoices that have the track unit price other than 1.99?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24872708169610128, "correct_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of invoices that have the track unit price other than 1.99?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.3118323329837788, "correct_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of invoices that have the track unit price other than 1.99?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,!=,1.99), Invoice.InvoiceId),Invoice.Total)", "score": -0.31985181971395277, "correct_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of invoices that have the track unit price other than 1.99?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.32498359658939113, "correct_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of invoices that have the track unit price other than 1.99?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(filter(getData(Track),InvoiceLine.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,!=,1.99), Invoice.InvoiceId),Invoice.Total)", "score": -0.3299040063741971, "correct_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of invoices that have the track unit price other than 1.99?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Invoice.InvoiceId),Invoice.Total)", "score": -0.3324337197135679, "correct_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of invoices that have the track unit price other than 1.99?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.346324355088445, "correct_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of invoices that have the track unit price other than 1.99?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(filter(getData(Track),Track.Name,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.35751265856555764, "correct_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of invoices that have the track unit price other than 1.99?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.36647696106432015, "correct_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 213, "beams": [{"orig_question": "Which is track with the maximum unit price between all the tracks that have been sold to people in Oslo?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,=,Oslo), Track.TrackId),Track.UnitPrice)", "score": -0.24603759230495764, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Oslo),InvoiceLine.UnitPrice),Track.Name))"}, {"orig_question": "Which is track with the maximum unit price between all the tracks that have been sold to people in Oslo?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Oslo),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),Track.Bytes))", "score": -0.265942926096498, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Oslo),InvoiceLine.UnitPrice),Track.Name))"}, {"orig_question": "Which is track with the maximum unit price between all the tracks that have been sold to people in Oslo?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Oslo),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.29672404700116634, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Oslo),InvoiceLine.UnitPrice),Track.Name))"}, {"orig_question": "Which is track with the maximum unit price between all the tracks that have been sold to people in Oslo?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Oslo),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.3112679187663723, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Oslo),InvoiceLine.UnitPrice),Track.Name))"}, {"orig_question": "Which is track with the maximum unit price between all the tracks that have been sold to people in Oslo?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),InvoiceLine.UnitPrice,=,Oslo),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.3338762625116553, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Oslo),InvoiceLine.UnitPrice),Track.Name))"}, {"orig_question": "Which is track with the maximum unit price between all the tracks that have been sold to people in Oslo?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Oslo),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),Track.Name))", "score": -0.3437946218354244, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Oslo),InvoiceLine.UnitPrice),Track.Name))"}, {"orig_question": "Which is track with the maximum unit price between all the tracks that have been sold to people in Oslo?", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Oslo),Track.UnitPrice),Track.Bytes))", "score": -0.3463839154483676, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Oslo),InvoiceLine.UnitPrice),Track.Name))"}, {"orig_question": "Which is track with the maximum unit price between all the tracks that have been sold to people in Oslo?", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Oslo),Track.UnitPrice),Track.UnitPrice))", "score": -0.3524590485430483, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Oslo),InvoiceLine.UnitPrice),Track.Name))"}, {"orig_question": "Which is track with the maximum unit price between all the tracks that have been sold to people in Oslo?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,=,Oslo),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3564348785666911, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Oslo),InvoiceLine.UnitPrice),Track.Name))"}, {"orig_question": "Which is track with the maximum unit price between all the tracks that have been sold to people in Oslo?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),InvoiceLine.UnitPrice,=,Oslo),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),Track.Bytes))", "score": -0.3588711930254515, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Oslo),InvoiceLine.UnitPrice),Track.Name))"}, {"orig_question": "Which is track with the maximum unit price between all the tracks that have been sold to people in Oslo?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Oslo),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice),Album.Title))", "score": -0.3620157593231238, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Oslo),InvoiceLine.UnitPrice),Track.Name))"}, {"orig_question": "Which is track with the maximum unit price between all the tracks that have been sold to people in Oslo?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,Oslo),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.37932951885992056, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Oslo),InvoiceLine.UnitPrice),Track.Name))"}, {"orig_question": "Which is track with the maximum unit price between all the tracks that have been sold to people in Oslo?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,Oslo), Track.TrackId),Track.UnitPrice)", "score": -0.3838582040593943, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Oslo),InvoiceLine.UnitPrice),Track.Name))"}, {"orig_question": "Which is track with the maximum unit price between all the tracks that have been sold to people in Oslo?", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Oslo),Track.UnitPrice),Track.Name))", "score": -0.38609322502221166, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Oslo),InvoiceLine.UnitPrice),Track.Name))"}, {"orig_question": "Which is track with the maximum unit price between all the tracks that have been sold to people in Oslo?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,=,Oslo), Track.UnitPrice),Track.Bytes))", "score": -0.3905100179407692, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Oslo),InvoiceLine.UnitPrice),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 214, "beams": [{"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2586342348199777, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>=,0.99),InvoiceLine.UnitPrice,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2676172281438675, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,0.99),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.319868710860135, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.321719269048597, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.325504508736117, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,0.99),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3283356556585346, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>=,0.99),InvoiceLine.UnitPrice,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3307022623724868, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),InvoiceLine.UnitPrice,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3327107084389301, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3372515664212675, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>=,0.99),InvoiceLine.UnitPrice,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3416937017628199, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(merge(filter(getData(Track),Track.Milliseconds,>=,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.34250617963331376, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3497089227863867, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.37661115503591874, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.3922741651469505, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,0.99),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.39394520146183865, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 215, "beams": [{"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingAddress,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.1416474418820144, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.24130151291501534, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Invoice.BillingAddress,=,AB),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Invoice.BillingAddress,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.33876181465541166, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Invoice.BillingAddress,=,AB),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3730710816382791, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Address,=,683 10 Street SW),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Invoice.BillingState,!=,AB),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3834752446137869, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3861674374074937, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4191392347363473, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.Address,=,683 10 Street SW),filter(getData(Customer),Invoice.BillingState,=,AB),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.42045313058688577, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Address,=,683 10 Street SW),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,!=,683 10 Street SW),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4213503260214426, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Invoice.BillingAddress,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.43346182316487164, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.CustomerId),Invoice.BillingAddress,=,AB),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.433803539636208, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Address,=,683 10 Street SW),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.CustomerId,!=,AB),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4363037091679313, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Address,=,683 10 Street SW),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Invoice.BillingCountry,!=,683 10 Street SW),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4578353426146841, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.48582150844049465, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Invoice.BillingAddress,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5339430759134552, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 216, "beams": [{"orig_question": "What are the customer fax numbers of all customers outside the WA state?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Fax))", "score": -0.08535220060002757, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the customer fax numbers of all customers outside the WA state?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,WA), Customer.Fax),Customer.Fax))", "score": -0.18482546839368297, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the customer fax numbers of all customers outside the WA state?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,<=,WA), Customer.Fax),Customer.Fax))", "score": -0.30091102752339793, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the customer fax numbers of all customers outside the WA state?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Company),Customer.Fax))", "score": -0.5537419664251502, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the customer fax numbers of all customers outside the WA state?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,WA), Customer.Fax),Customer.Fax))", "score": -0.5667574606413837, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the customer fax numbers of all customers outside the WA state?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Company))", "score": -0.5897461181084509, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the customer fax numbers of all customers outside the WA state?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,>,WA), Customer.Fax),Customer.Fax))", "score": -0.6010647598232026, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the customer fax numbers of all customers outside the WA state?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Country))", "score": -0.6079497342507238, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the customer fax numbers of all customers outside the WA state?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Country),Customer.Fax))", "score": -0.6218255805360968, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the customer fax numbers of all customers outside the WA state?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,WA), Customer.Company),Customer.Fax))", "score": -0.6532152342188056, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the customer fax numbers of all customers outside the WA state?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,null,WA), Customer.Fax),Customer.Fax))", "score": -0.6630866113628144, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the customer fax numbers of all customers outside the WA state?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,WA), Customer.Fax),Customer.Fax))", "score": -0.666230728435039, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the customer fax numbers of all customers outside the WA state?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,WA), Customer.Fax),Customer.Company))", "score": -0.6892193859021063, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the customer fax numbers of all customers outside the WA state?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.PostalCode),Customer.Fax))", "score": -0.6915037679063971, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the customer fax numbers of all customers outside the WA state?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,WA), Customer.Fax),Customer.Country))", "score": -0.7074230020443792, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,WA), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 217, "beams": [{"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.11036092929685441, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), MediaType.Name),MediaType.Name))", "score": -0.15784054889767893, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), MediaType.Name),MediaType.Name))", "score": -0.16392382259238011, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), MediaType.Name),MediaType.Name))", "score": -0.19350806277865742, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), MediaType.Name),MediaType.Name))", "score": -0.19531546983853496, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2199662858816671, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.2281668033052184, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), MediaType.Name),MediaType.Name))", "score": -0.22869319795615514, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), MediaType.Name),MediaType.Name))", "score": -0.2297352849199071, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.24070026200028982, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2457280886175217, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.2542998117442428, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), MediaType.Name),MediaType.Name))", "score": -0.2555294627609269, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), MediaType.Name),MediaType.Name))", "score": -0.2564169534322759, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2621164316657615, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 218, "beams": [{"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.11255256673709314, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock), Album.Title),Album.Title))", "score": -0.13974322512016105, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.14821881982978674, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock), Album.Title),Album.Title))", "score": -0.16955958921409067, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.18478218767579477, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.24092835369328036, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock), Album.Title),Album.Title))", "score": -0.24216734169462797, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock), Album.Title),Album.Title))", "score": -0.30299838016288067, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3478906926593564, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock),getData(Track),Track.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.36555230462076094, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Artist.Name),Album.Title))", "score": -0.377479498263119, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Composer),Album.Title))", "score": -0.38653607243958316, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,!=,Rock),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock), Album.Title),Album.Title))", "score": -0.39150454182461736, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.4221711755920708, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}, {"orig_question": "What are the distinct titles of albums containing tracks in the genre \"Rock\" ? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Rock), Album.Title),Album.Title))", "score": -0.4250265260913835, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 219, "beams": [{"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(getData(InvoiceLine), Invoice.InvoiceId),Invoice.Total)", "score": -0.18531823446131224, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)", "score": -0.29131025110867265, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.42519309859458715, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.43455866329537274, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4673685703846474, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.476734135085433, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Customer.Address,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4846089901880421, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.48965270982376674, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.49713972261518286, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4974914182640711, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5049784310554872, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.5059924999244987, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.5134795853062524, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.5138312809551406, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.5213182937465567, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 220, "beams": [{"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))", "score": -0.05751621887611691, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.252487534438842, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Customer.PostalCode))", "score": -0.45485793963598553, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))", "score": -0.5065649727039272, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))", "score": -0.5392816045932705, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.5394132768415147, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))", "score": -0.5666537264041835, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Track.Composer))", "score": -0.5738978625886375, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.Title))", "score": -0.6191175819985801, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.Title),Employee.PostalCode))", "score": -0.6200856005452806, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.Fax))", "score": -0.6433819176309044, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.Fax),Employee.PostalCode))", "score": -0.6517469918035204, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,!=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))", "score": -0.6638944271398941, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Customer.PostalCode),Employee.PostalCode))", "score": -0.6662926708959276, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))", "score": -0.690103051965707, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 221, "beams": [{"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,23.86), Track.TrackId),Track.Milliseconds)", "score": -0.11561645626961213, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,23.86), Track.TrackId),Track.Milliseconds)", "score": -0.1673681017545008, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,=,23.86),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.1906388557221942, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,23.86),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.20997490785468365, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,23.86),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.24318280960716115, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,=,23.86),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.25784009121712814, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,23.86), Track.TrackId),Track.Milliseconds)", "score": -0.27821968136114533, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,23.86),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.31246911350930445, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,23.86),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.31543022523327124, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3222590410359331, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,23.86),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3549590152721101, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,23.86), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3667693704980332, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,23.86), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.36708662639610035, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,23.86),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.37001737267967605, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.37556307926792964, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 222, "beams": [{"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))", "score": -0.02296300658781547, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.FirstName),Employee.Phone))", "score": -0.42762072624464054, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Country),Employee.Phone))", "score": -0.4705954367091181, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Phone),Employee.Phone))", "score": -0.5262036193889799, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,AB), Employee.Phone),Employee.Phone))", "score": -0.606108414081973, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.FirstName))", "score": -0.6112738722731592, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.State), Employee.Phone),Employee.Phone))", "score": -0.6168040310328385, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,AB), Employee.Phone),Employee.Phone))", "score": -0.6441993583721342, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Employee.State), Employee.Phone),Employee.Phone))", "score": -0.6482240891282827, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Phone),Employee.Phone))", "score": -0.6661529037140348, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Employee.State,=,AB), Employee.Phone),Employee.Phone))", "score": -0.6851409026740225, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.Phone),Employee.Phone))", "score": -0.6975729817451167, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Customer.Phone))", "score": -0.7061785334517481, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.State,=,AB), Employee.Phone),Employee.Phone))", "score": -0.7334803213161649, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Country))", "score": -0.7471786612441065, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 223, "beams": [{"orig_question": "Are there any album titles?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.06366891918011199, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any album titles?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.3241602702287647, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.36829468480811306, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any album titles?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.3759547982209723, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3800588936220795, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any album titles?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.39977668922707726, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Album),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.40089514087665934, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.42202115934361095, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any album titles?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),MediaType.Name,=,None), Album.Title),Album.Title))", "score": -0.43401757361594245, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.44894997076581405, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any album titles?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.45157122192631044, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.4525231458782575, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.GenreId), Album.Title),Album.Title))", "score": -0.4626282504291367, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any album titles?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Name,=,None), Album.Title),Album.Title))", "score": -0.46762082549077083, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any album titles?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,MediaType.MediaTypeId), Album.Title),Album.Title))", "score": -0.4743776033710692, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 224, "beams": [{"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,R.E.M.), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2674759622986414, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,R.E.M.), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2794368174094885, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,R.E.M.), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3059904717975553, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Playlist.Name,=,R.E.M.),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3264645457787002, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Playlist.Name,=,R.E.M.),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3343688622735276, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,R.E.M.),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.33793537981542204, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Name,=,R.E.M.), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.33873420107786245, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Playlist.Name,=,R.E.M.),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.36012108757596173, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceDate,=,R.E.M.), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3614318139944558, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,=,R.E.M.), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3647659244966574, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Playlist.Name,=,R.E.M.),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3680253491938407, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,R.E.M.),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.37159186673573513, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,R.E.M.), Invoice.Total),Invoice.Total))", "score": -0.37178921305889934, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingAddress,=,R.E.M.), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3730981155210344, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Name,=,R.E.M.), Invoice.Total),Invoice.Total))", "score": -0.3948499771616093, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 225, "beams": [{"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "sum(distinct(filter(getData(Album),Track.Composer,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.334993990330462, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Composer,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3587116301337801, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "sum(distinct(filter(getData(Album),Track.Composer,!=,Out Of Time), Album.Title),InvoiceLine.Quantity)", "score": -0.3608933722232332, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Composer,!=,Out Of Time), Album.Title),InvoiceLine.Quantity)", "score": -0.3846110120265513, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.4287584345238429, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.4307409539906075, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "sum(distinct(filter(getData(Album),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.45632747046340333, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "sum(distinct(filter(getData(Track),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4800451102667214, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "sum(distinct(filter(getData(Album),Album.Title,!=,Out Of Time), Album.Title),InvoiceLine.Quantity)", "score": -0.4822268523561745, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Album.Title,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.5007797400849086, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "sum(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,!=,Out Of Time),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5032100695539488, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Album.Title,!=,Out Of Time), Album.Title),Album.Title))", "score": -0.5042928244074574, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "sum(distinct(filter(getData(Track),Album.Title,!=,Out Of Time), Album.Title),InvoiceLine.Quantity)", "score": -0.5059444921594927, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "sum(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,!=,Out Of Time),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5206073602300713, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times have albums other than Out Of Time been ordered?", "inferred_code": "sum(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,!=,Out Of Time),getData(Track),Album.AlbumId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5223689144900691, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Out Of Time), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 226, "beams": [{"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.15285144352232405, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2011-06-24 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.21225110908465003, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2011-06-24 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.231152903144668, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,<=,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.24354102260238697, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,<=,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.24911164629781496, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2549606225130576, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.29282516239012113, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,<=,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.29667148300020035, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,<=,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.29887322799807214, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<=,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2997641066697103, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,<,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.3059281533706469, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.UnitPrice,<=,2011-06-24 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3084258203903042, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,<,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.3114987770660749, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,<=,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.33764192988014624, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes,<=,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.33984370363932875, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 227, "beams": [{"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Wilhelm Kempff), Track.Name),Track.Name))", "score": -0.14263603664429905, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff), Track.Name),Track.Name))", "score": -0.1454443636567843, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.21950717246144133, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Wilhelm Kempff),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.24366573573500383, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Wilhelm Kempff),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.2517930122176762, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Track.AlbumId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Wilhelm Kempff), Track.Name),Track.Name))", "score": -0.27498074165981223, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,!=,Wilhelm Kempff),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Name))", "score": -0.31463952387326916, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),Track.Bytes),Track.Name))", "score": -0.32403207913774845, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff), Track.Bytes),Track.Name))", "score": -0.3428502092840919, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff), Track.Name),Track.Name))", "score": -0.34812497469978854, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Artist),Artist.Name,!=,Wilhelm Kempff),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Name))", "score": -0.3484626610124649, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Name))", "score": -0.35054133744536864, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.AlbumId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Wilhelm Kempff), Track.Name),Track.Name))", "score": -0.35203446213472994, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Wilhelm Kempff),merge(getData(Album),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.35904364319323445, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Wilhelm Kempff), Track.Name),Track.Name))", "score": -0.3608907853216717, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 228, "beams": [{"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,10012-2612), Customer.Company),Customer.Company))", "score": -0.1650390753402462, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))", "score": -0.2353522905959835, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,10012-2612), Customer.Company),Customer.Company))", "score": -0.23810232969663048, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,10012-2612), Customer.Company),Customer.Company))", "score": -0.24472810121915245, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,10012-2612), Customer.Company),Customer.Company))", "score": -0.33767427297971153, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,10012-2612), Customer.Company),Customer.Company))", "score": -0.3927149901046505, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,10012-2612), Customer.Company),Customer.Company))", "score": -0.4112450012817135, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,10012-2612), Customer.Company),Customer.Company))", "score": -0.4596894511832943, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Company,=,10012-2612), Customer.Company),Customer.Company))", "score": -0.5371970911288606, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))", "score": -0.564629343857077, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Address,=,10012-2612), Customer.Company),Customer.Company))", "score": -0.5748600650766644, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,10012-2612), Customer.Company),Customer.Company))", "score": -0.5914464423312893, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Customer.Address,=,10012-2612),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))", "score": -0.6017623785838654, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,10012-2612), Customer.Company),Customer.Company))", "score": -0.6356869766368618, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Album.Title,=,10012-2612), Customer.Company),Customer.Company))", "score": -0.6993982622279873, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 229, "beams": [{"orig_question": "What cities are customers that have ordered tracks from the genre jazz from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.1094160267658031, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What cities are customers that have ordered tracks from the genre jazz from?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Jazz), Invoice.BillingCity),Customer.City))", "score": -0.2094566951036824, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What cities are customers that have ordered tracks from the genre jazz from?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Jazz),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.21393439391262656, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What cities are customers that have ordered tracks from the genre jazz from?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Jazz), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2226208912705596, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What cities are customers that have ordered tracks from the genre jazz from?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2271140393770425, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What cities are customers that have ordered tracks from the genre jazz from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Jazz),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2390394187195986, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What cities are customers that have ordered tracks from the genre jazz from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.24642196735419222, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What cities are customers that have ordered tracks from the genre jazz from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Customer.City))", "score": -0.2503988777070501, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What cities are customers that have ordered tracks from the genre jazz from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.2650222398960306, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What cities are customers that have ordered tracks from the genre jazz from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.27447860055483814, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What cities are customers that have ordered tracks from the genre jazz from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Customer.Company))", "score": -0.27557006693803926, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What cities are customers that have ordered tracks from the genre jazz from?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Jazz),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Customer.City))", "score": -0.2768723839069633, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What cities are customers that have ordered tracks from the genre jazz from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Jazz),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.28024534945471896, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What cities are customers that have ordered tracks from the genre jazz from?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Jazz), Invoice.BillingCity),Customer.City))", "score": -0.28734215666142027, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What cities are customers that have ordered tracks from the genre jazz from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Genre.Name,=,Jazz),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2924413038596483, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 230, "beams": [{"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.05696874227032822, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.31593953314222745, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,India),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5317331146541339, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,India), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5329276842403488, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,India), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5686780733394698, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,India),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5794135743634807, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "sum(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,India),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.6118738658601192, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "sum(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,India),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.6173558881574219, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "sum(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,India),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.618007749389278, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "sum(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,India),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.6234897716865808, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "sum(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,India),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),InvoiceLine.Quantity)", "score": -0.6260772497342632, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "sum(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,India),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.6302940587419626, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "sum(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,India),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),InvoiceLine.Quantity)", "score": -0.6315592720315659, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "sum(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,India),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),InvoiceLine.Quantity)", "score": -0.632211133263422, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "sum(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,India),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.6357760810392654, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 231, "beams": [{"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.07397825734551589, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.33128902034695784, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Employee.City))", "score": -0.4328283136510436, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Customer.Company))", "score": -0.51698613816734, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5454309256547276, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5470178099149052, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.552712742219228, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.5673770671510283, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5830538035170321, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Employee.PostalCode))", "score": -0.5834496980332915, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Employee.PostalCode),Invoice.BillingCity))", "score": -0.5892199016907398, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Track.Composer))", "score": -0.5970802074098174, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,Customer.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.6223965414743542, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,Customer.CustomerId),getData(Customer),Customer.CustomerId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.6698415385970699, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>=,2013-03-01 00:00:00),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))", "score": -0.6883587014928081, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 232, "beams": [{"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.18539552721050487, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.1857787293494928, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.18784965658787361, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.19190838290222462, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.19627883684158406, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.State,=,AB),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2137489962098507, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.22222700599194267, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.State,=,AB),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.23572171716211088, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.2362993817159861, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.State,=,AB),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)", "score": -0.23741492572600892, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.2384350723916957, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.23963685713014535, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.2427817083551722, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.24462512445905857, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.24908611813209164, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 233, "beams": [{"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.1909414298243064, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Customer.Country),Invoice.BillingCountry))", "score": -0.30616401055522147, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingPostalCode,=,89503), Customer.Country),Invoice.BillingCountry))", "score": -0.3227323195618695, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingPostalCode,=,89503), Customer.Country),Customer.Country))", "score": -0.32618152158818586, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,89503), Customer.Country),Invoice.BillingCountry))", "score": -0.34803225647338126, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,89503), Customer.Country),Customer.Country))", "score": -0.35148145849969764, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingPostalCode,=,89503), Customer.Country),Invoice.BillingCountry))", "score": -0.3685048318587197, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.PostalCode,=,89503), Customer.Country),Invoice.BillingCountry))", "score": -0.37086910546618057, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingPostalCode,=,89503), Customer.Country),Customer.Country))", "score": -0.37195403388503606, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.PostalCode,=,89503), Customer.Country),Customer.Country))", "score": -0.37431830749249695, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.PostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3748293883509177, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.Quantity,=,89503), Customer.Country),Invoice.BillingCountry))", "score": -0.39380476877023146, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.Quantity,=,89503), Customer.Country),Customer.Country))", "score": -0.39725397079654784, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.40759398804271624, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Customer.Country))", "score": -0.4110431900690326, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 234, "beams": [{"orig_question": "To which countries did we sell tracks with at most 11085915 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3561174825258508, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we sell tracks with at most 11085915 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3685440239230293, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we sell tracks with at most 11085915 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3873530296484496, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we sell tracks with at most 11085915 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3893866419074459, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we sell tracks with at most 11085915 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.40180844305297503, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we sell tracks with at most 11085915 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.411427558346899, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we sell tracks with at most 11085915 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.42062218903004467, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we sell tracks with at most 11085915 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<=,11085915),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.422057258047263, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we sell tracks with at most 11085915 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,11085915), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4281527663209487, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we sell tracks with at most 11085915 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,11085915),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4307660439473406, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we sell tracks with at most 11085915 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Track.Bytes,=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.44266307376629604, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we sell tracks with at most 11085915 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.44469669917727556, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we sell tracks with at most 11085915 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,11085915), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.45001884057187863, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we sell tracks with at most 11085915 bytes?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total),Invoice.BillingCountry))", "score": -0.4740043612151526, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries did we sell tracks with at most 11085915 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,11085915), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4863892819110134, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<=,11085915),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 235, "beams": [{"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,1.99), Invoice.BillingCity),Customer.City))", "score": -0.28298153754665717, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2950884515106697, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3056927764332201, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingCity),Customer.City))", "score": -0.307481365422778, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,1.99), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.32311210486731123, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99), Invoice.BillingCity),Customer.City))", "score": -0.333403071584263, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,1.99), Customer.Company),Customer.City))", "score": -0.34404561656384997, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3459359646018223, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3515408143400235, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,1.99), Invoice.BillingCity),Customer.City))", "score": -0.36673494145367497, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Invoice.BillingCity))", "score": -0.3679426594207695, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.36800701916458267, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3688806473975483, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.36979000415572505, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "To which customer cities were tracks that cost 1.99 as unit price sold to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,1.99), Invoice.BillingCity),Customer.City))", "score": -0.37015238196228895, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 236, "beams": [{"orig_question": "What's the name of the metal track, which lasts the longest?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Track.Name,=,Metal),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Milliseconds),Track.Name))", "score": -0.3519839181907843, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),Track.Milliseconds),Album.Title))"}, {"orig_question": "What's the name of the metal track, which lasts the longest?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Track.Name,=,Metal),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),Track.GenreId,Genre.GenreId),Track.Milliseconds),Track.Name))", "score": -0.3608572439847957, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),Track.Milliseconds),Album.Title))"}, {"orig_question": "What's the name of the metal track, which lasts the longest?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Metal),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Milliseconds),Track.Name))", "score": -0.38138417720914136, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),Track.Milliseconds),Album.Title))"}, {"orig_question": "What's the name of the metal track, which lasts the longest?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Track.Name,=,Metal),getData(Track),Genre.GenreId,InvoiceLine.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Milliseconds),Track.Name))", "score": -0.386900948530802, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),Track.Milliseconds),Album.Title))"}, {"orig_question": "What's the name of the metal track, which lasts the longest?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Metal),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),Track.GenreId,Genre.GenreId),Track.Milliseconds),Track.Name))", "score": -0.3902575030031527, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),Track.Milliseconds),Album.Title))"}, {"orig_question": "What's the name of the metal track, which lasts the longest?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Track.Name,=,Metal),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.AlbumId,Genre.GenreId),Track.Milliseconds),Track.Name))", "score": -0.39105493294440313, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),Track.Milliseconds),Album.Title))"}, {"orig_question": "What's the name of the metal track, which lasts the longest?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Track.Name,=,Metal),getData(Track),Genre.GenreId,InvoiceLine.TrackId),getData(Track),Track.GenreId,Genre.GenreId),Track.Milliseconds),Track.Name))", "score": -0.3957742743248134, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),Track.Milliseconds),Album.Title))"}, {"orig_question": "What's the name of the metal track, which lasts the longest?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Track.Name,=,Metal),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),Track.AlbumId,Genre.GenreId),Track.Milliseconds),Track.Name))", "score": -0.39992825873841453, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),Track.Milliseconds),Album.Title))"}, {"orig_question": "What's the name of the metal track, which lasts the longest?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Metal),getData(Track),Genre.GenreId,InvoiceLine.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Milliseconds),Track.Name))", "score": -0.41630120754915906, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),Track.Milliseconds),Album.Title))"}, {"orig_question": "What's the name of the metal track, which lasts the longest?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Metal),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.AlbumId,Genre.GenreId),Track.Milliseconds),Track.Name))", "score": -0.42045519196276016, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),Track.Milliseconds),Album.Title))"}, {"orig_question": "What's the name of the metal track, which lasts the longest?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Metal),getData(Track),Genre.GenreId,InvoiceLine.TrackId),getData(Track),Track.GenreId,Genre.GenreId),Track.Milliseconds),Track.Name))", "score": -0.42517453334317046, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),Track.Milliseconds),Album.Title))"}, {"orig_question": "What's the name of the metal track, which lasts the longest?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Track.Name,=,Metal),getData(Track),Genre.GenreId,InvoiceLine.TrackId),getData(Genre),Track.AlbumId,Genre.GenreId),Track.Milliseconds),Track.Name))", "score": -0.42597196328442083, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),Track.Milliseconds),Album.Title))"}, {"orig_question": "What's the name of the metal track, which lasts the longest?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Metal),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),Track.AlbumId,Genre.GenreId),Track.Milliseconds),Track.Name))", "score": -0.42932848563824405, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),Track.Milliseconds),Album.Title))"}, {"orig_question": "What's the name of the metal track, which lasts the longest?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Track.Name,=,Metal),getData(Track),Genre.GenreId,InvoiceLine.TrackId),getData(Track),Track.AlbumId,Genre.GenreId),Track.Milliseconds),Track.Name))", "score": -0.4348452569599047, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),Track.Milliseconds),Album.Title))"}, {"orig_question": "What's the name of the metal track, which lasts the longest?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Metal),getData(Track),Genre.GenreId,InvoiceLine.TrackId),getData(Genre),Track.AlbumId,Genre.GenreId),Track.Milliseconds),Track.Name))", "score": -0.45537219018425035, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Metal),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 237, "beams": [{"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.07504135195631534, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3164958414854482, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.37927401782911346, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.38022266619373113, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil),getData(InvoiceLine),Invoice.InvoiceId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.4127861616242268, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Brazil),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.46841850589023526, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.47617379401344806, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.4840764725727815, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.48732882597985044, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Invoice.BillingPostalCode))", "score": -0.5114163550780096, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.5264173123287037, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5305358639178819, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingAddress,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5447435787438091, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil),getData(InvoiceLine),Invoice.InvoiceId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Invoice.BillingPostalCode))", "score": -0.544928498873123, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.5648774477886036, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 238, "beams": [{"orig_question": "What are the fax numbers of customers that made an order of one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))", "score": -0.09712831818159222, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of customers that made an order of one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>=,1), Customer.Fax),Customer.Fax))", "score": -0.16798814374573084, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of customers that made an order of one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1),getData(Customer),Invoice.CustomerId,Employee.EmployeeId), Customer.Fax),Customer.Fax))", "score": -0.21487233264916217, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of customers that made an order of one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,>=,1), Customer.Fax),Customer.Fax))", "score": -0.23506161919956778, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of customers that made an order of one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))", "score": -0.25700577724395324, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of customers that made an order of one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))", "score": -0.2826382228730304, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of customers that made an order of one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1), Customer.Fax),Customer.Fax))", "score": -0.2884932451270921, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of customers that made an order of one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))", "score": -0.2954323717217229, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of customers that made an order of one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Fax),Customer.Fax))", "score": -0.30341754951380384, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of customers that made an order of one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,>=,1), Customer.Fax),Customer.Fax))", "score": -0.30437144348831685, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of customers that made an order of one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId), Customer.Fax),Customer.Fax))", "score": -0.3268588824851574, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of customers that made an order of one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))", "score": -0.33035120069928225, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of customers that made an order of one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1), Customer.Fax),Customer.Fax))", "score": -0.33297504434456726, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of customers that made an order of one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Fax),Customer.Fax))", "score": -0.3407053522196194, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of customers that made an order of one or more tracks per invoice?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))", "score": -0.34560084389821905, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 239, "beams": [{"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.09008273423387436, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.1644617015190306, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4444397337429109, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4919741995327058, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,13.86),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.49958065116264033, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5188187010280672, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,<,13.86),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5437201221268645, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5476475765050598, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,13.86),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5496385635973223, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.Total,<=,13.86),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5502899271063518, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,13.86),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5560879522963782, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5582287994541899, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,<=,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5663531668178621, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5687926573639327, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.Total,<=,13.86),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.579365877045715, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 240, "beams": [{"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.498222739155608, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,2009-05-06 00:00:00), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5311958939977712, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,2009-05-06 00:00:00), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5390113046409306, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,2009-05-06 00:00:00), Invoice.Total),Invoice.BillingCity))", "score": -0.5443335927084263, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Album.ArtistId),Artist.Name,=,2009-05-06 00:00:00), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5600995428374145, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Album.ArtistId),Artist.Name,=,2009-05-06 00:00:00), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5659229080065796, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId),Artist.Name,=,2009-05-06 00:00:00), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.567914953480574, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId),Artist.Name,=,2009-05-06 00:00:00), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5695580312203189, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,2009-05-06 00:00:00), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.573738318649739, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,2009-05-06 00:00:00), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.614939295213885, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Album.ArtistId),Invoice.BillingCity,=,2009-05-06 00:00:00), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.6216952391283926, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,2009-05-06 00:00:00), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.6227547058570444, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,2009-05-06 00:00:00), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.6295106231559354, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,2009-05-06 00:00:00), Invoice.BillingCity),Invoice.Total)", "score": -0.6320063457829147, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Track.Composer,=,2009-05-06 00:00:00), Invoice.Total),Customer.City))", "score": -0.6370663360485292, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 241, "beams": [{"orig_question": "How many composers have tracks that are longer or equal to 248032 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,248032),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Composer))", "score": -0.2913130802671539, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,248032), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers have tracks that are longer or equal to 248032 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,248032),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.3393063340096072, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,248032), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers have tracks that are longer or equal to 248032 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,248032), Track.Composer),Track.Composer))", "score": -0.3479313704219252, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,248032), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers have tracks that are longer or equal to 248032 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,248032), Track.Composer),Track.Composer))", "score": -0.3616077495544463, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,248032), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers have tracks that are longer or equal to 248032 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,248032),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Composer))", "score": -0.3629960318016081, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,248032), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers have tracks that are longer or equal to 248032 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,248032),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Composer))", "score": -0.36404086510594047, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,248032), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers have tracks that are longer or equal to 248032 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,248032),filter(getData(Track),Track.Milliseconds,=,248032),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Composer))", "score": -0.36969465832022524, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,248032), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers have tracks that are longer or equal to 248032 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,248032),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Composer))", "score": -0.37736968815947414, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,248032), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers have tracks that are longer or equal to 248032 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,248032),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Composer))", "score": -0.38378421441196614, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,248032), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers have tracks that are longer or equal to 248032 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,248032),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.3919264915083852, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,248032), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers have tracks that are longer or equal to 248032 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,248032),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Composer))", "score": -0.39430322649884464, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,248032), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers have tracks that are longer or equal to 248032 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,248032),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.39532694685523495, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,248032), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers have tracks that are longer or equal to 248032 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,=,248032), Track.Composer),Track.Composer))", "score": -0.3961168484649908, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,248032), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers have tracks that are longer or equal to 248032 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),Invoice.BillingAddress,=,248032),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.3983410177608772, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,248032), Track.Composer),Track.Composer))"}, {"orig_question": "How many composers have tracks that are longer or equal to 248032 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,248032),filter(getData(Track),Track.Milliseconds,=,248032),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.4206206852227402, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,248032), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 242, "beams": [{"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Track.AlbumId),Artist.Name,=,Temple of the Dog), Invoice.InvoiceId),Invoice.Total)", "score": -0.18361039650554403, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Temple of the Dog),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2162023915975441, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Temple of the Dog),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22126005870340162, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Temple of the Dog), Invoice.InvoiceId),Invoice.Total)", "score": -0.2243262947348369, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog), Invoice.InvoiceId),Invoice.Total)", "score": -0.23736541002044695, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Track.AlbumId),Album.Title,=,Temple of the Dog), Invoice.InvoiceId),Invoice.Total)", "score": -0.24310314448501266, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Track),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Track.AlbumId),Artist.Name,=,Temple of the Dog), Invoice.InvoiceId),Invoice.Total)", "score": -0.24412810079509206, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Temple of the Dog),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2508631985411642, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Track.AlbumId),Artist.Name,=,Temple of the Dog), Invoice.InvoiceId),Invoice.Total)", "score": -0.25514352464710205, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25579061052449686, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Temple of the Dog),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2559208656470217, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(merge(filter(getData(Album),Album.Title,=,Temple of the Dog),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2587963772878068, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2593352239100591, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Temple of the Dog),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.26288003265531756, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of the invoice total for the album titel Temple of the Dog?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Album),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog), Invoice.InvoiceId),Invoice.Total)", "score": -0.2629658897587711, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Temple of the Dog),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 243, "beams": [{"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.1821042603562416, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "sum(distinct(getData(Customer), Track.TrackId),Customer.Email)", "score": -0.4881414095530528, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Email),Customer.Email))", "score": -0.5830565458645651, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "avg(distinct(getData(Customer), Track.TrackId),Customer.Email)", "score": -0.6355664500418201, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "avg(distinct(getData(Customer), Customer.Email),Customer.Email)", "score": -0.6773873398636414, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,None), Customer.Email),Customer.Email))", "score": -0.6897694832196066, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "sum(distinct(getData(Customer), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.6985154301523021, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "sum(distinct(getData(Customer), Track.TrackId),Employee.Email)", "score": -0.7305870288934436, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.LastName))", "score": -0.7595687570534954, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Email))", "score": -0.8954957702815258, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "sum(distinct(getData(Customer), Track.TrackId),Invoice.Total)", "score": -0.9041192567152407, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "avg(distinct(getData(Customer), Customer.LastName),Customer.Email)", "score": -0.9292454234649811, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "sum(distinct(getData(Customer), Customer.Email),Customer.Email)", "score": -0.9349442687028054, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "sum(distinct(getData(Customer), Track.TrackId),Employee.Address)", "score": -0.9416249199124871, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "sum(distinct(getData(Customer), Track.TrackId),Customer.LastName)", "score": -0.9664104048594517, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 244, "beams": [{"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.04524398420653597, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3792889119376923, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Dublin), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.48516900243885175, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.48821699631116644, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Dublin), Customer.PostalCode),Invoice.BillingPostalCode))", "score": -0.520158403671303, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5377657489170815, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Dublin), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.5622470314865495, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5865939856757905, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Dublin),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.588470806156413, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Dublin), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.5910316641693498, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Address,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6097170711746003, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingCountry))", "score": -0.6233608812344755, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Dublin),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6242470727304346, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Dublin),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6368975351469932, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Dublin),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.6422008423045427, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 245, "beams": [{"orig_question": "Which tracks cost at least 99 cents?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))", "score": -0.19699315358229796, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks cost at least 99 cents?", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,0.99), Track.TrackId),Track.Bytes)", "score": -0.3558490489312049, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks cost at least 99 cents?", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,0.99), Track.TrackId),Track.UnitPrice)", "score": -0.36937103184297615, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks cost at least 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,0.99), Track.Name),Track.Name))", "score": -0.378861495289426, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks cost at least 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Invoice.Total,>=,0.99), Track.Name),Track.Name))", "score": -0.38527803725640436, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks cost at least 99 cents?", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Invoice.Total,>=,0.99), Track.TrackId),Track.Bytes)", "score": -0.3916747034390496, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks cost at least 99 cents?", "inferred_code": "sum(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Invoice.Total,>=,0.99), Track.TrackId),Track.UnitPrice)", "score": -0.40519668635082084, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks cost at least 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,>=,0.99), Track.Name),Track.Name))", "score": -0.4133215321443816, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks cost at least 99 cents?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,0.99), Track.TrackId),Track.Bytes)", "score": -0.41686764967992174, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks cost at least 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,>=,0.99), Track.Name),Track.Name))", "score": -0.4197380829889487, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks cost at least 99 cents?", "inferred_code": "sum(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,>=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4215600959302999, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks cost at least 99 cents?", "inferred_code": "sum(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.42972926323417554, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks cost at least 99 cents?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,0.99), Track.TrackId),Track.UnitPrice)", "score": -0.430389632591693, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks cost at least 99 cents?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,0.99), Track.Name),Track.Name))", "score": -0.4340123255205981, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))"}, {"orig_question": "Which tracks cost at least 99 cents?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Invoice.Total,>=,0.99), Track.TrackId),Track.Bytes)", "score": -0.4526933041877665, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 246, "beams": [{"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))", "score": -0.05942020448856056, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.Country),Employee.State))", "score": -0.2772894899826497, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,11120 Jasper Ave NW),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))", "score": -0.4299582381014946, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingAddress,=,11120 Jasper Ave NW), Employee.State),Employee.State))", "score": -0.434724556049332, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.Country))", "score": -0.46638176473788917, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,11120 Jasper Ave NW), Employee.State),Employee.State))", "score": -0.47361227606194484, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,11120 Jasper Ave NW), Employee.State),Employee.State))", "score": -0.47837809405922754, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,11120 Jasper Ave NW),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))", "score": -0.4973880979679743, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,11120 Jasper Ave NW), Customer.State),Employee.State))", "score": -0.5178273587437573, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,11120 Jasper Ave NW), Customer.State),Employee.State))", "score": -0.5225933185055753, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,11120 Jasper Ave NW), Employee.State),Employee.State))", "score": -0.5489956385943524, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,11120 Jasper Ave NW), Employee.State),Employee.State))", "score": -0.5537615274739027, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.HireDate),Employee.State))", "score": -0.5791758249979466, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,11120 Jasper Ave NW),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Country),Employee.State))", "score": -0.5831971838221952, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Customer.State),Employee.State))", "score": -0.608667368767783, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 247, "beams": [{"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.02421474147013214, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.37788918822956397, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4052011227385793, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.42977930826251487, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4574049278168917, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,69 Salem Street),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Customer.Country))", "score": -0.4656329936761018, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,69 Salem Street),getData(Invoice),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingCountry),Customer.Country))", "score": -0.4740702517595051, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4753600153581639, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingCountry),Customer.Country))", "score": -0.48149228325740595, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.49712594656681813, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Customer.Country))", "score": -0.502510956301699, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5029856349125407, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5143999792484085, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street),getData(InvoiceLine),Invoice.InvoiceId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingCountry),Customer.Country))", "score": -0.5200491933538713, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing address 69 Salem Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Customer.Country))", "score": -0.5301365758560758, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,69 Salem Street), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 248, "beams": [{"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,Track.GenreId),Track.Composer,=,296829), Track.Name),Track.Name))", "score": -0.2885566694241989, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,296829), Track.Name),Track.Name))", "score": -0.3157118079270216, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,InvoiceLine.TrackId),Track.Composer,=,296829), Track.Name),Track.Name))", "score": -0.31652829633798746, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Genre.GenreId,InvoiceLine.TrackId),Track.Composer,=,296829), Track.Name),Track.Name))", "score": -0.34368343484081015, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,296829),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.3771029406693318, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,296829), Track.Name),Track.Name))", "score": -0.3830580427769332, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,296829),getData(Track),InvoiceLine.TrackId,Track.GenreId),getData(Track),InvoiceLine.TrackId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.388640877099138, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Composer,=,296829), Track.Name),Track.Name))", "score": -0.39733335187524127, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,296829),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,InvoiceLine.TrackId), Track.Name),Track.Name))", "score": -0.4055687786415236, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,Track.GenreId),Track.Composer,=,296829), Track.Bytes),Track.Name))", "score": -0.4122638462618001, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,296829),getData(Track),InvoiceLine.TrackId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.4125574314810416, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,296829),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Album.AlbumId,InvoiceLine.TrackId), Track.Name),Track.Name))", "score": -0.4152466890556767, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,Track.GenreId),Track.Composer,=,296829), Track.Name),Track.Bytes))", "score": -0.42829383786571285, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,Track.GenreId),Track.Name,=,296829),Track.Composer,=,296829), Track.Name),Track.Name))", "score": -0.42936948621001647, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "On how many tracks is the song 296829 millisecond long?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Genre.Name,=,296829),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.42948346787373193, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,296829),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
